{
  "extensions": {
    "BuiltInExtension": [
      {
        "name": "getArucasVersion",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the version of Arucas that is currently running"
        ],
        "returns": {
          "type": "String",
          "desc": "the version of Arucas that is currently running"
        },
        "examples": [
          "getArucasVersion();"
        ]
      },
      {
        "name": "getMilliTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time in milliseconds"
        ],
        "returns": {
          "type": "Number",
          "desc": "the current time in milliseconds"
        },
        "examples": [
          "getMilliTime();"
        ]
      },
      {
        "name": "debug",
        "is_arbitrary": false,
        "desc": [
          "This is used to enable or disable debug mode"
        ],
        "params": [
          {
            "name": "bool",
            "type": "Boolean",
            "desc": "true to enable debug mode, false to disable debug mode"
          }
        ],
        "examples": [
          "debug(true);"
        ]
      },
      {
        "name": "runFromString",
        "is_arbitrary": false,
        "desc": [
          "This is used to evaluate a string as a script"
        ],
        "params": [
          {
            "name": "string",
            "type": "String",
            "desc": "the string to evaluate"
          }
        ],
        "returns": {
          "type": "Value",
          "desc": "the return value of the script"
        },
        "examples": [
          "runFromString('return 1;');"
        ]
      },
      {
        "name": "getNanoTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time in nanoseconds"
        ],
        "returns": {
          "type": "Number",
          "desc": "the current time in nanoseconds"
        },
        "examples": [
          "getNanoTime();"
        ]
      },
      {
        "name": "getTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time formatted with HH:mm:ss in your local time"
        ],
        "returns": {
          "type": "String",
          "desc": "the current time formatted with HH:mm:ss"
        },
        "examples": [
          "getTime();"
        ]
      },
      {
        "name": "isMain",
        "is_arbitrary": false,
        "desc": [
          "This is used to check whether the script is the main script"
        ],
        "returns": {
          "type": "Boolean",
          "desc": "true if the script is the main script, false if it is not"
        },
        "examples": [
          "isMain();"
        ]
      },
      {
        "name": "throwRuntimeError",
        "is_arbitrary": false,
        "deprecated": [
          "You should use the `throw` keyword"
        ],
        "desc": [
          "This is used to throw a runtime error"
        ],
        "params": [
          {
            "name": "message",
            "type": "String",
            "desc": "the message of the error"
          }
        ],
        "throws": [
          "the error with the message"
        ],
        "examples": [
          "throwRuntimeError('I'm throwing this error');"
        ]
      },
      {
        "name": "experimental",
        "is_arbitrary": false,
        "desc": [
          "This is used to enable or disable experimental mode"
        ],
        "params": [
          {
            "name": "bool",
            "type": "Boolean",
            "desc": "true to enable experimental mode, false to disable experimental mode"
          }
        ],
        "examples": [
          "experimental(true);"
        ]
      },
      {
        "name": "run",
        "is_arbitrary": false,
        "desc": [
          "This is used to run a .arucas file, you can use on script to run other scripts"
        ],
        "params": [
          {
            "name": "path",
            "type": "String",
            "desc": "as a file path"
          }
        ],
        "returns": {
          "type": "Value",
          "desc": "any value that the file returns"
        },
        "throws": [
          "Failed to execute script..."
        ],
        "examples": [
          "run('/home/user/script.arucas');"
        ]
      },
      {
        "name": "getUnixTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time in seconds since the Unix epoch"
        ],
        "returns": {
          "type": "Number",
          "desc": "the current time in seconds since the Unix epoch"
        },
        "examples": [
          "getUnixTime();"
        ]
      },
      {
        "name": "sleep",
        "is_arbitrary": false,
        "desc": [
          "This pauses your program for a certain amount of milliseconds"
        ],
        "params": [
          {
            "name": "milliseconds",
            "type": "Number",
            "desc": "milliseconds to sleep"
          }
        ],
        "examples": [
          "sleep(1000);"
        ]
      },
      {
        "name": "random",
        "is_arbitrary": false,
        "desc": [
          "This is used to generate a random integer between 0 and the bound"
        ],
        "params": [
          {
            "name": "bound",
            "type": "Number",
            "desc": "the maximum bound (exclusive)"
          }
        ],
        "returns": {
          "type": "Number",
          "desc": "the random integer"
        },
        "examples": [
          "random(10);"
        ]
      },
      {
        "name": "input",
        "is_arbitrary": false,
        "desc": [
          "This is used to take an input from the user"
        ],
        "params": [
          {
            "name": "prompt",
            "type": "String",
            "desc": "the prompt to show the user"
          }
        ],
        "returns": {
          "type": "String",
          "desc": "the input from the user"
        },
        "examples": [
          "input('What is your name?');"
        ]
      },
      {
        "name": "print",
        "is_arbitrary": true,
        "desc": [
          "This prints a number of values to the console"
        ],
        "params": [
          {
            "name": "printValue...",
            "type": "Value",
            "desc": "the value to print"
          }
        ],
        "examples": [
          "print('Hello World', 'This is a test', 123);"
        ]
      },
      {
        "name": "print",
        "is_arbitrary": false,
        "desc": [
          "This prints a value to the console"
        ],
        "params": [
          {
            "name": "printValue",
            "type": "Value",
            "desc": "the value to print"
          }
        ],
        "examples": [
          "print('Hello World');"
        ]
      },
      {
        "name": "len",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the length of a collection or string"
        ],
        "params": [
          {
            "name": "collection",
            "type": "String",
            "desc": "the collection or string"
          }
        ],
        "throws": [
          "Cannot pass ... into len()"
        ],
        "examples": [
          "len(\"Hello World\");"
        ]
      },
      {
        "name": "stop",
        "is_arbitrary": false,
        "desc": [
          "This is used to stop a script"
        ],
        "examples": [
          "stop();"
        ]
      },
      {
        "name": "callFunctionWithList",
        "is_arbitrary": false,
        "deprecated": [
          "You should use Function class `Function.callWithList(fun() {}, [])`"
        ],
        "desc": [
          "This is used to call a function with a list of arguments"
        ],
        "params": [
          {
            "name": "function",
            "type": "Function",
            "desc": "the function"
          },
          {
            "name": "list",
            "type": "List",
            "desc": "the list of arguments"
          }
        ],
        "returns": {
          "type": "Value",
          "desc": "the return value of the function"
        },
        "examples": [
          "callFunctionWithList(fun(n1, n2, n3) { }, [1, 2, 3]);"
        ]
      },
      {
        "name": "suppressDeprecated",
        "is_arbitrary": false,
        "desc": [
          "This is used to enable or disable suppressing deprecation warnings"
        ],
        "params": [
          {
            "name": "bool",
            "type": "Boolean",
            "desc": "true to enable suppressing deprecation warnings, false to disable suppressing deprecation warnings"
          }
        ],
        "examples": [
          "suppressDeprecated(true);"
        ]
      },
      {
        "name": "getDate",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current date formatted with dd/MM/yyyy in your local time"
        ],
        "returns": {
          "type": "String",
          "desc": "the current date formatted with dd/MM/yyyy"
        },
        "examples": [
          "getDate();"
        ]
      }
    ],
    "MinecraftExtension": [
      {
        "name": "runThreaded"
      },
      {
        "name": "getMinecraftClient",
        "is_arbitrary": false,
        "deprecated": [
          "Use 'MinecraftClient.getClient()'"
        ],
        "desc": [
          "This gets the MinecraftClient instance"
        ],
        "returns": {
          "type": "MinecraftClient",
          "desc": "The MinecraftClient instance"
        },
        "examples": [
          "getMinecraftClient();"
        ]
      },
      {
        "name": "hold",
        "is_arbitrary": false,
        "desc": [
          "This freezes the current thread and halts execution, same functionality as 'Thread.freeze()'"
        ],
        "examples": [
          "hold();"
        ]
      }
    ]
  },
  "classes": {
    "Object": {
      "name": "Object",
      "desc": [
        "This is the base class for every other class in Arucas."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "hashCode",
          "is_arbitrary": false,
          "desc": [
            "This returns the hashcode of the value, this is mainly used for maps and sets"
          ],
          "returns": {
            "type": "Number",
            "desc": "the hashcode of the value"
          },
          "examples": [
            "'thing'.hashCode();"
          ]
        },
        {
          "name": "equals",
          "is_arbitrary": false,
          "deprecated": [
            "You should use '=='"
          ],
          "desc": [
            "This checks whether the value is equal to another value"
          ],
          "params": [
            {
              "name": "other",
              "type": "Value",
              "desc": "the other value you want to check against"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the values are equal"
          },
          "examples": [
            "10.equals(20);"
          ]
        },
        {
          "name": "toString",
          "is_arbitrary": false,
          "desc": [
            "This returns the string representation of the value"
          ],
          "returns": {
            "type": "String",
            "desc": "the string representation of the value"
          },
          "examples": [
            "[10, 11, 12].toString();"
          ]
        },
        {
          "name": "copy",
          "is_arbitrary": false,
          "desc": [
            "This returns a copy of the value, some values might just return themselves"
          ],
          "returns": {
            "type": "Value",
            "desc": "the copy of the value"
          },
          "examples": [
            "10.copy();"
          ]
        },
        {
          "name": "getValueType",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Type.of(<Value>).getName()'"
          ],
          "desc": [
            "This returns the name of the type of the value"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the type of value"
          },
          "examples": [
            "10.getValueType();"
          ]
        },
        {
          "name": "instanceOf",
          "is_arbitrary": false,
          "desc": [
            "This checks whether this value is an instance of another type"
          ],
          "params": [
            {
              "name": "type",
              "type": "Type",
              "desc": "the other type you want to check against"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value is of that type"
          },
          "examples": [
            "10.instanceOf(String.type);"
          ]
        }
      ],
      "static_methods": []
    },
    "Type": {
      "name": "Type",
      "desc": [
        "This class lets you get the type of a class or value."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getStaticMethod",
          "is_arbitrary": false,
          "desc": [
            "This gets the static method of the type"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters",
              "type": "Number",
              "desc": "the number of parameters for the method"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the static method of the type"
          },
          "examples": [
            "String.type.getStaticMethod('nonExistent', 0);"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the type"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the type"
          },
          "examples": [
            "String.type.getName();"
          ]
        },
        {
          "name": "getConstructor",
          "is_arbitrary": false,
          "desc": [
            "This gets the constructor of the type"
          ],
          "params": [
            {
              "name": "parameters",
              "type": "Number",
              "desc": "the number of parameters for the constructor"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the constructor of the type"
          },
          "examples": [
            "String.type.getConstructor(0);"
          ]
        },
        {
          "name": "instanceOf",
          "is_arbitrary": false,
          "desc": [
            "This checks whether a type is a subtype of another type"
          ],
          "params": [
            {
              "name": "type",
              "type": "Type",
              "desc": "the other type you want to check against"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the type is of that type"
          },
          "examples": [
            "Type.of('').instanceOf(Number.type);"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This gets the specific type of a value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to get the type of"
            }
          ],
          "returns": {
            "type": "Type",
            "desc": "the type of the value"
          },
          "examples": [
            "Type.of(0);"
          ]
        }
      ]
    },
    "Enum": {
      "name": "Enum",
      "desc": [
        "All enums extends this class."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the name of the enum value"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the enum value"
          },
          "examples": [
            "enum.getName();"
          ]
        },
        {
          "name": "ordinal",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the ordinal of the enum value"
          ],
          "returns": {
            "type": "Number",
            "desc": "the ordinal of the enum value"
          },
          "examples": [
            "enum.ordinal();"
          ]
        }
      ],
      "static_methods": []
    },
    "Function": {
      "name": "Function",
      "desc": [
        "Adds utilities for delegating and calling functions."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": [
        {
          "name": "call",
          "is_arbitrary": true,
          "desc": [
            "Calls the given delegate with the given arbitrary parameters"
          ],
          "params": [
            {
              "name": "delegate",
              "type": "Function",
              "desc": "the delegate to call"
            },
            {
              "name": "parameters...",
              "type": "Value",
              "desc": "the parameters to pass to the delegate"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the return value of the delegate"
          },
          "examples": [
            "Function.call(Function.getBuiltIn('print', 1), 'Hello World!');"
          ]
        },
        {
          "name": "getMethod",
          "is_arbitrary": false,
          "desc": [
            "Returns a method delegate with the given name and parameter count"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value to call the method on"
            },
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameterCount",
              "type": "Number",
              "desc": "the parameter count of the method"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the method delegate"
          },
          "examples": [
            "Function.getMethod('String', 'contains', 1);"
          ]
        },
        {
          "name": "callWithList",
          "is_arbitrary": false,
          "desc": [
            "Calls the given delegate with the given parameters"
          ],
          "params": [
            {
              "name": "delegate",
              "type": "Function",
              "desc": "the delegate to call"
            },
            {
              "name": "parameters",
              "type": "List",
              "desc": "the parameters to pass to the delegate"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the return value of the delegate"
          },
          "examples": [
            "Function.callWithList(fun(m1, m2) { }, ['Hello', 'World']);"
          ]
        },
        {
          "name": "getBuiltIn",
          "is_arbitrary": false,
          "desc": [
            "Returns a built-in function delegate with the given name and parameter count"
          ],
          "params": [
            {
              "name": "functionName",
              "type": "String",
              "desc": "the name of the function"
            },
            {
              "name": "parameterCount",
              "type": "Number",
              "desc": "the parameter count of the function"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the built-in function delegate"
          },
          "examples": [
            "Function.getBuiltIn('print', 1);"
          ]
        }
      ]
    },
    "String": {
      "name": "String",
      "desc": [
        "This class cannot be constructed since strings have a literal. Strings are immutable."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "uppercase",
          "is_arbitrary": false,
          "desc": [
            "This makes the string uppercase"
          ],
          "returns": {
            "type": "String",
            "desc": "the uppercase string"
          },
          "examples": [
            "'hello'.uppercase();"
          ]
        },
        {
          "name": "lowercase",
          "is_arbitrary": false,
          "desc": [
            "This makes the string lowercase"
          ],
          "returns": {
            "type": "String",
            "desc": "the lowercase string"
          },
          "examples": [
            "'HELLO'.lowercase();"
          ]
        },
        {
          "name": "format",
          "is_arbitrary": true,
          "desc": [
            "This formats the string with the given parameters, which replace '%s' in the string"
          ],
          "params": [
            {
              "name": "values...",
              "type": "Value",
              "desc": "the values to add, these will be converted to strings"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the formatted string"
          },
          "throws": [
            "You are missing values to be formatted"
          ],
          "examples": [
            "'%s %s'.format('hello', 'world');"
          ]
        },
        {
          "name": "containsString"
        },
        {
          "name": "toList",
          "is_arbitrary": false,
          "desc": [
            "This makes a list of all the characters in the string"
          ],
          "returns": {
            "type": "List",
            "desc": "the list of characters"
          },
          "examples": [
            "'hello'.toList();"
          ]
        },
        {
          "name": "matches",
          "is_arbitrary": false,
          "desc": [
            "This checks if the string matches the given regex"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to check the string with"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the string matches the given regex"
          },
          "examples": [
            "'hello'.matches('[a-z]*');"
          ]
        },
        {
          "name": "replaceAll",
          "is_arbitrary": false,
          "desc": [
            "This replaces all the instances of a regex with the replace string"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex you want to replace"
            },
            {
              "name": "replace",
              "type": "String",
              "desc": "the string you want to replace it with"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the modified string"
          },
          "examples": [
            "'hello'.replaceAll('l', 'x');"
          ]
        },
        {
          "name": "capitalise",
          "is_arbitrary": false,
          "desc": [
            "This capitalises the first letter of the string"
          ],
          "returns": {
            "type": "String",
            "desc": "the capitalised string"
          },
          "examples": [
            "'foo'.capitalise();"
          ]
        },
        {
          "name": "contains",
          "is_arbitrary": false,
          "desc": [
            "This checks if the string contains the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string you want to check for"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the string contains the given string"
          },
          "examples": [
            "'hello'.contains('he');"
          ]
        },
        {
          "name": "split",
          "is_arbitrary": false,
          "desc": [
            "This splits the string into a list of strings based on a regex"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to split the string with"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of strings"
          },
          "examples": [
            "'foo/bar/baz'.split('/');"
          ]
        },
        {
          "name": "strip",
          "is_arbitrary": false,
          "desc": [
            "This strips the whitespace from the string"
          ],
          "returns": {
            "type": "String",
            "desc": "the stripped string"
          },
          "examples": [
            "'  hello  '.strip();"
          ]
        },
        {
          "name": "subString",
          "is_arbitrary": false,
          "desc": [
            "This returns a substring of the string"
          ],
          "params": [
            {
              "name": "from",
              "type": "Number",
              "desc": "the start index"
            },
            {
              "name": "to",
              "type": "Number",
              "desc": "the end index"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the substring"
          },
          "examples": [
            "'hello'.subString(1, 3);"
          ]
        },
        {
          "name": "find",
          "is_arbitrary": false,
          "desc": [
            "This finds all instances of the regex in the string"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to search the string with"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of all instances of the regex in the string"
          },
          "examples": [
            "'hello'.find('[a-z]*');"
          ]
        },
        {
          "name": "endsWith",
          "is_arbitrary": false,
          "desc": [
            "This checks if the string ends with the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to check the string with"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the string ends with the given string"
          },
          "examples": [
            "'hello'.endsWith('he');"
          ]
        },
        {
          "name": "toNumber",
          "is_arbitrary": false,
          "desc": [
            "This tries to convert the string to a number"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number value"
          },
          "throws": [
            "Cannor parse ... as a number"
          ],
          "examples": [
            "'0xFF'.toNumber();"
          ]
        },
        {
          "name": "startsWith",
          "is_arbitrary": false,
          "desc": [
            "This checks if the string starts with the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to check the string with"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the string starts with the given string"
          },
          "examples": [
            "'hello'.startsWith('he');"
          ]
        }
      ],
      "static_methods": []
    },
    "Boolean": {
      "name": "Boolean",
      "desc": [
        "This class cannot be constructed since Booleans have literals."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": []
    },
    "Error": {
      "name": "Error",
      "desc": [
        "This class is the only type that can be thrown"
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new Error value with no message"
          ],
          "examples": [
            "new Error();"
          ]
        },
        {
          "desc": [
            "This creates a new Error value with the given details as a message"
          ],
          "params": [
            {
              "name": "details",
              "type": "String",
              "desc": "the details of the error"
            }
          ],
          "examples": [
            "new Error('This is an error');"
          ]
        },
        {
          "desc": [
            "This creates a new Error value with the given details as a message and the given value"
          ],
          "params": [
            {
              "name": "details",
              "type": "String",
              "desc": "the details of the error"
            },
            {
              "name": "value",
              "type": "Value",
              "desc": "the value that is related to the error"
            }
          ],
          "examples": [
            "new Error('This is an error', [1, 2, 3]);"
          ]
        }
      ],
      "methods": [
        {
          "name": "getValue",
          "is_arbitrary": false,
          "desc": [
            "This returns the value that is related to the error"
          ],
          "returns": {
            "type": "Value",
            "desc": "the value that is related to the error"
          },
          "examples": [
            "error.getValue();"
          ]
        },
        {
          "name": "getDetails",
          "is_arbitrary": false,
          "desc": [
            "This returns the raw message of the error"
          ],
          "returns": {
            "type": "String",
            "desc": "the details of the error"
          },
          "examples": [
            "error.getDetails();"
          ]
        },
        {
          "name": "getFormattedDetails",
          "is_arbitrary": false,
          "desc": [
            "This returns the message of the error in a formatted string"
          ],
          "returns": {
            "type": "String",
            "desc": "the details of the error"
          },
          "examples": [
            "error.getFormattedDetails();"
          ]
        }
      ],
      "static_methods": []
    },
    "List": {
      "name": "List",
      "desc": [
        "This class cannot be constructed since it has a literal, `[]`"
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getIndex"
        },
        {
          "name": "containsAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the list contains all the values in a collection"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection you want to check for"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the list contains all the values in the collection, false otherwise"
          },
          "throws": [
            "... is not a collection"
          ],
          "examples": [
            "`['object', 81, 96, 'case'].containsAll(['foo', 'bar']);`"
          ]
        },
        {
          "name": "clear",
          "is_arbitrary": false,
          "desc": [
            "This allows you to clear all the values the list"
          ],
          "examples": [
            "`['object', 81, 96, 'case'].clear();`"
          ]
        },
        {
          "name": "isEmpty",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the list is empty"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the list is empty, false otherwise"
          },
          "examples": [
            "`['object', 81, 96, 'case'].isEmpty();`"
          ]
        },
        {
          "name": "insert",
          "is_arbitrary": false,
          "desc": [
            "This allows you to insert a value at a specific index"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to insert"
            },
            {
              "name": "index",
              "type": "Number",
              "desc": "the index you want to insert the value at"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "throws": [
            "Index is out of bounds"
          ],
          "examples": [
            "`['object', 81, 96, 'case'].insert('foo', 1);`"
          ]
        },
        {
          "name": "removeIndex"
        },
        {
          "name": "concat",
          "is_arbitrary": false,
          "deprecated": [
            "You should use `<List>.addAll(collection)` instead"
          ],
          "desc": [
            "This allows you to concatenate two lists"
          ],
          "params": [
            {
              "name": "otherList",
              "type": "List",
              "desc": "the list you want to concatenate with"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the concatenated list"
          },
          "examples": [
            "`['object', 81, 96, 'case'].concat(['foo', 'bar']);`"
          ]
        },
        {
          "name": "remove",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove the value at a specific index"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the value you want to remove"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the value that was removed"
          },
          "throws": [
            "Index is out of bounds"
          ],
          "examples": [
            "`['object', 81, 96, 'case'].remove(1);`"
          ]
        },
        {
          "name": "contains",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the list contains a value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to check for"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the list contains the value, false otherwise"
          },
          "examples": [
            "`['object', 81, 96, 'case'].contains('foo');`"
          ]
        },
        {
          "name": "addAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add all the values in a collection to the list"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection you want to add"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "throws": [
            "... is not a collection"
          ],
          "examples": [
            "`['object', 81, 96, 'case'].addAll(['foo', 'bar']);`"
          ]
        },
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the value at a specific index"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the value you want to get"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the value at the index"
          },
          "throws": [
            "Index is out of bounds"
          ],
          "examples": [
            "`['object', 81, 96, 'case'].get(1);`"
          ]
        },
        {
          "name": "toString",
          "is_arbitrary": false,
          "desc": [
            "This converts the list to a string and evaluating any collections inside it"
          ],
          "returns": {
            "type": "String",
            "desc": "the string representation of the set"
          },
          "examples": [
            "`['object', 81, 96, 'case'].toString();`"
          ]
        },
        {
          "name": "indexOf",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the index of a value in the list"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to check for"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the index of the value, -1 if the value is not in the list"
          },
          "examples": [
            "`['object', 81, 96, 'case'].indexOf('case');`"
          ]
        },
        {
          "name": "append",
          "is_arbitrary": false,
          "desc": [
            "This allows you to append a value to the end of the list"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to append"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "`['object', 81, 96, 'case'].append('foo');`"
          ]
        }
      ],
      "static_methods": []
    },
    "Set": {
      "name": "Set",
      "desc": [
        "Sets are collections of unique values. Similar to maps, without the values.",
        "An instance of the class can be created by using `Set.of(values...)`"
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "add",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add a value to the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to add to the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value was successfully added to the set"
          },
          "examples": [
            "Set.of().add('object');"
          ]
        },
        {
          "name": "contains",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check whether a value is in the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value that you want to check in the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value is in the set"
          },
          "examples": [
            "Set.of('object').contains('object');"
          ]
        },
        {
          "name": "addAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add all the values in a collection into the set"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection of values you want to add"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the modified set"
          },
          "throws": [
            "... is not a collection"
          ],
          "examples": [
            "Set.of().addAll(Set.of('object', 81, 96, 'case'));"
          ]
        },
        {
          "name": "containsAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check whether a collection of values are all in the set"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection of values you want to check in the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether all the values are in the set"
          },
          "throws": [
            "... is not a collection"
          ],
          "examples": [
            "Set.of('object').containsAll(Set.of('object', 81, 96, 'case'));"
          ]
        },
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get a value from in the set.",
            "The reason this might be useful is if you want to retrieve something",
            "from the set that will have the same hashcode but be in a different state",
            "as the value you are passing in"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to get from the set"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the value you wanted to get, null if it wasn't in the set"
          },
          "examples": [
            "Set.of('object').get('object');"
          ]
        },
        {
          "name": "clear",
          "is_arbitrary": false,
          "desc": [
            "This removes all values from inside the set"
          ],
          "examples": [
            "Set.of('object').clear();"
          ]
        },
        {
          "name": "isEmpty",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check whether the set has no values"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the set is empty"
          },
          "examples": [
            "Set.of().isEmpty();"
          ]
        },
        {
          "name": "toString",
          "is_arbitrary": false,
          "desc": [
            "This converts the set to a string and evaluating any collections inside it"
          ],
          "returns": {
            "type": "String",
            "desc": "the string representation of the set"
          },
          "examples": [
            "Set.of('object').toString();"
          ]
        },
        {
          "name": "remove",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove a value from the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to remove from the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value was removed from the set"
          },
          "examples": [
            "Set.of('object').remove('object');"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "unordered",
          "is_arbitrary": false,
          "desc": [
            "This creates an unordered set"
          ],
          "returns": {
            "type": "Set",
            "desc": "the unordered set"
          },
          "examples": [
            "Set.unordered();"
          ]
        },
        {
          "name": "of",
          "is_arbitrary": true,
          "desc": [
            "This allows you to create a set with an arbitrary number of values"
          ],
          "params": [
            {
              "name": "values...",
              "type": "Value",
              "desc": "the values you want to add to the set"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the set you created"
          },
          "examples": [
            "Set.of('object', 81, 96, 'case');"
          ]
        }
      ]
    },
    "Map": {
      "name": "Map",
      "desc": [
        "This class cannot be constructed since it has a literal, `{}`"
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getValues",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the values in the map"
          ],
          "returns": {
            "type": "List",
            "desc": "a complete list of all the values"
          },
          "examples": [
            "{'key': 'value', 'key2', 'value2'}.getValues();"
          ]
        },
        {
          "name": "containsKey",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the map contains a specific key"
          ],
          "params": [
            {
              "name": "key",
              "type": "Value",
              "desc": "the key you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the map contains the key, false otherwise"
          },
          "examples": [
            "{'key': 'value'}.containsKey('key');"
          ]
        },
        {
          "name": "putAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to put all the keys and values of another map into this map"
          ],
          "params": [
            {
              "name": "another map",
              "type": "Map",
              "desc": "the map you want to merge into this map"
            }
          ],
          "examples": [
            "{'key': 'value'}.putAll({'key2': 'value2'});"
          ]
        },
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the value of a key in the map"
          ],
          "params": [
            {
              "name": "key",
              "type": "Value",
              "desc": "the key you want to get the value of"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the value of the key, will return null if non-existent"
          },
          "examples": [
            "{'key': 'value'}.get('key');"
          ]
        },
        {
          "name": "isEmpty",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the map is empty"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the map is empty, false otherwise"
          },
          "examples": [
            "{'key': 'value'}.isEmpty();"
          ]
        },
        {
          "name": "clear",
          "is_arbitrary": false,
          "desc": [
            "This allows you to clear the map of all the keys and values"
          ],
          "examples": [
            "{'key': 'value'}.clear();"
          ]
        },
        {
          "name": "toString",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the string representation of the map and evaluating any collections inside it"
          ],
          "returns": {
            "type": "String",
            "desc": "the string representation of the map"
          },
          "examples": [
            "{'key': []}.toString();"
          ]
        },
        {
          "name": "getKeys",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the keys in the map"
          ],
          "returns": {
            "type": "List",
            "desc": "a complete list of all the keys"
          },
          "examples": [
            "{'key': 'value', 'key2', 'value2'}.getKeys();"
          ]
        },
        {
          "name": "putIfAbsent",
          "is_arbitrary": false,
          "desc": [
            "This allows you to put a key and value in the map if it doesn't exist"
          ],
          "params": [
            {
              "name": "key",
              "type": "Value",
              "desc": "the key you want to put"
            },
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to put"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the previous value associated with the key, null if none"
          },
          "examples": [
            "{'key': 'value'}.putIfAbsent('key2', 'value2');"
          ]
        },
        {
          "name": "remove",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove a key and its value from the map"
          ],
          "params": [
            {
              "name": "key",
              "type": "Value",
              "desc": "the key you want to remove"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the value associated with the key, null if none"
          },
          "examples": [
            "{'key': 'value'}.remove('key');"
          ]
        },
        {
          "name": "put",
          "is_arbitrary": false,
          "desc": [
            "This allows you to put a key and value in the map"
          ],
          "params": [
            {
              "name": "key",
              "type": "Value",
              "desc": "the key you want to put"
            },
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to put"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the previous value associated with the key, null if none"
          },
          "examples": [
            "{'key': 'value'}.put('key2', 'value2');"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "unordered",
          "is_arbitrary": false,
          "desc": [
            "This function allows you to create an unordered map"
          ],
          "returns": {
            "type": "Map",
            "desc": "an unordered map"
          },
          "examples": [
            "Map.unordered();"
          ]
        }
      ]
    },
    "Null": {
      "name": "Null",
      "desc": [
        "This class cannot be constructed since null has a literal `null`."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": []
    },
    "Number": {
      "name": "Number",
      "desc": [
        "This class cannot be constructed as it has a literal representation. For math related functions see the Math class."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "isInfinite",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if a number is infinite"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the number is infinite"
          },
          "examples": [
            "(1/0).isInfinite();"
          ]
        },
        {
          "name": "round",
          "is_arbitrary": false,
          "desc": [
            "This allows you to round a number to the nearest integer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "3.5.round();"
          ]
        },
        {
          "name": "absolute",
          "is_arbitrary": false,
          "deprecated": [
            "You should use `Math.abs(num)`"
          ],
          "desc": [
            "This allows you to get the absolute value of a number"
          ],
          "returns": {
            "type": "Number",
            "desc": "the absolute value of the number"
          },
          "examples": [
            "(-5).absolute();"
          ]
        },
        {
          "name": "toDegrees",
          "is_arbitrary": false,
          "deprecated": [
            "You should use `Math.toDegrees(num)`"
          ],
          "desc": [
            "This allows you to convert a number in radians to degrees"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number in degrees"
          },
          "examples": [
            "Math.pi.toDegrees();"
          ]
        },
        {
          "name": "toRadians",
          "is_arbitrary": false,
          "deprecated": [
            "You should use `Math.toRadians(num)`"
          ],
          "desc": [
            "This allows you to convert a number in degrees to radians"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number in radians"
          },
          "examples": [
            "5.toRadians();"
          ]
        },
        {
          "name": "ceil",
          "is_arbitrary": false,
          "desc": [
            "This allows you to round a number up to the nearest integer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "3.5.ceil();"
          ]
        },
        {
          "name": "isNaN",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if a number is not a number"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the number is not a number"
          },
          "examples": [
            "(0/0).isNaN();"
          ]
        },
        {
          "name": "floor",
          "is_arbitrary": false,
          "desc": [
            "This allows you to round a number down to the nearest integer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "3.5.floor();"
          ]
        },
        {
          "name": "modulus",
          "is_arbitrary": false,
          "deprecated": [
            "You should use `Math.mod(num1, num2)`"
          ],
          "desc": [
            "This allows you to get the modulus of two numbers"
          ],
          "params": [
            {
              "name": "otherNumber",
              "type": "Number",
              "desc": "the divisor"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the modulus of the two numbers"
          },
          "examples": [
            "5.modulus(2);"
          ]
        }
      ],
      "static_methods": []
    },
    "Thread": {
      "name": "Thread",
      "desc": [
        "This class allows you to create threads for asynchronous execution."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getAge",
          "is_arbitrary": false,
          "desc": [
            "This gets the age of the thread in milliseconds"
          ],
          "returns": {
            "type": "Number",
            "desc": "the age of the thread"
          },
          "examples": [
            "Thread.getCurrentThread().getAge();"
          ]
        },
        {
          "name": "isAlive",
          "is_arbitrary": false,
          "desc": [
            "This checks if the thread is alive (still running)"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the thread is alive, false if not"
          },
          "examples": [
            "Thread.getCurrentThread().isAlive();"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the thread"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the thread"
          },
          "examples": [
            "Thread.getCurrentThread().getName();"
          ]
        },
        {
          "name": "stop",
          "is_arbitrary": false,
          "desc": [
            "This stops the thread from executing, anything that was running will be instantly stopped"
          ],
          "throws": [
            "Thread is not alive"
          ],
          "examples": [
            "Thread.getCurrentThread().stop();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "freeze",
          "is_arbitrary": false,
          "desc": [
            "This freezes the current thread, stops anything else from executing on the thread"
          ],
          "examples": [
            "Thread.freeze();"
          ]
        },
        {
          "name": "runThreaded",
          "is_arbitrary": false,
          "desc": [
            "This starts a new thread and runs a function on it, the thread will ",
            "terminate when it finishes executing the function, threads will stop automatically ",
            "when the program stops, you are also able to stop threads by using the Thread value"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to run on a new thread"
            }
          ],
          "returns": {
            "type": "Thread",
            "desc": "the new thread"
          },
          "examples": [
            "Thread.runThreaded(fun() {\n\tprint(\"Running asynchronously!\");\n});\n"
          ]
        },
        {
          "name": "runThreaded",
          "is_arbitrary": false,
          "desc": [
            "This starts a new thread with a specific name and runs a function on it"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name of the thread"
            },
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to run on a new thread"
            }
          ],
          "returns": {
            "type": "Thread",
            "desc": "the new thread"
          },
          "examples": [
            "Thread.runThreaded(\"MyThread\", fun() {\n\tprint(\"Running asynchronously on MyThread!\");\n});\n"
          ]
        },
        {
          "name": "getCurrentThread",
          "is_arbitrary": false,
          "desc": [
            "This gets the current thread that the code is running on"
          ],
          "returns": {
            "type": "Thread",
            "desc": "the current thread"
          },
          "throws": [
            "Thread is not safe to get"
          ],
          "examples": [
            "Thread.getCurrentThread();"
          ]
        }
      ]
    },
    "File": {
      "name": "File",
      "desc": [
        "This class allows you to manipulate files."
      ],
      "import_path": null,
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new File object with set path"
          ],
          "params": [
            {
              "name": "path",
              "type": "String",
              "desc": "the path of the file"
            }
          ],
          "examples": [
            "new File('foo/bar/script.arucas')"
          ]
        }
      ],
      "methods": [
        {
          "name": "read",
          "is_arbitrary": false,
          "desc": [
            "This reads the file and returns the contents as a string"
          ],
          "returns": {
            "type": "String",
            "desc": "the contents of the file"
          },
          "throws": [
            "There was an error reading the file: ...",
            "Out of Memory - The file you are trying to read is too large"
          ],
          "examples": [
            "file.read()"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This returns the name of the file"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the file"
          },
          "examples": [
            "File.getName()"
          ]
        },
        {
          "name": "getAbsolutePath",
          "is_arbitrary": false,
          "desc": [
            "This returns the absolute path of the file"
          ],
          "returns": {
            "type": "String",
            "desc": "the absolute path of the file"
          },
          "examples": [
            "file.getAbsolutePath()"
          ]
        },
        {
          "name": "getPath",
          "is_arbitrary": false,
          "desc": [
            "This returns the path of the file"
          ],
          "returns": {
            "type": "String",
            "desc": "the path of the file"
          },
          "examples": [
            "file.getPath()"
          ]
        },
        {
          "name": "exists",
          "is_arbitrary": false,
          "desc": [
            "This returns if the file exists"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the file exists"
          },
          "throws": [
            "Could not check file: ..."
          ],
          "examples": [
            "file.exists()"
          ]
        },
        {
          "name": "createDirectory",
          "is_arbitrary": false,
          "desc": [
            "This creates all parent directories of the file if they don't already exist"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the directories were created"
          },
          "throws": [
            "..."
          ],
          "examples": [
            "file.createDirectory()"
          ]
        },
        {
          "name": "getSubFiles",
          "is_arbitrary": false,
          "desc": [
            "This returns a list of all the sub files in the directory"
          ],
          "returns": {
            "type": "List",
            "desc": "a list of all the sub files in the directory"
          },
          "throws": [
            "Could not find any files"
          ],
          "examples": [
            "file.getSubFiles()"
          ]
        },
        {
          "name": "delete",
          "is_arbitrary": false,
          "desc": [
            "This deletes the file"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the file was deleted"
          },
          "throws": [
            "Could not delete file: ..."
          ],
          "examples": [
            "file.delete()"
          ]
        },
        {
          "name": "write",
          "is_arbitrary": false,
          "desc": [
            "This writes a string to a file"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to write to the file"
            }
          ],
          "throws": [
            "There was an error writing the file: ..."
          ],
          "examples": [
            "file.write('Hello World!')"
          ]
        },
        {
          "name": "open",
          "is_arbitrary": false,
          "desc": [
            "This opens the file (as in opens it on your os)"
          ],
          "examples": [
            "file.open()"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "getDirectory",
          "is_arbitrary": false,
          "desc": [
            "This returns the file of the working directory"
          ],
          "returns": {
            "type": "File",
            "desc": "the file of the working directory"
          },
          "examples": [
            "File.getDirectory()"
          ]
        }
      ]
    },
    "Math": {
      "name": "Math",
      "desc": [
        "Provides many basic math functions. This is a utility class, and cannot be constructed."
      ],
      "import_path": null,
      "static_members": [
        {
          "name": "pi",
          "assignable": false,
          "desc": [
            "The value of pi"
          ],
          "type": "Number",
          "examples": [
            "Math.pi;"
          ]
        },
        {
          "name": "e",
          "assignable": false,
          "desc": [
            "The value of e"
          ],
          "type": "Number",
          "examples": [
            "Math.e;"
          ]
        },
        {
          "name": "root2",
          "assignable": false,
          "desc": [
            "The value of root 2"
          ],
          "type": "Number",
          "examples": [
            "Math.root2;"
          ]
        }
      ],
      "constructors": [],
      "methods": [],
      "static_methods": [
        {
          "name": "tan",
          "is_arbitrary": false,
          "desc": [
            "Returns the tangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the tangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the tangent of the number"
          },
          "examples": [
            "Math.tan(Math.pi);"
          ]
        },
        {
          "name": "cosec",
          "is_arbitrary": false,
          "desc": [
            "Returns the cosecant of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the cosecant of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the cosecant of the number"
          },
          "examples": [
            "Math.cosec(Math.pi);"
          ]
        },
        {
          "name": "mod",
          "is_arbitrary": false,
          "desc": [
            "Returns the remainder of a division"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the number to divide"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the divisor"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the remainder of the division"
          },
          "examples": [
            "Math.mod(5, 2);"
          ]
        },
        {
          "name": "max",
          "is_arbitrary": false,
          "desc": [
            "Returns the largest number"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the first number to compare"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the second number to compare"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the largest number"
          },
          "examples": [
            "Math.max(5, 2);"
          ]
        },
        {
          "name": "log",
          "is_arbitrary": false,
          "desc": [
            "Returns the natural logarithm of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the logarithm of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the natural logarithm of the number"
          },
          "examples": [
            "Math.log(Math.e);"
          ]
        },
        {
          "name": "log",
          "is_arbitrary": false,
          "desc": [
            "Returns the logarithm of a number with a specified base"
          ],
          "params": [
            {
              "name": "base",
              "type": "Number",
              "desc": "the base"
            },
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the logarithm of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the logarithm of the number"
          },
          "examples": [
            "Math.log(2, 4);"
          ]
        },
        {
          "name": "log10",
          "is_arbitrary": false,
          "desc": [
            "Returns the base 10 logarithm of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the logarithm of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the base 10 logarithm of the number"
          },
          "examples": [
            "Math.log10(100);"
          ]
        },
        {
          "name": "cos",
          "is_arbitrary": false,
          "desc": [
            "Returns the cosine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the cosine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the cosine of the number"
          },
          "examples": [
            "Math.cos(Math.pi);"
          ]
        },
        {
          "name": "cot",
          "is_arbitrary": false,
          "desc": [
            "Returns the cotangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the cotangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the cotangent of the number"
          },
          "examples": [
            "Math.cot(Math.pi);"
          ]
        },
        {
          "name": "toDegrees",
          "is_arbitrary": false,
          "desc": [
            "Converts a number from radians to degrees"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the number in degrees"
          },
          "examples": [
            "Math.toDegrees(Math.pi);"
          ]
        },
        {
          "name": "ceil",
          "is_arbitrary": false,
          "desc": [
            "Rounds a number up to the nearest integer"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to round"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "Math.ceil(3.5);"
          ]
        },
        {
          "name": "toRadians",
          "is_arbitrary": false,
          "desc": [
            "Converts a number from degrees to radians"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the number in radians"
          },
          "examples": [
            "Math.toRadians(90);"
          ]
        },
        {
          "name": "arccos",
          "is_arbitrary": false,
          "desc": [
            "Returns the arc cosine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the arc cosine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the arc cosine of the number"
          },
          "examples": [
            "Math.arccos(Math.cos(Math.pi));"
          ]
        },
        {
          "name": "sec",
          "is_arbitrary": false,
          "desc": [
            "Returns the secant of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the secant of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the secant of the number"
          },
          "examples": [
            "Math.sec(Math.pi);"
          ]
        },
        {
          "name": "abs",
          "is_arbitrary": false,
          "desc": [
            "Returns the absolute value of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the absolute value of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the absolute value of the number"
          },
          "examples": [
            "Math.abs(-3);"
          ]
        },
        {
          "name": "min",
          "is_arbitrary": false,
          "desc": [
            "Returns the smallest number"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the first number to compare"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the second number to compare"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the smallest number"
          },
          "examples": [
            "Math.min(5, 2);"
          ]
        },
        {
          "name": "round",
          "is_arbitrary": false,
          "desc": [
            "Rounds a number to the nearest integer"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to round"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "Math.round(3.5);"
          ]
        },
        {
          "name": "arctan",
          "is_arbitrary": false,
          "desc": [
            "Returns the arc tangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the arc tangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the arc tangent of the number"
          },
          "examples": [
            "Math.arctan(Math.tan(Math.pi));"
          ]
        },
        {
          "name": "sqrt",
          "is_arbitrary": false,
          "desc": [
            "Returns the square root of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to square root"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the square root of the number"
          },
          "examples": [
            "Math.sqrt(9);"
          ]
        },
        {
          "name": "sin",
          "is_arbitrary": false,
          "desc": [
            "Returns the sine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the sine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the sine of the number"
          },
          "examples": [
            "Math.sin(Math.pi);"
          ]
        },
        {
          "name": "floor",
          "is_arbitrary": false,
          "desc": [
            "Rounds a number down to the nearest integer"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to round"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "Math.floor(3.5);"
          ]
        },
        {
          "name": "arcsin",
          "is_arbitrary": false,
          "desc": [
            "Returns the arc sine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the arc sine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the arc sine of the number"
          },
          "examples": [
            "Math.arcsin(Math.sin(Math.pi));"
          ]
        },
        {
          "name": "clamp",
          "is_arbitrary": false,
          "desc": [
            "Clamps a value between a minimum and maximum"
          ],
          "params": [
            {
              "name": "value",
              "type": "Number",
              "desc": "the value to clamp"
            },
            {
              "name": "min",
              "type": "Number",
              "desc": "the minimum"
            },
            {
              "name": "max",
              "type": "Number",
              "desc": "the maximum"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the clamped value"
          },
          "examples": [
            "Math.clamp(10, 2, 8);"
          ]
        }
      ]
    },
    "Network": {
      "name": "Network",
      "desc": [
        "Allows you to do http requests. This is a utility class and cannot be constructed."
      ],
      "import_path": "util.Network",
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": [
        {
          "name": "downloadFile",
          "is_arbitrary": false,
          "desc": [
            "Downloads a file from an url to a file"
          ],
          "params": [
            {
              "name": "url",
              "type": "String",
              "desc": "the url to download from"
            },
            {
              "name": "file",
              "type": "File",
              "desc": "the file to download to"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the download was successful"
          },
          "examples": [
            "Network.downloadFile('https://arucas.com', new File('dir/downloads'));"
          ]
        },
        {
          "name": "openUrl",
          "is_arbitrary": false,
          "desc": [
            "Opens an url in the default browser"
          ],
          "params": [
            {
              "name": "url",
              "type": "String",
              "desc": "the url to open"
            }
          ],
          "throws": [
            "Failed to open url ..."
          ],
          "examples": [
            "Network.openUrl('https://google.com');"
          ]
        },
        {
          "name": "requestUrl",
          "is_arbitrary": false,
          "desc": [
            "Requests an url and returns the response"
          ],
          "params": [
            {
              "name": "url",
              "type": "String",
              "desc": "the url to request"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the response from the url"
          },
          "throws": [
            "Failed to request data from ..."
          ],
          "examples": [
            "Network.requestUrl('https://google.com');"
          ]
        }
      ]
    },
    "Collector": {
      "name": "Collector",
      "desc": [
        "This class is similar to Java streams, allowing for easy modifications of collections."
      ],
      "import_path": "util.Collection",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "flatten",
          "is_arbitrary": false,
          "desc": [
            "If there are values in the collector that are collections they will be expanded, ",
            "collections inside collections are not flattened, you would have to call this method again"
          ],
          "returns": {
            "type": "Collector",
            "desc": "a new Collector with the expanded values"
          },
          "examples": [
            "Collector.of([1, 2, [3, 4]]).flatten();"
          ]
        },
        {
          "name": "filter",
          "is_arbitrary": false,
          "desc": [
            "This filters the collection using the predicate"
          ],
          "params": [
            {
              "name": "predicate",
              "type": "Function",
              "desc": "a function that takes a value and returns Boolean, true if it should be kept, false if not"
            }
          ],
          "returns": {
            "type": "Collector",
            "desc": "the filtered collection"
          },
          "throws": [
            "Predicate must return Boolean"
          ],
          "examples": [
            "Collector.of([1, 2, 3]).filter(fun(value) {\n    return value < 3;\n});\n"
          ]
        },
        {
          "name": "toSet",
          "is_arbitrary": false,
          "desc": [
            "This puts all the values in the collector into a set and returns it"
          ],
          "returns": {
            "type": "Set",
            "desc": "a set with all the values in the collector"
          },
          "examples": [
            "Collector.of([1, 2, 3]).toSet();"
          ]
        },
        {
          "name": "forEach",
          "is_arbitrary": false,
          "desc": [
            "This iterates over all the values in the Collector and calls the passed in function with each value"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "a function that takes a value and returns nothing"
            }
          ],
          "returns": {
            "type": "Collector",
            "desc": "the Collector"
          },
          "examples": [
            "Collector.of([1, 2, 3]).forEach(fun(value) {\n\tprint(value);\n});\n"
          ]
        },
        {
          "name": "noneMatch",
          "is_arbitrary": false,
          "desc": [
            "This checks if none of the values in the collection match the predicate"
          ],
          "params": [
            {
              "name": "predicate",
              "type": "Function",
              "desc": "a function that takes a value and returns Boolean, true if it matches, false if not"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if none of the values match the predicate, false if not"
          },
          "throws": [
            "Predicate must return Boolean"
          ],
          "examples": [
            "Collector.of([1, 2, 3]).noneMatch(fun(value) {\n    return value < 5;\n});\n"
          ]
        },
        {
          "name": "toList",
          "is_arbitrary": false,
          "desc": [
            "This puts all the values in the collector into a list and returns it"
          ],
          "returns": {
            "type": "List",
            "desc": "a list with all the values in the collector"
          },
          "examples": [
            "Collector.of([1, 2, 3]).toList();"
          ]
        },
        {
          "name": "map",
          "is_arbitrary": false,
          "desc": [
            "This maps the values in Collector to a new value"
          ],
          "params": [
            {
              "name": "mapper",
              "type": "Function",
              "desc": "a function that takes a value and returns a new value"
            }
          ],
          "returns": {
            "type": "Collector",
            "desc": "a new Collector with the mapped values"
          },
          "examples": [
            "Collector.of([1, 2, 3]).map(fun(value) {\n\treturn value * 2;\n});\n"
          ]
        },
        {
          "name": "allMatch",
          "is_arbitrary": false,
          "desc": [
            "This checks if all the values in the collection match the predicate"
          ],
          "params": [
            {
              "name": "predicate",
              "type": "Function",
              "desc": "a function that takes a value and returns Boolean, true if it matches, false if not"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if all the values match the predicate, false if not"
          },
          "throws": [
            "Predicate must return Boolean"
          ],
          "examples": [
            "Collector.of([1, 2, 3]).anyMatch(fun(value) {\n    return value < 5;\n});\n"
          ]
        },
        {
          "name": "anyMatch",
          "is_arbitrary": false,
          "desc": [
            "This checks if any of the values in the collection match the predicate"
          ],
          "params": [
            {
              "name": "predicate",
              "type": "Function",
              "desc": "a function that takes a value and returns Boolean, true if it matches, false if not"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if any of the values match the predicate, false if not"
          },
          "throws": [
            "Predicate must return Boolean"
          ],
          "examples": [
            "Collector.of([1, 2, 3]).anyMatch(fun(value) {\n    return value < 3;\n});\n"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": true,
          "desc": [
            "This creates a collector for a collection"
          ],
          "params": [
            {
              "name": "value...",
              "type": "Value",
              "desc": "the values you want to evaluate"
            }
          ],
          "returns": {
            "type": "Collector",
            "desc": "the collector"
          },
          "examples": [
            "Collector.of(1, 2, '3');"
          ]
        },
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This creates a collector for a collection"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection of values you want to evaluate"
            }
          ],
          "returns": {
            "type": "Collector",
            "desc": "the collector"
          },
          "throws": [
            "... is not a collection"
          ],
          "examples": [
            "Collector.of([1, 2, 3]);"
          ]
        },
        {
          "name": "isCollection",
          "is_arbitrary": false,
          "desc": [
            "This checks if the value is a collection"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "the value you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the value is a collection"
          },
          "examples": [
            "Collector.isCollection([1, 2, 3]);"
          ]
        }
      ]
    },
    "Java": {
      "name": "Java",
      "desc": [
        "This allows for direct interaction from Arucas to Java"
      ],
      "import_path": "util.Internal",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "callMethod",
          "is_arbitrary": true,
          "deprecated": [
            "You should call the method directly on the value: Java.valueOf('').isBlank();"
          ],
          "desc": [
            "This calls the specified method with the specified parameters, this is slower ",
            "than calling a delegate, this is the same speed as calling the method directly on the value however"
          ],
          "params": [
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters...",
              "type": "Value",
              "desc": "the parameters to call the method with, this may be none, a note - if you are calling a VarArgs method you must pass a Java Object array with your VarArg arguments"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the return value of the method call wrapped in the Java wrapper"
          },
          "throws": [
            "No such method ... with ... parameters exists for ...",
            "First parameter must be name of method"
          ],
          "examples": [
            "Java.valueOf('').callMethod('isBlank');"
          ]
        },
        {
          "name": "setField",
          "is_arbitrary": false,
          "deprecated": [
            "You should assign the value directly on the value: Java.constructClass('me.senseiwells.impl.Test').A = 'Hello';"
          ],
          "desc": [
            "This sets the specified field to the specified value"
          ],
          "params": [
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            },
            {
              "name": "value",
              "type": "Value",
              "desc": "the value to set the field to, the value type must match the type of the field"
            }
          ],
          "examples": [
            "Java.constructClass('me.senseiwells.impl.Test').setField('A', 'Hello');"
          ]
        },
        {
          "name": "getField",
          "is_arbitrary": false,
          "deprecated": [
            "You should call the method directly on the value: Java.constructClass('me.senseiwells.impl.Test').A;"
          ],
          "desc": [
            "This returns the Java wrapped value of the specified field"
          ],
          "params": [
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java wrapped value of the field"
          },
          "examples": [
            "Java.constructClass('me.senseiwells.impl.Test').getField('A');"
          ]
        },
        {
          "name": "toArucas",
          "is_arbitrary": false,
          "desc": [
            "This converts the Java value to an Arucas Value"
          ],
          "returns": {
            "type": "Value",
            "desc": "the Value in Arucas, this may still be of Java value if the value cannot be converted into an Arucas value, values like Strings, Numbers, Lists, etc... will be converted"
          },
          "examples": [
            "Java.valueOf([1, 2, 3]).toArucas();"
          ]
        },
        {
          "name": "getMethodDelegate",
          "is_arbitrary": false,
          "desc": [
            "This returns a method delegate for the specified method name and parameters, ",
            "delegating the method is much faster since it uses MethodHandles, so if you are calling ",
            "a method repetitively it is faster to delegate the method and then call the delegate"
          ],
          "params": [
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters",
              "type": "Number",
              "desc": "the number of parameters"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the function containing the Java method delegate"
          },
          "throws": [
            "No such method ... with ... parameters can be found"
          ],
          "examples": [
            "Java.valueOf('string!').getMethodDelegate('isBlank', 0);"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "floatOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value float, to be used in Java, since floats cannot be explicitly declared in Arucas"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java float"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the float in Java wrapper"
          },
          "examples": [
            "Java.floatOf(1.0);"
          ]
        },
        {
          "name": "shortOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value short, to be used in Java since shorts cannot be explicitly declared in Arucas"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java short"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the short in Java wrapper"
          },
          "examples": [
            "Java.shortOf(0xFF);"
          ]
        },
        {
          "name": "classFromName",
          "is_arbitrary": false,
          "desc": [
            "Gets a Java class from the name of the class"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class you want to get"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Class<?> value wrapped in the Java wrapper"
          },
          "throws": [
            "No such class with ..."
          ],
          "examples": [
            "Java.classFromName('java.util.ArrayList');"
          ]
        },
        {
          "name": "longArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java long array with a given size, the array is filled with 0's ",
            "by default and can be filled with only longs"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java long array"
          },
          "examples": [
            "Java.longArray(10);"
          ]
        },
        {
          "name": "supplierOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Supplier object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have no parameters and must return (supply) a value"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Supplier object"
          },
          "examples": [
            "Java.supplierOf(fun() {\n    return \"supplier\";\n});\n"
          ]
        },
        {
          "name": "functionOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Function object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have one parameter and must return a value"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Function object"
          },
          "examples": [
            "Java.functionOf(fun(num) {\n    return num + 10;\n});\n"
          ]
        },
        {
          "name": "doubleOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value double, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java double"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the double in Java wrapper"
          },
          "examples": [
            "Java.doubleOf(1.0);"
          ]
        },
        {
          "name": "getStaticField",
          "is_arbitrary": false,
          "desc": [
            "Gets a static field Java value from a Java class"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java value of the field wrapped in the Java wrapper"
          },
          "throws": [
            "No such class with ..."
          ],
          "examples": [
            "Java.getStaticField('java.lang.Integer', 'MAX_VALUE');"
          ]
        },
        {
          "name": "constructClass",
          "is_arbitrary": true,
          "desc": [
            "This constructs a Java class with specified class name and parameters"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "parameters...",
              "type": "Value",
              "desc": "any parameters to pass to the constructor, there may be no parameters, again if calling VarArgs constructor you must have your VarArg parameters in a Java Object array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the constructed Java Object wrapped in the Java wrapper"
          },
          "throws": [
            "First parameter must be a class name",
            "No such class with ...",
            "No such constructor with ... parameters exists for ..."
          ],
          "examples": [
            "Java.constructClass('java.util.ArrayList');"
          ]
        },
        {
          "name": "shortArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java short array with a given size, the array is filled with 0's ",
            "by default and can be filled with only shorts"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java short array"
          },
          "examples": [
            "Java.shortArray(10);"
          ]
        },
        {
          "name": "runnableOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Runnable object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have no parameters and any return values will be ignored"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Runnable object"
          },
          "examples": [
            "Java.runnableOf(fun() {\n    print('runnable');\n});\n"
          ]
        },
        {
          "name": "charOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value char, to be used in Java since chars cannot be explicitly declared in Arucas"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string with one character to convert to a Java char"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the char in Java wrapper"
          },
          "throws": [
            "String must be 1 character long"
          ],
          "examples": [
            "Java.charOf('f');"
          ]
        },
        {
          "name": "charArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java char array with a given size, the array is filled with \u0000's ",
            "(null characters) by default and can be filled with only chars"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java char array"
          },
          "examples": [
            "Java.charArray(10);"
          ]
        },
        {
          "name": "intOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value int, to be used in Java since ints cannot be explicitly declared in Arucas"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java int"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the int in Java wrapper"
          },
          "examples": [
            "Java.intOf(0xFF);"
          ]
        },
        {
          "name": "floatArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java float array with a given size, the array is filled with 0's ",
            "by default and can be filled with only floats"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java float array"
          },
          "examples": [
            "Java.floatArray(10);"
          ]
        },
        {
          "name": "booleanArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java boolean array with a given size, the array is filled with false ",
            "by default and can be filled with only booleans"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java boolean array"
          },
          "examples": [
            "Java.booleanArray(10);"
          ]
        },
        {
          "name": "doubleArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java double array with a given size, the array is filled with 0's ",
            "by default and can be filled with only doubles"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java double array"
          },
          "examples": [
            "Java.doubleArray(10);"
          ]
        },
        {
          "name": "byteOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value byte, to be used in Java since bytes cannot be explicitly declared in Arucas"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java byte"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the byte in Java wrapper"
          },
          "examples": [
            "Java.byteOf(0xFF);"
          ]
        },
        {
          "name": "valueOf",
          "is_arbitrary": false,
          "desc": [
            "Converts any Arucas value into a Java value then wraps it in the Java wrapper and returns it"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "any value to get the Java value of"
            }
          ],
          "examples": [
            "Java.valueOf('Hello World!');"
          ]
        },
        {
          "name": "byteArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java byte array with a given size, the array is filled with 0's ",
            "by default and can be filled with only bytes"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java byte array"
          },
          "examples": [
            "Java.byteArray(10);"
          ]
        },
        {
          "name": "longOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value long, to be used in Java since longs cannot be explicitly declared in Arucas"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java long"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the long in Java wrapper"
          },
          "examples": [
            "Java.longOf(1000000000.0);"
          ]
        },
        {
          "name": "arrayOf",
          "is_arbitrary": true,
          "desc": [
            "Creates a Java Object array with a given values, this will be the size of the array, ",
            "again this cannot be used to create primitive arrays"
          ],
          "params": [
            {
              "name": "values...",
              "type": "Value",
              "desc": "the values to add to the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Object array"
          },
          "examples": [
            "Java.arrayOf(1, 2, 3, 'string!', false);"
          ]
        },
        {
          "name": "arrayWithSize",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Object array with a given size, the array is filled with null values ",
            "by default and can be filled with any Java values, this array cannot be expanded"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Object array"
          },
          "examples": [
            "Java.arrayWithSize(10);"
          ]
        },
        {
          "name": "booleanOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value boolean, to be used in Java"
          ],
          "params": [
            {
              "name": "bool",
              "type": "Boolean",
              "desc": "the boolean to convert to a Java boolean"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the boolean in Java wrapper"
          },
          "examples": [
            "Java.booleanOf(true);"
          ]
        },
        {
          "name": "intArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java int array with a given size, the array is filled with 0's ",
            "by default and can be filled with only ints"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java int array"
          },
          "examples": [
            "Java.intArray(10);"
          ]
        },
        {
          "name": "callStaticMethod",
          "is_arbitrary": true,
          "desc": [
            "Calls a static method of a Java class, this is slower than delegating a method, but better for a one off call"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters...",
              "type": "Value",
              "desc": "any parameters to call the method with, this can be none, a note - if you are calling a VarArg method then you must have your VarArg parameters in a Java Object array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the return value of the method wrapped in the Java wrapper"
          },
          "throws": [
            "First parameter must be a class name and the second parameter must be a method name",
            "No such class with ...",
            "No such method ... with ... parameters exists for ..."
          ],
          "examples": [
            "Java.callStaticMethod('java.lang.Integer', 'parseInt', '123');"
          ]
        },
        {
          "name": "setStaticField",
          "is_arbitrary": false,
          "desc": [
            "Sets a static field in a Java class with a new value, the type of the new value needs to match the type of the field, ",
            "you can pass in Java wrapped values to guarantee type matching, they will be unwrapped, regular values will be converted"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            },
            {
              "name": "newValue",
              "type": "Value",
              "desc": "the new value"
            }
          ],
          "throws": [
            "No such class with ..."
          ],
          "examples": [
            "// Obviously this won't work, but it's just an example\nJava.setStaticField('java.lang.Integer', 'MAX_VALUE', Java.intOf(100));\"\n"
          ]
        },
        {
          "name": "getStaticMethodDelegate",
          "is_arbitrary": false,
          "desc": [
            "Gets a static method delegate from a Java class, delegating the method is much faster than directly calling it since it uses MethodHandles, ",
            "if you are repetitively calling a static method you should delegate it and call that delegate"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters",
              "type": "Number",
              "desc": "the number of parameters"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the delegated Java method in an Arucas Function"
          },
          "throws": [
            "No such class with ...",
            "No such method ... with ... parameters can be found"
          ],
          "examples": [
            "Java.getStaticMethodDelegate('java.lang.Integer', 'parseInt', 1);"
          ]
        },
        {
          "name": "consumerOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Consumer object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have one parameter and any return values will be ignored, the parameter type is unknown at compile time"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Consumer object"
          },
          "examples": [
            "Java.consumerOf(fun(something) {\n    print(something);\n});\n"
          ]
        }
      ]
    },
    "MinecraftClient": {
      "name": "MinecraftClient",
      "desc": [
        "This allows for many core interactions with the MinecraftClient"
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getCursorStack",
          "is_arbitrary": false,
          "desc": [
            "This returns the item stack that is currently being held by the cursor"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item stack, will be Air if there is nothing"
          },
          "examples": [
            "client.getCursorStack();"
          ]
        },
        {
          "name": "getWorld",
          "is_arbitrary": false,
          "desc": [
            "This returns the world that is currently being played on"
          ],
          "returns": {
            "type": "World",
            "desc": "the world"
          },
          "examples": [
            "client.getWorld();"
          ]
        },
        {
          "name": "getPlayer",
          "is_arbitrary": false,
          "desc": [
            "This returns the current player on the client"
          ],
          "returns": {
            "type": "Player",
            "desc": "the main player"
          },
          "examples": [
            "client.getPlayer();"
          ]
        },
        {
          "name": "getEssentialClientValue",
          "is_arbitrary": false,
          "desc": [
            "This gets the value of the given client rule"
          ],
          "params": [
            {
              "name": "ruleName",
              "type": "String",
              "desc": "the client rule"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the value of the client rule"
          },
          "throws": [
            "Invalid ClientRule name"
          ],
          "examples": [
            "client.getEssentialClientValue('overrideCreativeWalkSpeed');"
          ]
        },
        {
          "name": "createFakeScreen",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'new FakeScreen(string, rows)' instead"
          ],
          "desc": [
            "This creates a fake screen with the given name and number of rows of slots available (1 - 6)"
          ],
          "params": [
            {
              "name": "screenName",
              "type": "String",
              "desc": "the name of the screen"
            },
            {
              "name": "rows",
              "type": "Number",
              "desc": "number of rows"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the fake screen"
          },
          "examples": [
            "client.createFakeScreen('Name', 3);"
          ]
        },
        {
          "name": "entityFromString",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Entity.of(string)' instead"
          ],
          "desc": [
            "This creates an entity from the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to parse"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the entity"
          },
          "examples": [
            "client.entityFromString('pig');"
          ]
        },
        {
          "name": "runOnMainThread",
          "is_arbitrary": false,
          "desc": [
            "This runs the given function on the main thread"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to run"
            }
          ],
          "examples": [
            "client.runOnMainThread(fun() { print('Do something'); });"
          ]
        },
        {
          "name": "syncToTick",
          "is_arbitrary": false,
          "desc": [
            "Synchronizes the current thread in Arucas to the next game tick"
          ],
          "throws": [
            "Tried to sync non Arucas Thread"
          ],
          "examples": [
            "client.syncToTick();"
          ]
        },
        {
          "name": "uuidFromPlayerName",
          "is_arbitrary": false,
          "desc": [
            "This will return the uuid from the given player name"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the player name"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the uuid, null if the player name is not found"
          },
          "examples": [
            "client.uuidFromPlayerName('senseiwells');"
          ]
        },
        {
          "name": "addCommand",
          "is_arbitrary": false,
          "desc": [
            "This allows you to register your own client side command in game"
          ],
          "params": [
            {
              "name": "command",
              "type": "Map",
              "desc": "a command map or a command builder"
            }
          ],
          "examples": [
            "client.addCommand({\n    \"name\": \"example\",\n    \"subcommands\": { },\n    \"arguments\": { }\n});\n"
          ]
        },
        {
          "name": "releaseKey",
          "is_arbitrary": false,
          "desc": [
            "This allows you to simulate a key release inside of Minecraft, this",
            "is useful for keys that only work on release, for example `F3`"
          ],
          "params": [
            {
              "name": "key",
              "type": "String",
              "desc": "the key to release"
            }
          ],
          "throws": [
            "Tried to press unknown key"
          ],
          "examples": [
            "client.releaseKey('f');"
          ]
        },
        {
          "name": "screenshot",
          "is_arbitrary": false,
          "desc": [
            "This makes the client take a screenshot"
          ],
          "examples": [
            "client.screenshot();"
          ]
        },
        {
          "name": "screenshot",
          "is_arbitrary": false,
          "desc": [
            "This makes the client take a screenshot and saves it with a given name"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name of the file"
            }
          ],
          "examples": [
            "client.screenshot('screenshot.png');"
          ]
        },
        {
          "name": "removeAllGameEvents",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'GameEvent.unregisterAll()' instead"
          ],
          "desc": [
            "This unregisters all game events"
          ],
          "examples": [
            "client.removeAllGameEvents();"
          ]
        },
        {
          "name": "getServerName",
          "is_arbitrary": false,
          "desc": [
            "This gets the current connected server's name that you have set it to in the multiplayer screen"
          ],
          "returns": {
            "type": "String",
            "desc": "the server name"
          },
          "examples": [
            "client.getServerName();"
          ]
        },
        {
          "name": "getServerIp",
          "is_arbitrary": false,
          "desc": [
            "This will return the server ip"
          ],
          "returns": {
            "type": "String",
            "desc": "The server ip, null if in single player"
          },
          "examples": [
            "client.getServerIp();"
          ]
        },
        {
          "name": "getClientRenderDistance",
          "is_arbitrary": false,
          "desc": [
            "This returns the current render distance set on the client"
          ],
          "returns": {
            "type": "Number",
            "desc": "the render distance"
          },
          "examples": [
            "client.getClientRenderDistance();"
          ]
        },
        {
          "name": "setCursorStack",
          "is_arbitrary": false,
          "desc": [
            "This sets the item stack that is currently being held by the cursor, this does not work",
            "in normal screens only in FakeScreens, this does not actually pick up an item just display like you have"
          ],
          "params": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "desc": "the item stack to set"
            }
          ],
          "examples": [
            "client.setCursorStack(Material.DIAMOND.asItemStack());"
          ]
        },
        {
          "name": "blockFromString",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Block.of(string)' instead"
          ],
          "desc": [
            "This creates a block from the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to parse"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the block"
          },
          "examples": [
            "client.blockFromString('dirt');"
          ]
        },
        {
          "name": "playSound",
          "is_arbitrary": false,
          "desc": [
            "This plays the given sound with the given volume and pitch around the player",
            "sound id's can be found [here](https://minecraft.fandom.com/wiki/Sounds.json#Sound_events)"
          ],
          "params": [
            {
              "name": "soundId",
              "type": "String",
              "desc": "the sound id you want to play"
            },
            {
              "name": "volume",
              "type": "Number",
              "desc": "the volume of the sound"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "the pitch of the sound"
            }
          ],
          "examples": [
            "client.playSound('entity.lightning_bolt.thunder', 1, 1);"
          ]
        },
        {
          "name": "sendScriptPacket",
          "is_arbitrary": true,
          "desc": [
            "This sends a script packet to the server",
            "You can send the follow types of values:",
            "Boolean, Number, String, List (of numbers), Text, ItemStack, Pos, and NbtMaps",
            "You can send byte, int, and long arrays by using the strings 'b', 'i', and 'l' at the start of the list"
          ],
          "params": [
            {
              "name": "values...",
              "type": "Value",
              "desc": "the data you want to send to the server"
            }
          ],
          "examples": [
            "client.sendScriptPacket('test', false, ['l', 9999, 0, 45]);"
          ]
        },
        {
          "name": "stripFormatting",
          "is_arbitrary": false,
          "desc": [
            "This strips the formatting from the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to strip"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the stripped string"
          },
          "examples": [
            "client.stripFormatting('§cHello§r');"
          ]
        },
        {
          "name": "getVersion",
          "is_arbitrary": false,
          "desc": [
            "This returns the current version of Minecraft you are playing"
          ],
          "returns": {
            "type": "String",
            "desc": "the version for example: '1.17.1'"
          },
          "examples": [
            "client.getVersion();"
          ]
        },
        {
          "name": "textFromString",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Text.of(string)' instead"
          ],
          "desc": [
            "This creates a text from the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to parse"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the text"
          },
          "examples": [
            "client.textFromString('Any Text!');"
          ]
        },
        {
          "name": "getScriptsPath",
          "is_arbitrary": false,
          "desc": [
            "This gets the script directory path, this is where all scripts are stored"
          ],
          "returns": {
            "type": "String",
            "desc": "the script directory path"
          },
          "examples": [
            "client.getScriptPath();"
          ]
        },
        {
          "name": "canSendScriptPacket",
          "is_arbitrary": false,
          "desc": [
            "Returns whether the server supports client script packets"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "Whether the client can send packets to the server"
          },
          "examples": [
            "client.canSendScriptPacket()"
          ]
        },
        {
          "name": "getLatestChatMessage",
          "is_arbitrary": false,
          "desc": [
            "This will return the latest chat message"
          ],
          "returns": {
            "type": "Text",
            "desc": "the latest chat message, null if there is none"
          },
          "examples": [
            "client.getLatestChatMessage();"
          ]
        },
        {
          "name": "renderFloatingItem",
          "is_arbitrary": false,
          "desc": [
            "This renders an item in front of the player using the totem of undying animation"
          ],
          "params": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "desc": "the item stack to render"
            }
          ],
          "examples": [
            "client.renderFloatingItem(Material.DIAMOND.asItemStack());"
          ]
        },
        {
          "name": "getModList",
          "is_arbitrary": false,
          "desc": [
            "This gets a list of all the mod ids of the mods installed"
          ],
          "returns": {
            "type": "List",
            "desc": "the mod ids"
          },
          "examples": [
            "client.getModList();"
          ]
        },
        {
          "name": "tick",
          "is_arbitrary": false,
          "desc": [
            "This ticks the client"
          ],
          "examples": [
            "client.tick();"
          ]
        },
        {
          "name": "getPing",
          "is_arbitrary": false,
          "desc": [
            "This gets the current connected server's ping"
          ],
          "returns": {
            "type": "Number",
            "desc": "the server ping in milliseconds"
          },
          "throws": [
            "Failed to get server ping"
          ],
          "examples": [
            "client.getPing();"
          ]
        },
        {
          "name": "resetEssentialClientRule",
          "is_arbitrary": false,
          "desc": [
            "This resets the given client rule to its default value"
          ],
          "params": [
            {
              "name": "ruleName",
              "type": "String",
              "desc": "the client rule"
            }
          ],
          "throws": [
            "Invalid ClientRule name"
          ],
          "examples": [
            "client.resetEssentialClientRule('highlightLavaSources');"
          ]
        },
        {
          "name": "getRunDirectory",
          "is_arbitrary": false,
          "desc": [
            "Returns the directory where the client is running"
          ],
          "returns": {
            "type": "File",
            "desc": "the Minecraft run directory"
          },
          "examples": [
            "client.getRunDirectory();"
          ]
        },
        {
          "name": "itemFromString",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'ItemStack.of(string)' instead"
          ],
          "desc": [
            "This creates an item stack from the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to parse"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the item stack"
          },
          "examples": [
            "client.itemFromString('dirt');"
          ]
        },
        {
          "name": "parseStringToNbt",
          "is_arbitrary": false,
          "desc": [
            "This parses a string and turns it into a Nbt compound"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to parse"
            }
          ],
          "returns": {
            "type": "Value",
            "desc": "the Nbt compound"
          },
          "examples": [
            "client.parseStringToNbt('{\"test\":\"test\"}');"
          ]
        },
        {
          "name": "pressKey",
          "is_arbitrary": false,
          "desc": [
            "This allows you to simulate a key press inside of Minecraft, this will only press the key down"
          ],
          "params": [
            {
              "name": "key",
              "type": "String",
              "desc": "the key to press"
            }
          ],
          "throws": [
            "Tried to press key outside of Minecraft"
          ],
          "examples": [
            "client.pressKey('f');"
          ]
        },
        {
          "name": "clearChat",
          "is_arbitrary": false,
          "desc": [
            "This will clear the chat hud"
          ],
          "examples": [
            "client.clearChat();"
          ]
        },
        {
          "name": "holdKey",
          "is_arbitrary": false,
          "desc": [
            "This allows you to simulate a key being held inside of Minecraft, this will press, hold, and release"
          ],
          "params": [
            {
              "name": "key",
              "type": "String",
              "desc": "the key to hold"
            },
            {
              "name": "milliseconds",
              "type": "Number",
              "desc": "the number of milliseconds you want it held for"
            }
          ],
          "throws": [
            "Tried to press unknown key"
          ],
          "examples": [
            "client.holdKey('f', 100);"
          ]
        },
        {
          "name": "setEssentialClientRule",
          "is_arbitrary": false,
          "desc": [
            "This sets the given client rule to the given value"
          ],
          "params": [
            {
              "name": "ruleName",
              "type": "String",
              "desc": "the client rule"
            },
            {
              "name": "value",
              "type": "Value",
              "desc": "the new value for the rule"
            }
          ],
          "throws": [
            "Invalid ClientRule name",
            "Cannot set that value"
          ],
          "examples": [
            "client.setEssentialClientRule('highlightLavaSources', false);"
          ]
        },
        {
          "name": "setClientRenderDistance",
          "is_arbitrary": false,
          "desc": [
            "This sets the render distance on the client"
          ],
          "params": [
            {
              "name": "number",
              "type": "Number",
              "desc": "the render distance"
            }
          ],
          "examples": [
            "client.setClientRenderDistance(10);"
          ]
        },
        {
          "name": "playerNameFromUuid",
          "is_arbitrary": false,
          "desc": [
            "This will return the player name from the given uuid"
          ],
          "params": [
            {
              "name": "uuid",
              "type": "String",
              "desc": "the uuid as a string"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the player name, null if the uuid is not found"
          },
          "examples": [
            "client.playerNameFromUuid('d4fca8c4-e083-4300-9a73-bf438847861c');"
          ]
        },
        {
          "name": "getFps",
          "is_arbitrary": false,
          "desc": [
            "This gets the current fps"
          ],
          "returns": {
            "type": "Number",
            "desc": "the fps"
          },
          "examples": [
            "client.getFps();"
          ]
        },
        {
          "name": "isInSinglePlayer",
          "is_arbitrary": false,
          "desc": [
            "This will return true if the client is in single player mode"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the client is in single player mode"
          },
          "examples": [
            "client.isInSinglePlayer();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "Returns the MinecraftClient instance"
          ],
          "returns": {
            "type": "MinecraftClient",
            "desc": "the MinecraftClient instance"
          },
          "examples": [
            "MinecraftClient.get();"
          ]
        },
        {
          "name": "getClient",
          "is_arbitrary": false,
          "desc": [
            "Returns the MinecraftClient instance"
          ],
          "returns": {
            "type": "MinecraftClient",
            "desc": "the MinecraftClient instance"
          },
          "examples": [
            "MinecraftClient.getClient();"
          ]
        }
      ]
    },
    "CommandBuilder": {
      "name": "CommandBuilder",
      "desc": [
        "This class allows you to build commands for Minecraft."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "executes",
          "is_arbitrary": false,
          "desc": [
            "This sets the function to be executed when the command is executed",
            "this should have the correct amount of parameters for the command"
          ],
          "params": [
            {
              "name": "function",
              "type": "CommandBuilder",
              "desc": "the function to execute"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the parent command builder"
          },
          "examples": [
            "commandBuilder.executes(fun() { });"
          ]
        },
        {
          "name": "then",
          "is_arbitrary": false,
          "desc": [
            "This adds a child CommandBuilder to your command builder"
          ],
          "params": [
            {
              "name": "childBuilder",
              "type": "CommandBuilder",
              "desc": "the child command builder to add"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the parent command builder"
          },
          "examples": [
            "commandBuilder.then(CommandBuilder.literal('subcommand'));"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "fromMap",
          "is_arbitrary": false,
          "desc": [
            "Creates an argument builder from a map",
            "The map must contain a 'name' key as a String that is the name of the command,",
            "the map then can contain 'subcommands' as a map which contains the subcommands,",
            "the key of the subcommands is the name of the subcommand, and the value is a map,",
            "if the name is encased in '<' and '>' it will be treated as an argument, otherwise it will be treated as a literal.",
            "You can chain arguments by leaving a space in the name like: 'literal <arg>'.",
            "If the key has no name and is just an empty string the value will be used as the function",
            "which will be executed when the command is executed, the function should have the appropriate",
            "number of parameters, the number of parameters is determined by the number of arguments.",
            "Argument types are defined in the main map under the key 'arguments' with the value of a map",
            "the keys of this map should be the names of your arguments used in your subcommands,",
            "this should be a map and must have the key 'type' which should be a string that is the type of the argument.",
            "Optionally if the type is of 'integer' or 'double' you can also have the key 'min' and 'max' with numbers as the value,",
            "and if the type is of 'enum' you must have the key 'enum' with the enum class type as the value: 'enum': MyEnum.type.",
            "You can also optionally have 'suggests' which has the value of a list of strings that are suggestions for the argument.",
            "You can also optionally have 'suggester' which has the value of a function that will be called to get suggestions for the argument,",
            "this function should have arbitrary number of parameters which will be the arguments that the user has entered so far.",
            "The possible argument types are: 'PlayerName', 'Word', 'GreedyString', 'Double', 'Integer', 'Boolean', 'Enum',",
            "'ItemStack', 'Particle', 'RecipeId', 'EntityId', 'EnchantmentId'"
          ],
          "params": [
            {
              "name": "argumentMap",
              "type": "Map",
              "desc": "the map of arguments"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the argument builder"
          },
          "examples": [
            "effectCommandMap = {\n   \"name\" : \"effect\",\n   \"subcommands\" : {\n\t   \"give\" : {\n\t\t   \"<targets> <effect>\" : {\n\t\t\t   \"\" : fun(target, effect) {\n\t\t\t\t   // do something\n\t\t\t   },\n\t\t\t   \"<seconds>\" : {\n\t\t\t\t   \"\" : fun(target, effect, second) {\n\t\t\t\t\t   // do something\n\t\t\t\t   },\n\t\t\t\t   \"<amplifier>\" : {\n\t\t\t\t\t   \"\" : fun(target, effect, second, amplifier) {\n\t\t\t\t\t\t   // do something\n\t\t\t\t\t   },\n\t\t\t\t\t   \"<hideParticle>\" : {\n\t\t\t\t\t\t   \"\" : fun(target, effect, second, amplifier, hideParticle) {\n\t\t\t\t\t\t\t   // do something\n\t\t\t\t\t\t   }\n\t\t\t\t\t   }\n\t\t\t\t   }\n\t\t\t   }\n\t\t   }\n\t   },\n\t   \"clear\" : {\n\t\t   \"\" : fun() {\n\t\t\t   // do something\n\t\t   },\n\t\t   \"<targets>\" : {\n\t\t\t   \"\" : fun(target) {\n\t\t\t\t   // do something\n\t\t\t   },\n\t\t\t   \"<effect>\" : {\n\t\t\t\t   \"\" : fun(target, effect) {\n\t\t\t\t\t   // do something\n\t\t\t\t   }\n\t\t\t   }\n\t\t   }\n\t   }\n   },\n   \"arguments\" : {\n\t   \"targets\" : { \"type\" : \"Entity\" },\n\t   \"effect\" : { \"type\" : \"Effect\", \"suggests\" : [\"effect1\", \"effect2\"] },\n\t   \"seconds\" : { \"type\" : \"Integer\", \"min\" : 0, \"max\" : 1000000 },\n\t   \"amplifier\" : { \"type\" : \"Integer\", \"min\" : 0, \"max\" : 255 },\n\t   \"hideParticle\" : { \"type\" : \"Boolean\" }\n   }\n};\neffectCommand = CommandBuilder.fromMap(effectCommandMap);\n"
          ]
        },
        {
          "name": "argument",
          "is_arbitrary": false,
          "desc": [
            "Creates an argument builder with a specific argument type, and a name",
            "to see all the different types refer to CommandBuilder.fromMap(...)"
          ],
          "params": [
            {
              "name": "argumentName",
              "type": "String",
              "desc": "the name of the argument"
            },
            {
              "name": "argumentType",
              "type": "String",
              "desc": "the type of the argument"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the argument builder"
          },
          "examples": [
            "CommandBuilder.argument('test', 'entityid');"
          ]
        },
        {
          "name": "argument",
          "is_arbitrary": false,
          "desc": [
            "Creates an argument builder with a specific argument type, a name, and a default value",
            "to see all the different types refer to CommandBuilder.fromMap(...)"
          ],
          "params": [
            {
              "name": "argumentName",
              "type": "String",
              "desc": "the name of the argument"
            },
            {
              "name": "argumentType",
              "type": "String",
              "desc": "the type of the argument"
            },
            {
              "name": "suggestions",
              "type": "List",
              "desc": "a list of strings for the suggestions for the argument"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the argument builder"
          },
          "examples": [
            "CommandBuilder.argument('test', 'word', ['wow', 'suggestion']);"
          ]
        },
        {
          "name": "literal",
          "is_arbitrary": false,
          "desc": [
            "Creates a literal argument with just a string"
          ],
          "params": [
            {
              "name": "argument",
              "type": "String",
              "desc": "the literal argument"
            }
          ],
          "returns": {
            "type": "CommandBuilder",
            "desc": "the argument builder"
          },
          "examples": [
            "CommandBuilder.literal('test');"
          ]
        }
      ]
    },
    "Player": {
      "name": "Player",
      "desc": [
        "This class is used to interact with the main player, this extends OtherPlayer",
        "and so inherits all methods from that class."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "openScreen",
          "is_arbitrary": false,
          "desc": [
            "This opens a screen for the player, this cannot open server side screens"
          ],
          "params": [
            {
              "name": "screen",
              "type": "Screen",
              "desc": "the screen to open"
            }
          ],
          "throws": [
            "Opening handled screens is unsafe"
          ],
          "examples": [
            "player.openScreen(new FakeScreen('MyScreen', 4));"
          ]
        },
        {
          "name": "getSwappableHotbarSlot",
          "is_arbitrary": false,
          "desc": [
            "This will get the next empty slot in the hotbar starting from the current slot",
            "going right, and if it reaches the end of the hotbar it will start from the beginning.",
            "If there is no empty slot it will return any slot that doesn't have an item with",
            "an enchantment that is in the hotbar, again going from the current slot",
            "if there is no such slot it will return the current selected slot"
          ],
          "returns": {
            "type": "Number",
            "desc": "the slot that is swappable"
          },
          "examples": [
            "player.getSwappableHotbarSlot();"
          ]
        },
        {
          "name": "anvilRename",
          "is_arbitrary": false,
          "desc": [
            "This allows you to name an item in an anvil"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name you want to give the item"
            },
            {
              "name": "predicate",
              "type": "Function",
              "desc": "whether the ItemStack meets a certain criteria"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the anvilling was successful, if the player doesn't have enough levels it will return the xp cost"
          },
          "throws": [
            "Not in anvil gui",
            "Invalid function parameter"
          ],
          "examples": [
            "// Rename any shulker box\nplayer.anvilRename(\"Rocket Box\",\n\tfun(item) {\n\t\tisShulker = item.getItemId().containsString(\"shulker_box\"));\n\t\treturn isShulker;\n\t}\n);\n"
          ]
        },
        {
          "name": "anvil",
          "is_arbitrary": false,
          "desc": [
            "This allows you to combine two items in an anvil"
          ],
          "params": [
            {
              "name": "predicate1",
              "type": "Function",
              "desc": "a function determining whether the first ItemStack meets a criteria"
            },
            {
              "name": "predicate2",
              "type": "Function",
              "desc": "a function determining whether the second ItemStack meets a criteria"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the anvilling was successful, if the player doesn't have enough levels it will return the xp cost"
          },
          "throws": [
            "Not in anvil gui",
            "Invalid function parameter"
          ],
          "examples": [
            "// Enchant a pickaxe with mending\nplayer.anvil(\n\t// Predicate for pick\n\tfun(item) {\n\t\t// We want a netherite pickaxe without mending\n\t\tif (item.getItemId() == \"netherite_pickaxe\") {\n\t\t\thasMending = item.getEnchantments().getKeys().contains(\"mending\");\n\t\t\treturn !hasMending;\n\t\t}\n\t\treturn false;\n\t},\n\t// Predicate for book\n\tfun(item) {\n\t\t// We want a book with mending\n\t\tif (item.getItemId() == \"enchanted_book\") {\n\t\t\thasMending = item.getEnchantments().getKeys().contains(\"mending\");\n\t\t\treturn hasMending;\n\t\t}\n\t\treturn false;\n\t}\n);\n"
          ]
        },
        {
          "name": "use",
          "is_arbitrary": false,
          "desc": [
            "This allows you to make your player use"
          ],
          "params": [
            {
              "name": "action",
              "type": "String",
              "desc": "the type of action, either 'hold', 'stop', or 'once'"
            }
          ],
          "throws": [
            "Must pass 'hold', 'stop', or 'once' into use()"
          ],
          "examples": [
            "player.use('hold');"
          ]
        },
        {
          "name": "craftRecipe",
          "is_arbitrary": false,
          "desc": [
            "This allows you to craft a predefined recipe"
          ],
          "params": [
            {
              "name": "recipe",
              "type": "Recipe",
              "desc": "the recipe you want to craft"
            }
          ],
          "throws": [
            "Must be in a crafting GUI"
          ],
          "examples": [
            "player.craftRecipe(Recipe.CHEST);"
          ]
        },
        {
          "name": "craft",
          "is_arbitrary": false,
          "desc": [
            "This allows you to craft a recipe, this can be 2x2 or 3x3",
            "The list you pass in must contain Materials or ItemStacks",
            "Most of the time you should use craftRecipe instead"
          ],
          "params": [
            {
              "name": "recipe",
              "type": "List",
              "desc": "a list of materials making up the recipe you want to craft including air"
            }
          ],
          "throws": [
            "Must be in a crafting GUI",
            "You must be in a crafting table to craft a 3x3",
            "Recipe must either be 3x3 or 2x2",
            "The recipe must only include items or materials"
          ],
          "examples": [
            "chestRecipe = [\n    Material.OAK_PLANKS, Material.OAK_PLANKS, Material.OAK_PLANKS,\n    Material.OAK_PLANKS,    Material.AIR    , Material.OAK_PLANKS,\n    Material.OAK_PLANKS, Material.OAK_PLANKS, Material.OAK_PLANKS\n];\nplayer.craft(chestRecipe);\n"
          ]
        },
        {
          "name": "interactWithEntity",
          "is_arbitrary": false,
          "desc": [
            "This allows your player to interact with an entity without",
            "having to be looking at it or clicking on the entity"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to interact with"
            }
          ],
          "examples": [
            "allEntities = client.getWorld().getAllEntities();\nforeach (entity : allEntities) {\n\tif (entity.getId() == \"villager\" && player.getSquaredDistanceTo(entity) < 5) {\n\t\tplayer.interactWithEntity(entity);\n\t\tbreak;\n\t}\n}\n"
          ]
        },
        {
          "name": "messageActionBar",
          "is_arbitrary": false,
          "desc": [
            "This allows you to set the current memssage displaying on the action bar"
          ],
          "params": [
            {
              "name": "message",
              "type": "Text",
              "desc": "the message to send, can also be string"
            }
          ],
          "examples": [
            "player.messageActionBar('Hello World!');"
          ]
        },
        {
          "name": "getLookingAtEntity",
          "is_arbitrary": false,
          "desc": [
            "This gets the entity that the player is currently looking at"
          ],
          "returns": {
            "type": "Entity",
            "desc": "the entity that the player is looking at"
          },
          "examples": [
            "player.getLookingAtEntity();"
          ]
        },
        {
          "name": "attackBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to attack a block at a position and direction"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the attack, e.g. 'up', 'north', 'east', etc."
            }
          ],
          "examples": [
            "player.attackBlock(new Pos(0, 0, 0), 'up');"
          ]
        },
        {
          "name": "attackBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to attack a block at a position and direction"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the attack, e.g. 'up', 'north', 'east', etc."
            }
          ],
          "examples": [
            "player.attackBlock(0, 0, 0, 'up');"
          ]
        },
        {
          "name": "logout",
          "is_arbitrary": false,
          "desc": [
            "This forces the player to leave the world"
          ],
          "params": [
            {
              "name": "message",
              "type": "String",
              "desc": "the message to display to the player on the logout screen"
            }
          ],
          "examples": [
            "player.logout('You've been lazy!');"
          ]
        },
        {
          "name": "dropItemInHand",
          "is_arbitrary": false,
          "desc": [
            "This drops the item(s) in the player's main hand"
          ],
          "params": [
            {
              "name": "dropAll",
              "type": "Boolean",
              "desc": "if true, all items in the player's main hand will be dropped"
            }
          ],
          "examples": [
            "player.dropItemInHand(true);"
          ]
        },
        {
          "name": "setSelectedSlot",
          "is_arbitrary": false,
          "desc": [
            "This allows you to set the slot number your player is holding"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot number, must be between 0 - 8"
            }
          ],
          "throws": [
            "Number must be between 0 - 8"
          ],
          "examples": [
            "player.setSelectedSlot(0);"
          ]
        },
        {
          "name": "getPriceForIndex"
        },
        {
          "name": "attack",
          "is_arbitrary": false,
          "desc": [
            "This allows you to make your player attack"
          ],
          "params": [
            {
              "name": "action",
              "type": "String",
              "desc": "the type of action, either 'hold', 'stop', or 'once'"
            }
          ],
          "throws": [
            "Must pass 'hold', 'stop', or 'once' into attack()"
          ],
          "examples": [
            "player.attack('once');"
          ]
        },
        {
          "name": "swingHand",
          "is_arbitrary": false,
          "desc": [
            "This will play the player's hand swing animation for a given hand"
          ],
          "params": [
            {
              "name": "hand",
              "type": "String",
              "desc": "the hand to swing, this should be either 'main_hand' or 'off_hand'"
            }
          ],
          "examples": [
            "player.swingHand('main_hand');"
          ]
        },
        {
          "name": "stonecutter",
          "is_arbitrary": false,
          "desc": [
            "This allows you to use the stonecutter"
          ],
          "params": [
            {
              "name": "itemInput",
              "type": "MaterialLike",
              "desc": "the item or material you want to input"
            },
            {
              "name": "itemOutput",
              "type": "MaterialLike",
              "desc": "the item or material you want to craft"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the result was successful"
          },
          "throws": [
            "Not in stonecutter gui",
            "Recipe does not exist"
          ],
          "examples": [
            "player.stonecutter(Material.STONE.asItemstack(), Material.STONE_BRICKS.asItemStack());"
          ]
        },
        {
          "name": "setSneaking",
          "is_arbitrary": false,
          "desc": [
            "This sets the player's sneaking state"
          ],
          "params": [
            {
              "name": "sneaking",
              "type": "Boolean",
              "desc": "the sneaking state"
            }
          ],
          "examples": [
            "player.setSneaking(true);"
          ]
        },
        {
          "name": "setWalking",
          "is_arbitrary": false,
          "desc": [
            "This sets the player's walking state"
          ],
          "params": [
            {
              "name": "walking",
              "type": "Boolean",
              "desc": "the walking state"
            }
          ],
          "examples": [
            "player.setWalking(true);"
          ]
        },
        {
          "name": "breakBlock",
          "is_arbitrary": false,
          "desc": [
            "This breaks a block at a given position, if it is able to be broken"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the block can be broken"
          },
          "examples": [
            "player.breakBlock(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "breakBlock",
          "is_arbitrary": false,
          "desc": [
            "This breaks a block at a given position, if it is able to be broken",
            "and runs a function when the block is broken, or when the block cannot be broken"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to run when the block is broken"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the block can be broken"
          },
          "examples": [
            "player.breakBlock(new Pos(0, 0, 0), fun() { print('broken'); });"
          ]
        },
        {
          "name": "doesVillagerHaveTrade"
        },
        {
          "name": "tradeIndex"
        },
        {
          "name": "jump",
          "is_arbitrary": false,
          "desc": [
            "This will make the player jump if they are on the ground"
          ],
          "examples": [
            "player.jump();"
          ]
        },
        {
          "name": "openInventory",
          "is_arbitrary": false,
          "desc": [
            "This opens the player's inventory"
          ],
          "examples": [
            "player.openInventory();"
          ]
        },
        {
          "name": "swapPlayerSlotWithHotbar",
          "is_arbitrary": false,
          "desc": [
            "This allows you to swap a slot in the player's inventory with the hotbar"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot to swap"
            }
          ],
          "throws": [
            "That slot is out of bounds"
          ],
          "examples": [
            "player.swapPlayerSlotWithHotbar(15);"
          ]
        },
        {
          "name": "isTradeDisabled"
        },
        {
          "name": "spectatorTeleport",
          "is_arbitrary": false,
          "desc": [
            "This allows you to teleport to any entity as long as you are in spectator mode"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to teleport to"
            }
          ],
          "examples": [
            "player.spectatorTeleport(player.getLookingAtEntity());"
          ]
        },
        {
          "name": "getBlockBreakingSpeed",
          "is_arbitrary": false,
          "desc": [
            "This returns the block breaking speed of the player on a block including enchanements and effects"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "the block to get the speed of"
            }
          ],
          "examples": [
            "speed = player.getBlockBreakingSpeed(Material.GOLD_BLOCK.asBlock());"
          ]
        },
        {
          "name": "closeScreen",
          "is_arbitrary": false,
          "desc": [
            "This closes the current screen"
          ],
          "examples": [
            "player.closeScreen();"
          ]
        },
        {
          "name": "getCurrentScreen",
          "is_arbitrary": false,
          "desc": [
            "This gets the current screen the player is in"
          ],
          "returns": {
            "type": "Screen",
            "desc": "the screen the player is in, if the player is not in a screen it will return null"
          },
          "examples": [
            "screen = player.getCurrentScreen();"
          ]
        },
        {
          "name": "updateBreakingBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to update your block breaking progress at a position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "examples": [
            "player.updateBreakingBlock(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "updateBreakingBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to update your block breaking progress at a position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position"
            }
          ],
          "examples": [
            "player.updateBreakingBlock(0, 0, 0);"
          ]
        },
        {
          "name": "fakeLook",
          "is_arbitrary": false,
          "desc": [
            "This makes the player 'fake' looking in a direction, this can be",
            "used to place blocks in unusual orientations without moving the camera"
          ],
          "params": [
            {
              "name": "yaw",
              "type": "Number",
              "desc": "the yaw to look at"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "the pitch to look at"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction to look at"
            },
            {
              "name": "duration",
              "type": "Number",
              "desc": "the duration of the look in ticks"
            }
          ],
          "examples": [
            "player.fakeLook(90, 0, 'up', 100);"
          ]
        },
        {
          "name": "say",
          "is_arbitrary": false,
          "desc": [
            "This allows you to make your player send a message in chat, this includes commands"
          ],
          "params": [
            {
              "name": "message",
              "type": "String",
              "desc": "the message to send"
            }
          ],
          "examples": [
            "player.say('/help');"
          ]
        },
        {
          "name": "swapSlots",
          "is_arbitrary": false,
          "desc": [
            "The allows you to swap two slots with one another",
            "A note about slot order is that slots go from top to bottom"
          ],
          "params": [
            {
              "name": "slot1",
              "type": "Number",
              "desc": "the slot to swap with slot2"
            },
            {
              "name": "slot2",
              "type": "Number",
              "desc": "the slot to swap with slot1"
            }
          ],
          "throws": [
            "That slot is out of bounds"
          ],
          "examples": [
            "player.swapSlots(13, 14);"
          ]
        },
        {
          "name": "getTradeItemForIndex"
        },
        {
          "name": "message",
          "is_arbitrary": false,
          "desc": [
            "This allows you to send a message to your player, only they will see this, purely client side"
          ],
          "params": [
            {
              "name": "message",
              "type": "Text",
              "desc": "the message to send, can also be string"
            }
          ],
          "examples": [
            "player.message('Hello World!');"
          ]
        },
        {
          "name": "look",
          "is_arbitrary": false,
          "desc": [
            "This sets the player's look direction"
          ],
          "params": [
            {
              "name": "yaw",
              "type": "Number",
              "desc": "the yaw of the player's look direction"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "the pitch of the player's look direction"
            }
          ],
          "examples": [
            "player.look(0, 0);"
          ]
        },
        {
          "name": "shiftClickSlot",
          "is_arbitrary": false,
          "desc": [
            "This allows you to shift click a slot"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot to click"
            }
          ],
          "throws": [
            "That slot is out of bounds"
          ],
          "examples": [
            "player.shiftClickSlot(9);"
          ]
        },
        {
          "name": "getIndexOfTradeItem"
        },
        {
          "name": "dropAll",
          "is_arbitrary": false,
          "desc": [
            "This drops all items of a given type in the player's inventory"
          ],
          "params": [
            {
              "name": "materialLike",
              "type": "MaterialLike",
              "desc": "the item stack, or material type to drop"
            }
          ],
          "examples": [
            "player.dropAll(Material.DIRT.asItemStack());"
          ]
        },
        {
          "name": "showTitle"
        },
        {
          "name": "lookAtPos",
          "is_arbitrary": false,
          "desc": [
            "This makes your player look towards a position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position to look at"
            }
          ],
          "examples": [
            "player.lookAtPos(pos);"
          ]
        },
        {
          "name": "lookAtPos",
          "is_arbitrary": false,
          "desc": [
            "This makes your player look towards a position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x coordinate of the position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y coordinate of the position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z coordinate of the position"
            }
          ],
          "examples": [
            "player.lookAtPos(0, 0, 0);"
          ]
        },
        {
          "name": "swapHands",
          "is_arbitrary": false,
          "desc": [
            "This will swap the player's main hand with the off hand"
          ],
          "examples": [
            "player.swapHands();"
          ]
        },
        {
          "name": "clickSlot",
          "is_arbitrary": false,
          "desc": [
            "This allows you to click a slot with either right or left click",
            "and a slot action, the click must be either 'left' or 'right' or a number (for swap).",
            "The action must be either 'click', 'shift_click', 'swap', 'middle_click',",
            "'throw', 'drag', or 'double_click'"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot to click"
            },
            {
              "name": "click",
              "type": "String",
              "desc": "the click type, this should be either 'left' or 'right'"
            },
            {
              "name": "action",
              "type": "String",
              "desc": "the action to perform"
            }
          ],
          "throws": [
            "Invalid clickData must be 'left' or 'right' or a number",
            "Invalid slotActionType, see Wiki",
            "That slot is out of bounds"
          ],
          "examples": [
            "player.clickSlot(9, 'left', 'double_click');"
          ]
        },
        {
          "name": "dropSlot",
          "is_arbitrary": false,
          "desc": [
            "This allows you to drop the items in a slot"
          ],
          "params": [
            {
              "name": "slot",
              "type": "Number",
              "desc": "the slot to drop"
            }
          ],
          "throws": [
            "That slot is out of bounds"
          ],
          "examples": [
            "player.dropSlot(9);"
          ]
        },
        {
          "name": "attackEntity",
          "is_arbitrary": false,
          "desc": [
            "This makes your player attack an entity without",
            "having to be looking at it or clicking on the entity"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to attack"
            }
          ],
          "examples": [
            "allEntities = client.getWorld().getAllEntities();\nforeach (entity : allEntities) {\n\tif (entity.getId() == \"villager\" && player.getSquaredDistanceTo(entity) < 5) {\n\t\tplayer.attackEntity(entity);\n\t\tbreak;\n\t}\n}\n"
          ]
        },
        {
          "name": "setSprinting",
          "is_arbitrary": false,
          "desc": [
            "This sets the player's sprinting state"
          ],
          "params": [
            {
              "name": "sprinting",
              "type": "Boolean",
              "desc": "the sprinting state"
            }
          ],
          "examples": [
            "player.setSprinting(true);"
          ]
        },
        {
          "name": "interactBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact with a block at a position and direction"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the interaction, e.g. 'up', 'north', 'east', etc."
            }
          ],
          "examples": [
            "player.interactBlock(new Pos(0, 0, 0), 'up');"
          ]
        },
        {
          "name": "interactBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact with a block at a position and direction"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the interaction, e.g. 'up', 'north', 'east', etc."
            }
          ],
          "examples": [
            "player.interactBlock(0, 100, 0, 'up');"
          ]
        },
        {
          "name": "interactBlock",
          "is_arbitrary": false,
          "desc": [
            "This allows you to interact with a block at a position and direction",
            "This function is for very specific cases where there needs to be extra precision",
            "like when placing stairs or slabs in certain directions, so the first set of",
            "coords is the exact position of the block, and the second set of coords is the position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the exact x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the exact y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the exact z position"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the interaction, e.g. 'up', 'north', 'east', etc."
            },
            {
              "name": "blockX",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "blockY",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "blockZ",
              "type": "Number",
              "desc": "the z position of the block"
            },
            {
              "name": "insideBlock",
              "type": "Boolean",
              "desc": "whether the player is inside the block"
            }
          ],
          "examples": [
            "player.interactBlock(0, 100.5, 0, 'up', 0, 100, 0, true);"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This gets the main player"
          ],
          "returns": {
            "type": "Player",
            "desc": "The main player"
          },
          "examples": [
            "player = Player.get();"
          ]
        }
      ]
    },
    "Entity": {
      "name": "Entity",
      "desc": [
        "This class is mostly used to get data about entities."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getFullBiome",
          "is_arbitrary": false,
          "desc": [
            "This gets the biome of the entity, this returns the full biome id, so for example 'minecraft:plains'"
          ],
          "returns": {
            "type": "String",
            "desc": "the biome id of the biome the entity is in"
          },
          "examples": [
            "entity.getFullBiome();"
          ]
        },
        {
          "name": "getAge",
          "is_arbitrary": false,
          "desc": [
            "This gets the age of the entity in ticks"
          ],
          "returns": {
            "type": "Number",
            "desc": "the age of the entity in ticks"
          },
          "examples": [
            "entity.getAge();"
          ]
        },
        {
          "name": "getNbt",
          "is_arbitrary": false,
          "desc": [
            "This gets the nbt of the entity as a map"
          ],
          "returns": {
            "type": "Map",
            "desc": "the nbt of the entity"
          },
          "examples": [
            "entity.getNbt();"
          ]
        },
        {
          "name": "getWorld",
          "is_arbitrary": false,
          "desc": [
            "This gets the world the entity is in"
          ],
          "returns": {
            "type": "World",
            "desc": "the world the entity is in"
          },
          "examples": [
            "entity.getWorld();"
          ]
        },
        {
          "name": "collidesWith",
          "is_arbitrary": false,
          "desc": [
            "This checks whether the entity collides with a block at a given position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position to check"
            },
            {
              "name": "block",
              "type": "Block",
              "desc": "the block to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the entity collides with the block"
          },
          "examples": [
            "entity.collidesWith(Pos.get(0, 0, 0), Block.of('minecraft:stone'));"
          ]
        },
        {
          "name": "getHitbox",
          "is_arbitrary": false,
          "desc": [
            "This gets the hitbox of the entity in a list containing the two corners of the hitbox, the minimum point and the maximum point"
          ],
          "returns": {
            "type": "List",
            "desc": "the hitbox of the entity"
          },
          "examples": [
            "entity.getHitbox();"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This gets the full id of the entity, this returns the full id, so for example",
            "'minecraft:cow' you can find all entityNames on",
            "[Joa's Entity Property Encyclopedia](https://joakimthorsen.github.io/MCPropertyEncyclopedia/entities.html)"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id of the entity"
          },
          "examples": [
            "entity.getFullId();"
          ]
        },
        {
          "name": "isSprinting",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the player is sprinting"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the player is sprinting, false if not"
          },
          "examples": [
            "entity.isSprinting();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the entity, this returns the id, so for example 'cow'"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the entity"
          },
          "examples": [
            "entity.getId();"
          ]
        },
        {
          "name": "setGlowing",
          "is_arbitrary": false,
          "desc": [
            "This sets the entity to either start glowing or stop glowing on the client"
          ],
          "params": [
            {
              "name": "glowing",
              "type": "Boolean",
              "desc": "the glowing state"
            }
          ],
          "examples": [
            "entity.setGlowing(true);"
          ]
        },
        {
          "name": "getEntityIdNumber",
          "is_arbitrary": false,
          "desc": [
            "This gets the entity id number of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "the entity id number"
          },
          "examples": [
            "entity.getEntityIdNumber();"
          ]
        },
        {
          "name": "isOf",
          "is_arbitrary": false,
          "desc": [
            "This checks if the entity is of the given entity id"
          ],
          "params": [
            {
              "name": "entityId",
              "type": "String",
              "desc": "the entity id to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is of the given entity id"
          },
          "examples": [
            "entity.isOf('cow');"
          ]
        },
        {
          "name": "getPos",
          "is_arbitrary": false,
          "desc": [
            "This gets the position of the entity"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the position of the entity"
          },
          "examples": [
            "entity.getPos();"
          ]
        },
        {
          "name": "getDimension",
          "is_arbitrary": false,
          "desc": [
            "This gets the dimension of the entity"
          ],
          "returns": {
            "type": "String",
            "desc": "the dimension id of dimension the entity is in"
          },
          "examples": [
            "entity.getDimension();"
          ]
        },
        {
          "name": "isGlowing",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is glowing"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is glowing, false if not"
          },
          "examples": [
            "entity.isGlowing();"
          ]
        },
        {
          "name": "isSubmergedInWater",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is submerged in water"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is submerged in water, false if not"
          },
          "examples": [
            "entity.isSubmergedInWater();"
          ]
        },
        {
          "name": "getBiome",
          "is_arbitrary": false,
          "desc": [
            "This gets the biome of the entity, this only returns the path, so for example 'plains'"
          ],
          "returns": {
            "type": "String",
            "desc": "the biome id of the biome the entity is in"
          },
          "examples": [
            "entity.getBiome();"
          ]
        },
        {
          "name": "getLookingAtBlock",
          "is_arbitrary": false,
          "desc": [
            "This gets the block that the entity is currently looking at",
            "with a max range of 20 blocks, if there is no block then it will return air"
          ],
          "returns": {
            "type": "Block",
            "desc": "the block that the entity is looking at, containing the position"
          },
          "examples": [
            "entity.getLookingAtBlock();"
          ]
        },
        {
          "name": "getLookingAtBlock",
          "is_arbitrary": false,
          "desc": [
            "This gets the block that the entity is currently looking at",
            "with a specific max range, if there is no block then it will return air"
          ],
          "params": [
            {
              "name": "maxDistance",
              "type": "Number",
              "desc": "the max range to ray cast"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "the block that the entity is looking at, containing the position"
          },
          "examples": [
            "entity.getLookingAtBlock(10);"
          ]
        },
        {
          "name": "getLookingAtPos",
          "is_arbitrary": false,
          "desc": [
            "This gets the position that the entity is currently looking at with a specific max range"
          ],
          "params": [
            {
              "name": "maxDistance",
              "type": "Number",
              "desc": "the max range to ray cast"
            }
          ],
          "returns": {
            "type": "Pos",
            "desc": "the position that the entity is looking at, containing the x, y, and z"
          },
          "examples": [
            "entity.getLookingAtPos(10);"
          ]
        },
        {
          "name": "isInLava",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is in lava"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is in lava, false if not"
          },
          "examples": [
            "entity.isInLava();"
          ]
        },
        {
          "name": "getCustomName",
          "is_arbitrary": false,
          "desc": [
            "This gets the custom name of the entity if it has one"
          ],
          "returns": {
            "type": "String",
            "desc": "the custom name of the entity if it has one, otherwise null"
          },
          "examples": [
            "entity.getCustomName();"
          ]
        },
        {
          "name": "getEntityUuid",
          "is_arbitrary": false,
          "desc": [
            "This gets the uuid of the entity"
          ],
          "returns": {
            "type": "String",
            "desc": "the uuid of the entity"
          },
          "examples": [
            "entity.getEntityUuid();"
          ]
        },
        {
          "name": "isTouchingWater",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is touching water"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is touching water, false if not"
          },
          "examples": [
            "entity.isTouchingWater();"
          ]
        },
        {
          "name": "isFalling",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is falling"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is falling, false if not"
          },
          "examples": [
            "entity.isFalling();"
          ]
        },
        {
          "name": "isTouchingWaterOrRain",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is touching water or rain"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is touching water or rain, false if not"
          },
          "examples": [
            "entity.isTouchingWaterOrRain();"
          ]
        },
        {
          "name": "getSquaredDistanceTo",
          "is_arbitrary": false,
          "desc": [
            "This gets the squared distance between the entity and the other entity"
          ],
          "params": [
            {
              "name": "otherEntity",
              "type": "Entity",
              "desc": "the other entity"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the squared distance between the entities"
          },
          "examples": [
            "entity.getSquaredDistanceTo(Player.get());"
          ]
        },
        {
          "name": "getYaw",
          "is_arbitrary": false,
          "desc": [
            "This gets the yaw of the entity (horizontal head rotation)"
          ],
          "returns": {
            "type": "Number",
            "desc": "the yaw of the entity, between -180 and 180"
          },
          "examples": [
            "entity.getYaw();"
          ]
        },
        {
          "name": "getTranslatedName",
          "is_arbitrary": false,
          "desc": [
            "This gets the translated name of the entity, for example 'minecraft:pig' would return 'Pig' if your language is in english"
          ],
          "returns": {
            "type": "String",
            "desc": "the translated name of the entity"
          },
          "examples": [
            "entity.getTranslatedName();"
          ]
        },
        {
          "name": "getX",
          "is_arbitrary": false,
          "desc": [
            "This gets the x position of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "the x position of the entity"
          },
          "examples": [
            "entity.getX();"
          ]
        },
        {
          "name": "getPitch",
          "is_arbitrary": false,
          "desc": [
            "This gets the pitch of the entity (vertical head rotation)"
          ],
          "returns": {
            "type": "Number",
            "desc": "the pitch of the entity, between -90 and 90"
          },
          "examples": [
            "entity.getPitch();"
          ]
        },
        {
          "name": "getY",
          "is_arbitrary": false,
          "desc": [
            "This gets the y position of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "the y position of the entity"
          },
          "examples": [
            "entity.getY();"
          ]
        },
        {
          "name": "getZ",
          "is_arbitrary": false,
          "desc": [
            "This gets the z position of the entity"
          ],
          "returns": {
            "type": "Number",
            "desc": "the z position of the entity"
          },
          "examples": [
            "entity.getZ();"
          ]
        },
        {
          "name": "isSneaking",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the player is sneaking"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the player is sneaking, false if not"
          },
          "examples": [
            "entity.isSneaking();"
          ]
        },
        {
          "name": "getDistanceTo",
          "is_arbitrary": false,
          "desc": [
            "This gets the distance between the entity and the other entity"
          ],
          "params": [
            {
              "name": "otherEntity",
              "type": "Entity",
              "desc": "the other entity"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the distance between the entities"
          },
          "examples": [
            "entity.getDistanceTo(Player.get());"
          ]
        },
        {
          "name": "isOnFire",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is on fire"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is on fire, false if not"
          },
          "examples": [
            "entity.isOnFire();"
          ]
        },
        {
          "name": "isOnGround",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the entity is on the ground"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the entity is on the ground, false if not"
          },
          "examples": [
            "entity.isOnGround();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This converts an entityId into an entity instance"
          ],
          "params": [
            {
              "name": "entityId",
              "type": "String",
              "desc": "the entityId to convert to an entity"
            }
          ],
          "returns": {
            "type": "Entity",
            "desc": "the entity instance from the id"
          },
          "throws": [
            "... is not a valid entity"
          ],
          "examples": [
            "Entity.of('minecraft:pig');"
          ]
        }
      ]
    },
    "OtherPlayer": {
      "name": "OtherPlayer",
      "desc": [
        "This class is used to represent all players, mainly other players,",
        "this class extends LivingEntity and so inherits all of their methods too"
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getAllSlotsFor",
          "is_arbitrary": false,
          "desc": [
            "This gets all the slot numbers of the specified item in the players combined inventory"
          ],
          "params": [
            {
              "name": "materialLike",
              "type": "MaterialLike",
              "desc": "the item or material you want to get the slot of"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the slot numbers of the item, empty list if not found"
          },
          "examples": [
            "otherPlayer.getAllSlotsFor(Material.DIAMOND);"
          ]
        },
        {
          "name": "getSlotFor",
          "is_arbitrary": false,
          "desc": [
            "This gets the slot number of the specified item in the players combined inventory"
          ],
          "params": [
            {
              "name": "materialLike",
              "type": "MaterialLike",
              "desc": "the item or material you want to get the slot of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the slot number of the item, null if not found"
          },
          "examples": [
            "otherPlayer.getSlotFor(Material.DIAMOND.asItemStack());"
          ]
        },
        {
          "name": "getHeldItem",
          "is_arbitrary": false,
          "desc": [
            "This gets the players currently selected item, in their main hand"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the currently selected item"
          },
          "examples": [
            "otherPlayer.getHeldItem();"
          ]
        },
        {
          "name": "getItemForSlot",
          "is_arbitrary": false,
          "desc": [
            "This gets the item in the specified slot, in the total players inventory, including inventories of open containers"
          ],
          "params": [
            {
              "name": "slotNum",
              "type": "Number",
              "desc": "the slot number you want to get"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item in the specified slot"
          },
          "throws": [
            "That slot is out of bounds"
          ],
          "examples": [
            "otherPlayer.getItemForSlot(0);"
          ]
        },
        {
          "name": "getCurrentSlot",
          "is_arbitrary": false,
          "desc": [
            "This gets the players currently selected slot"
          ],
          "returns": {
            "type": "Number",
            "desc": "the currently selected slot number"
          },
          "examples": [
            "otherPlayer.getCurrentSlot();"
          ]
        },
        {
          "name": "getSaturation",
          "is_arbitrary": false,
          "desc": [
            "This gets the saturation level of the player"
          ],
          "returns": {
            "type": "Number",
            "desc": "the saturation level"
          },
          "examples": [
            "otherPlayer.getSaturation();"
          ]
        },
        {
          "name": "getPlayerName",
          "is_arbitrary": false,
          "desc": [
            "This gets the players name"
          ],
          "returns": {
            "type": "String",
            "desc": "the players name"
          },
          "examples": [
            "otherPlayer.getPlayerName();"
          ]
        },
        {
          "name": "getFishingBobber",
          "is_arbitrary": false,
          "desc": [
            "This gets the fishing bobber that the player has"
          ],
          "returns": {
            "type": "Entity",
            "desc": "the fishing bobber entity, null if the player isn't fishing"
          },
          "examples": [
            "otherPlayer.getFishingBobber();"
          ]
        },
        {
          "name": "getLevels",
          "is_arbitrary": false,
          "desc": [
            "This gets the number of experience levels the player has"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number of experience levels"
          },
          "examples": [
            "otherPlayer.getLevels();"
          ]
        },
        {
          "name": "isInventoryFull",
          "is_arbitrary": false,
          "desc": [
            "This gets whether the players inventory is full"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the inventory is full"
          },
          "examples": [
            "otherPlayer.isInventoryFull();"
          ]
        },
        {
          "name": "getTotalSlots",
          "is_arbitrary": false,
          "desc": [
            "This gets the players total inventory slots"
          ],
          "returns": {
            "type": "Number",
            "desc": "the players total inventory slots"
          },
          "examples": [
            "otherPlayer.getTotalSlots();"
          ]
        },
        {
          "name": "getAbilities",
          "is_arbitrary": false,
          "desc": [
            "This gets the abilities of the player in a map",
            "For example:",
            "`{\"invulnerable\": false, \"canFly\": true, \"canBreakBlocks\": true, \"isCreative\": true, \"walkSpeed\": 1.0, \"flySpeed\": 1.2}`"
          ],
          "returns": {
            "type": "Map",
            "desc": "the abilities of the player"
          },
          "examples": [
            "otherPlayer.getAbilities();"
          ]
        },
        {
          "name": "getItemForPlayerSlot",
          "is_arbitrary": false,
          "desc": [
            "This gets the item in the specified slot, in the players inventory, not including inventories of open containers"
          ],
          "params": [
            {
              "name": "slotNum",
              "type": "Number",
              "desc": "the slot number you want to get"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item in the specified slot"
          },
          "throws": [
            "That slot is out of bounds"
          ],
          "examples": [
            "otherPlayer.getItemForPlayerSlot(0);"
          ]
        },
        {
          "name": "getGamemode",
          "is_arbitrary": false,
          "desc": [
            "This gets the players gamemode"
          ],
          "returns": {
            "type": "String",
            "desc": "the players gamemode as a string, null if not known, for example 'creative', 'survival', 'spectator'"
          },
          "examples": [
            "otherPlayer.getGamemode();"
          ]
        },
        {
          "name": "getHunger",
          "is_arbitrary": false,
          "desc": [
            "This gets the hunger level of the player"
          ],
          "returns": {
            "type": "Number",
            "desc": "the hunger level"
          },
          "examples": [
            "otherPlayer.getHunger();"
          ]
        }
      ],
      "static_methods": []
    },
    "LivingEntity": {
      "name": "LivingEntity",
      "desc": [
        "This class extends Entity and so inherits all of their methods too,",
        "LivingEntities are any entities that are alive, so all mobs"
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "isFlyFalling",
          "is_arbitrary": false,
          "desc": [
            "This checks if the LivingEntity is fly falling (gliding with elytra)"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the LivingEntity is fly falling"
          },
          "examples": [
            "livingEntity.isFlyFalling();"
          ]
        },
        {
          "name": "getStatusEffects",
          "is_arbitrary": false,
          "desc": [
            "This gets the LivingEntity's status effects, you can find",
            "a list of all the ids of the status effects",
            "[here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Effects)"
          ],
          "returns": {
            "type": "List",
            "desc": "a list of status effects, may be empty"
          },
          "examples": [
            "livingEntity.getStatusEffects();"
          ]
        },
        {
          "name": "getHealth",
          "is_arbitrary": false,
          "desc": [
            "This gets the LivingEntity's current health"
          ],
          "returns": {
            "type": "Number",
            "desc": "the LivingEntity's health"
          },
          "examples": [
            "livingEntity.getHealth();"
          ]
        }
      ],
      "static_methods": []
    },
    "ItemEntity": {
      "name": "ItemEntity",
      "desc": [
        "This class extends Entity and so inherits all of their methods too,",
        "ItemEntities are entities that are dropped items."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getCustomName",
          "is_arbitrary": false,
          "desc": [
            "This method returns the custom name of the ItemEntity"
          ],
          "returns": {
            "type": "String",
            "desc": "the custom name of the entity"
          },
          "examples": [
            "itemEntity.getCustomName();"
          ]
        },
        {
          "name": "getItemAge",
          "is_arbitrary": false,
          "desc": [
            "This method returns the age of the ItemEntity",
            "this is increased every tick and the item entity despawns after 6000 ticks"
          ],
          "returns": {
            "type": "Number",
            "desc": "the age of the entity"
          },
          "examples": [
            "itemEntity.getItemAge();"
          ]
        },
        {
          "name": "getItemStack",
          "is_arbitrary": false,
          "desc": [
            "This method returns the ItemStack that is held in the ItemEntity"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack that the entity holds"
          },
          "examples": [
            "itemEntity.getItemStack();"
          ]
        },
        {
          "name": "getThrower",
          "is_arbitrary": false,
          "desc": [
            "This method returns the player that threw the ItemEntity"
          ],
          "examples": [
            "itemEntity.getThrower();"
          ]
        }
      ],
      "static_methods": []
    },
    "Block": {
      "name": "Block",
      "desc": null,
      "import_path": null,
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getBlockProperties",
          "is_arbitrary": false,
          "desc": [
            "This gets the properties of the Block",
            "You can find a list of all block properties",
            "[here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Block_states)"
          ],
          "returns": {
            "type": "Map",
            "desc": "the properties of the Block, may be empty if there are no properties"
          },
          "examples": [
            "block.getBlockProperties();"
          ]
        },
        {
          "name": "hasBlockPosition",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block has a position or not"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block has a position"
          },
          "examples": [
            "block.hasBlockPosition();"
          ]
        },
        {
          "name": "isSideSolidFullSquare",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is solid on the full square"
          ],
          "params": [
            {
              "name": "side",
              "type": "String",
              "desc": "the side to check, for example: 'north', 'south', 'east', 'west', 'up', 'down'"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is solid on the full square"
          },
          "examples": [
            "block.isSideSolidFullSquare('north');"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This gets the full id of the Block, for example: 'minecraft:stone'"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id of the Block"
          },
          "examples": [
            "block.getFullId();"
          ]
        },
        {
          "name": "sideCoversSmallSquare",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block covers a small square"
          ],
          "params": [
            {
              "name": "side",
              "type": "String",
              "desc": "the side to check, for example: 'north', 'south', 'east', 'west', 'up', 'down'"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block covers a small square"
          },
          "examples": [
            "block.sideCoversSmallSquare('north');"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the Block, for example: 'stone'"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the Block"
          },
          "examples": [
            "block.getId();"
          ]
        },
        {
          "name": "isSpawnable",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is spawnable in the case of zombies"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is spawnable in the case of zombies"
          },
          "examples": [
            "block.isSpawnable();"
          ]
        },
        {
          "name": "isSpawnable",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is spawnable in the case of the given entity"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is spawnable in the case of the given entity"
          },
          "examples": [
            "block.isSpawnable(zombie);"
          ]
        },
        {
          "name": "mirrorFrontBack",
          "is_arbitrary": false,
          "desc": [
            "This mirrors the Block around the front and back"
          ],
          "returns": {
            "type": "Block",
            "desc": "the mirrored Block"
          },
          "examples": [
            "block.mirrorFrontBack();"
          ]
        },
        {
          "name": "mirrorLeftRight",
          "is_arbitrary": false,
          "desc": [
            "This mirrors the Block around the left and right"
          ],
          "returns": {
            "type": "Block",
            "desc": "the mirrored Block"
          },
          "examples": [
            "block.mirrorLeftRight();"
          ]
        },
        {
          "name": "getPos",
          "is_arbitrary": false,
          "desc": [
            "This gets the position of the Block"
          ],
          "returns": {
            "type": "Pos",
            "desc": "the position of the Block, may be null if the Block has no position"
          },
          "examples": [
            "block.getPos();"
          ]
        },
        {
          "name": "isSolidBlock",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is a solid block"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is a solid block"
          },
          "examples": [
            "block.isSolidBlock();"
          ]
        },
        {
          "name": "isTransparent",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is transparent"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is transparent"
          },
          "examples": [
            "block.isTransparent();"
          ]
        },
        {
          "name": "isReplaceable",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is replaceable"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is replaceable"
          },
          "examples": [
            "block.isReplaceable();"
          ]
        },
        {
          "name": "getLuminance",
          "is_arbitrary": false,
          "desc": [
            "This gets the luminance of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the luminance of the Block"
          },
          "examples": [
            "block.getLuminance();"
          ]
        },
        {
          "name": "rotateYCounterClockwise",
          "is_arbitrary": false,
          "desc": [
            "This rotates the Block 90 degrees counter-clockwise"
          ],
          "returns": {
            "type": "Block",
            "desc": "the rotated Block"
          },
          "examples": [
            "block.rotateYCounterClockwise();"
          ]
        },
        {
          "name": "isFluidSource",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is a fluid source"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is a fluid source"
          },
          "examples": [
            "block.isFluidSource();"
          ]
        },
        {
          "name": "asItemStack",
          "is_arbitrary": false,
          "desc": [
            "This gets the ItemStack of the Block, if the block has no item it will return air"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack of the Block"
          },
          "examples": [
            "block.asItemStack();"
          ]
        },
        {
          "name": "getMaterial",
          "is_arbitrary": false,
          "desc": [
            "This gets the material of the Block"
          ],
          "returns": {
            "type": "Material",
            "desc": "the material of the Block"
          },
          "examples": [
            "block.getMaterial();"
          ]
        },
        {
          "name": "rotateYClockwise",
          "is_arbitrary": false,
          "desc": [
            "This rotates the Block 90 degrees clockwise"
          ],
          "returns": {
            "type": "Block",
            "desc": "the rotated Block"
          },
          "examples": [
            "block.rotateYClockwise();"
          ]
        },
        {
          "name": "getTranslatedName",
          "is_arbitrary": false,
          "desc": [
            "This gets the translated name of the Block, for example",
            "'stone' would return 'Stone' if your language is in English"
          ],
          "returns": {
            "type": "String",
            "desc": "the translated name of the Block"
          },
          "examples": [
            "block.getTranslatedName();"
          ]
        },
        {
          "name": "getX",
          "is_arbitrary": false,
          "desc": [
            "This gets the X position of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the X position of the Block, may be null if the Block has no position"
          },
          "examples": [
            "block.getX();"
          ]
        },
        {
          "name": "getY",
          "is_arbitrary": false,
          "desc": [
            "This gets the Y position of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the Y position of the Block, may be null if the Block has no position"
          },
          "examples": [
            "block.getY();"
          ]
        },
        {
          "name": "getZ",
          "is_arbitrary": false,
          "desc": [
            "This gets the Z position of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the Z position of the Block, may be null if the Block has no position"
          },
          "examples": [
            "block.getZ();"
          ]
        },
        {
          "name": "getBlastResistance",
          "is_arbitrary": false,
          "desc": [
            "This gets the blast resistance of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the blast resistance of the Block"
          },
          "examples": [
            "block.getBlastResistance();"
          ]
        },
        {
          "name": "getHardness",
          "is_arbitrary": false,
          "desc": [
            "This gets the hardness of the Block"
          ],
          "returns": {
            "type": "Number",
            "desc": "the hardness of the Block"
          },
          "examples": [
            "block.getHardness();"
          ]
        },
        {
          "name": "isFluid",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is a fluid"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is a fluid"
          },
          "examples": [
            "block.isFluid();"
          ]
        },
        {
          "name": "getBlockEntityNbt"
        },
        {
          "name": "isBlockEntity",
          "is_arbitrary": false,
          "desc": [
            "This checks if the Block is a BlockEntity"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the Block is a BlockEntity"
          },
          "examples": [
            "block.isBlockEntity();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This creates a Block from a material or string"
          ],
          "params": [
            {
              "name": "material",
              "type": "MaterialLike",
              "desc": "the material, item stack, block, or string to create the Block from"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "the Block created from the material or string"
          },
          "examples": [
            "Block.of(Material.STONE);"
          ]
        }
      ]
    },
    "ItemStack": {
      "name": "ItemStack",
      "desc": [
        "This class represents an item stack. It can be used to create new item stacks, or to modify existing ones."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getMaxCount",
          "is_arbitrary": false,
          "desc": [
            "This gets the max stack size of the ItemStack"
          ],
          "returns": {
            "type": "Number",
            "desc": "the max stack size of the ItemStack"
          },
          "examples": [
            "itemStack.getMaxCount();"
          ]
        },
        {
          "name": "getNbt",
          "is_arbitrary": false,
          "desc": [
            "This gets the NBT data of the ItemStack as a Map"
          ],
          "returns": {
            "type": "Map",
            "desc": "the NBT data of the ItemStack"
          },
          "examples": [
            "itemStack.getNbt();"
          ]
        },
        {
          "name": "setCustomName",
          "is_arbitrary": false,
          "desc": [
            "This sets the custom name of the ItemStack"
          ],
          "params": [
            {
              "name": "customName",
              "type": "Text",
              "desc": "the custom name of the ItemStack, this can be text or string"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack with the new custom name"
          },
          "examples": [
            "itemStack.setCustomName('My Pickaxe');"
          ]
        },
        {
          "name": "getCustomName",
          "is_arbitrary": false,
          "desc": [
            "This gets the custom name of the ItemStack"
          ],
          "returns": {
            "type": "String",
            "desc": "the custom name of the ItemStack"
          },
          "examples": [
            "itemStack.getCustomName();"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This gets the full id of the ItemStack, for example: 'minecraft:diamond_sword'"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id of the ItemStack"
          },
          "examples": [
            "itemStack.getFullId();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the ItemStack, for example: 'diamond_sword'"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the ItemStack"
          },
          "examples": [
            "itemStack.getId();"
          ]
        },
        {
          "name": "getMiningSpeedMultiplier",
          "is_arbitrary": false,
          "desc": [
            "This gets the mining speed multiplier of the ItemStack for the given Block,",
            "for example a diamond pickaxe on stone would have a higher multiplier than air on stone"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "the Block to get the mining speed multiplier for"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the mining speed multiplier of the ItemStack for the given Block"
          },
          "examples": [
            "pickaxe = Material.DIAMOND_PICKAXE.asItemStack();\ngoldBlock = Material.GOLD_BLOCK.asBlock();\n\npickaxe.getMiningSpeedMultiplier(goldBlock);\n"
          ]
        },
        {
          "name": "isBlockItem",
          "is_arbitrary": false,
          "desc": [
            "This checks if the ItemStack can be placed as a block"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the ItemStack can be placed as a block, false otherwise"
          },
          "examples": [
            "itemStack.isBlockItem();"
          ]
        },
        {
          "name": "getEnchantments",
          "is_arbitrary": false,
          "desc": [
            "This gets the enchantments of the item, in a map containing the",
            "id of the enchantment as the key and the level of the enchantment as the value"
          ],
          "returns": {
            "type": "Map",
            "desc": "the enchantments of the item, map may be empty"
          },
          "examples": [
            "itemStack.getEnchantments();"
          ]
        },
        {
          "name": "getDurability",
          "is_arbitrary": false,
          "desc": [
            "This gets the durability of the item"
          ],
          "returns": {
            "type": "Number",
            "desc": "the durability of the item"
          },
          "examples": [
            "itemStack.getDurability();"
          ]
        },
        {
          "name": "getMaterial",
          "is_arbitrary": false,
          "desc": [
            "This gets the material of the ItemStack"
          ],
          "returns": {
            "type": "Material",
            "desc": "the material of the ItemStack"
          },
          "examples": [
            "itemStack.getMaterial();"
          ]
        },
        {
          "name": "isNbtEqual",
          "is_arbitrary": false,
          "desc": [
            "This checks if the ItemStack has the same NBT data as the other given ItemStack"
          ],
          "params": [
            {
              "name": "itemStack",
              "type": "ItemStack",
              "desc": "the other ItemStack to compare to"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the ItemStack has the same NBT data as the other given ItemStack"
          },
          "examples": [
            "itemStack.isNbtEqual(Material.GOLD_INGOT.asItemStack());"
          ]
        },
        {
          "name": "getTranslatedName",
          "is_arbitrary": false,
          "desc": [
            "This gets the translated name of the ItemStack, for example",
            "'diamond_sword' would return 'Diamond Sword' if your language is English"
          ],
          "returns": {
            "type": "String",
            "desc": "the translated name of the ItemStack"
          },
          "examples": [
            "itemStack.getTranslatedName();"
          ]
        },
        {
          "name": "asEntity",
          "is_arbitrary": false,
          "desc": [
            "This creates an item entity with the item"
          ],
          "returns": {
            "type": "ItemEntity",
            "desc": "the entity of the ItemStack"
          },
          "throws": [
            "Item cannot be converted to an ItemEntity"
          ],
          "examples": [
            "itemStack.asEntity();"
          ]
        },
        {
          "name": "setItemLore",
          "is_arbitrary": false,
          "desc": [
            "This sets the lore of the ItemStack"
          ],
          "params": [
            {
              "name": "lore",
              "type": "List",
              "desc": "the lore of the ItemStack as a list of Text"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack with the new lore"
          },
          "examples": [
            "itemStack = Material.DIAMOND_PICKAXE.asItemStack();\nitemStack.setItemLore([\n    Text.of('This is a pickaxe'),\n    Text.of('It is made of diamond')\n]);\n"
          ]
        },
        {
          "name": "asBlock",
          "is_arbitrary": false,
          "desc": [
            "This gets the block of the ItemStack"
          ],
          "returns": {
            "type": "Block",
            "desc": "the block item of the ItemStack"
          },
          "throws": [
            "Item cannot be converted to a block"
          ],
          "examples": [
            "itemStack.asBlock();"
          ]
        },
        {
          "name": "setStackSize",
          "is_arbitrary": false,
          "desc": [
            "This sets the stack size of the ItemStack"
          ],
          "params": [
            {
              "name": "stackSize",
              "type": "Number",
              "desc": "the stack size of the ItemStack"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack with the new stack size"
          },
          "examples": [
            "itemStack.setStackSize(5);"
          ]
        },
        {
          "name": "isStackable",
          "is_arbitrary": false,
          "desc": [
            "This checks if the ItemStack is stackable"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the ItemStack is stackable, false otherwise"
          },
          "examples": [
            "itemStack.isStackable();"
          ]
        },
        {
          "name": "getMaxDurability",
          "is_arbitrary": false,
          "desc": [
            "This gets the max durability of the item"
          ],
          "returns": {
            "type": "Number",
            "desc": "the max durability of the item"
          },
          "examples": [
            "itemStack.getMaxDurability();"
          ]
        },
        {
          "name": "setNbt",
          "is_arbitrary": false,
          "desc": [
            "This sets the NBT data of the ItemStack"
          ],
          "params": [
            {
              "name": "nbtMap",
              "type": "Map",
              "desc": "the NBT data of the ItemStack as a map"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack with the new NBT data"
          },
          "examples": [
            "itemStack.setNbt({'Enchantments': []});"
          ]
        },
        {
          "name": "getCount",
          "is_arbitrary": false,
          "desc": [
            "This gets the count of the ItemStack, the amount of items in the stack"
          ],
          "returns": {
            "type": "Number",
            "desc": "the count of the ItemStack"
          },
          "examples": [
            "itemStack.getCount();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This creates an ItemStack from a material or a string"
          ],
          "params": [
            {
              "name": "material",
              "type": "MaterialLike",
              "desc": "the material, item stack, block, or string to create the ItemStack from"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the new ItemStack instance"
          },
          "examples": [
            "ItemStack.of('dirt');"
          ]
        },
        {
          "name": "parse",
          "is_arbitrary": false,
          "desc": [
            "This creates an ItemStack from a NBT string"
          ],
          "params": [
            {
              "name": "nbtString",
              "type": "String",
              "desc": "the NBT string to create the ItemStack from"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the new ItemStack instance"
          },
          "examples": [
            "ItemStack.parse('{id:\"minecraft:dirt\",Count:64}')"
          ]
        }
      ]
    },
    "World": {
      "name": "World",
      "desc": [
        "This class represents worlds, and allows you to interact with things inside of them."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getLight",
          "is_arbitrary": false,
          "desc": [
            "Gets the light level at the given position"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the light level"
          },
          "examples": [
            "world.getLight(new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "getLight",
          "is_arbitrary": false,
          "desc": [
            "Gets the light level at the given position"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the block"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the light level"
          },
          "examples": [
            "world.getLight(0, 100, 0);"
          ]
        },
        {
          "name": "getDimensionName",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'world.getId()' instead"
          ],
          "desc": [
            "This will get the id of the world"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the world, for example: 'overworld'"
          },
          "examples": [
            "world.getDimensionName();"
          ]
        },
        {
          "name": "getClosestPlayer",
          "is_arbitrary": false,
          "desc": [
            "This will get the closest player to another entity in the world"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "the entity to get the closest player to"
            },
            {
              "name": "maxDistance",
              "type": "Number",
              "desc": "the maximum distance to search for a player in blocks"
            }
          ],
          "returns": {
            "type": "Player",
            "desc": "the closest player, null if not found"
          },
          "examples": [
            "world.getClosestPlayer(Player.get(), 100);"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This will get the full id of the world"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id of the world, for example: 'minecraft:overworld'"
          },
          "examples": [
            "world.getFullId();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This will get the id of the world"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the world, for example: 'overworld'"
          },
          "examples": [
            "world.getId();"
          ]
        },
        {
          "name": "getAllEntities",
          "is_arbitrary": false,
          "desc": [
            "This will get all entities in the world"
          ],
          "returns": {
            "type": "List",
            "desc": "a list of all entities"
          },
          "examples": [
            "world.getAllEntities();"
          ]
        },
        {
          "name": "getBlockAt",
          "is_arbitrary": false,
          "desc": [
            "This function gets the block at the given coordinates"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "the block at the given coordinates"
          },
          "examples": [
            "world.getBlockAt(new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "getBlockAt",
          "is_arbitrary": false,
          "desc": [
            "This function gets the block at the given coordinates"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x coordinate"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y coordinate"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z coordinate"
            }
          ],
          "returns": {
            "type": "Block",
            "desc": "the block at the given coordinates"
          },
          "examples": [
            "world.getBlockAt(0, 100, 0);"
          ]
        },
        {
          "name": "getOtherPlayer",
          "is_arbitrary": false,
          "desc": [
            "This gets another player from the given username"
          ],
          "params": [
            {
              "name": "username",
              "type": "String",
              "desc": "the username of the other player"
            }
          ],
          "returns": {
            "type": "Player",
            "desc": "the other player, null if not found"
          },
          "examples": [
            "world.getOtherPlayer('senseiwells');"
          ]
        },
        {
          "name": "getEntityFromId",
          "is_arbitrary": false,
          "desc": [
            "This will get an entity from the given entity id"
          ],
          "params": [
            {
              "name": "entityId",
              "type": "Number",
              "desc": "the entity id"
            }
          ],
          "returns": {
            "type": "Entity",
            "desc": "the entity, null if not found"
          },
          "examples": [
            "world.getEntityFromId(1);"
          ]
        },
        {
          "name": "getEmittedRedstonePower",
          "is_arbitrary": false,
          "desc": [
            "Gets the emitted restone power at the given position and direction"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction to check, for example 'north', 'east', 'up', etc."
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the emitted redstone power"
          },
          "examples": [
            "world.getEmittedRedstonePower(new Pos(0, 100, 0), 'north');"
          ]
        },
        {
          "name": "getEmittedRedstonePower",
          "is_arbitrary": false,
          "desc": [
            "Gets the emitted restone power at the given position and direction"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the block"
            },
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction to check, for example 'north', 'east', 'up', etc."
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the emitted redstone power"
          },
          "examples": [
            "world.getEmittedRedstonePower(0, 100, 0, 'north');"
          ]
        },
        {
          "name": "setGhostBlock",
          "is_arbitrary": false,
          "deprecated": [
            "This function is dangerous, use at your own risk"
          ],
          "desc": [
            "This sets a ghost block in the world as if it were a real block, may cause issues"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "the block to set"
            },
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "examples": [
            "world.setGhostBlock(Material.BEDROCK.asBlock(), new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "setGhostBlock",
          "is_arbitrary": false,
          "deprecated": [
            "This function is dangerous, use at your own risk"
          ],
          "desc": [
            "This sets a ghost block in the world as if it were a real block, may cause issues"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "the block to set"
            },
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the block"
            }
          ],
          "examples": [
            "world.setGhostBlock(Material.BEDROCK.asBlock(), 0, 100, 0);"
          ]
        },
        {
          "name": "getAllOtherPlayers",
          "is_arbitrary": false,
          "desc": [
            "This will get all other players in the world"
          ],
          "returns": {
            "type": "List",
            "desc": "a list of all other players"
          },
          "examples": [
            "world.getAllOtherPlayers();"
          ]
        },
        {
          "name": "renderParticle",
          "is_arbitrary": false,
          "desc": [
            "This will render a particle in the world, you can find a list of all",
            "the particle ids [here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Particles)"
          ],
          "params": [
            {
              "name": "particleId",
              "type": "String",
              "desc": "the id of the particle"
            },
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the particle"
            }
          ],
          "throws": [
            "Particle Invalid"
          ],
          "examples": [
            "world.renderParticle('end_rod', pos);"
          ]
        },
        {
          "name": "renderParticle",
          "is_arbitrary": false,
          "desc": [
            "This will render a particle in the world, you can find a list of all",
            "the particle ids [here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Particles)"
          ],
          "params": [
            {
              "name": "particleId",
              "type": "String",
              "desc": "the id of the particle"
            },
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the particle"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the particle"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the particle"
            }
          ],
          "throws": [
            "Particle Invalid"
          ],
          "examples": [
            "world.renderParticle('end_rod', 10, 10, 10);"
          ]
        },
        {
          "name": "renderParticle",
          "is_arbitrary": false,
          "desc": [
            "This will render a particle in the world with a velocity, you can find a list of all",
            "the particle ids [here](https://minecraft.fandom.com/wiki/Java_Edition_data_values#Particles)"
          ],
          "params": [
            {
              "name": "particleId",
              "type": "String",
              "desc": "the id of the particle"
            },
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the particle"
            },
            {
              "name": "velX",
              "type": "Number",
              "desc": "the velocity of the particle on the x axis"
            },
            {
              "name": "velY",
              "type": "Number",
              "desc": "the velocity of the particle on the y axis"
            },
            {
              "name": "velZ",
              "type": "Number",
              "desc": "the velocity of the particle on the z axis"
            }
          ],
          "throws": [
            "Particle Invalid"
          ],
          "examples": [
            "world.renderParticle('end_rod', pos, 0.5, 0.5, 0.5);"
          ]
        },
        {
          "name": "getTimeOfDay",
          "is_arbitrary": false,
          "desc": [
            "This will get the time of day of the world",
            "info on the time of day [here](https://minecraft.fandom.com/wiki/Daylight_cycle)"
          ],
          "returns": {
            "type": "Number",
            "desc": "the time of day of the world, between 0 and 24000"
          },
          "examples": [
            "world.getTimeOfDay();"
          ]
        },
        {
          "name": "isThundering",
          "is_arbitrary": false,
          "desc": [
            "This will check if the world is currently thundering"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the world is currently thundering"
          },
          "examples": [
            "world.isThundering();"
          ]
        },
        {
          "name": "isAir",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the block at the given position is air"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the block"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the block is air"
          },
          "examples": [
            "world.isAir(new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "isAir",
          "is_arbitrary": false,
          "desc": [
            "Returns true if the block at the given position is air"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position of the block"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position of the block"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position of the block"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the block is air"
          },
          "examples": [
            "world.isAir(0, 100, 0);"
          ]
        },
        {
          "name": "isRaining",
          "is_arbitrary": false,
          "desc": [
            "This will check if the world is currently raining"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the world is currently raining"
          },
          "examples": [
            "world.isRaining();"
          ]
        },
        {
          "name": "getArea",
          "is_arbitrary": false,
          "desc": [
            "This gets a list of all block positions between the two positions"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "the first position"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "the second position"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of positions"
          },
          "examples": [
            "world.getArea(new Pos(0, 100, 0), new Pos(0, 100, 0));"
          ]
        },
        {
          "name": "getAreaOfBlocks",
          "is_arbitrary": false,
          "desc": [
            "This gets a list of all blocks (with positions) between the two positions"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "the first position"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "the second position"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of blocks"
          },
          "examples": [
            "world.getAreaOfBlocks(new Pos(0, 100, 0), new Pos(0, 100, 0));"
          ]
        }
      ],
      "static_methods": []
    },
    "Screen": {
      "name": "Screen",
      "desc": [
        "This allows you to get information about the player's current screen."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getTitle",
          "is_arbitrary": false,
          "desc": [
            "Gets the title of the specific screen"
          ],
          "returns": {
            "type": "String",
            "desc": "the screen title as text, this may include formatting, and custom names for the screen if applicable"
          },
          "examples": [
            "screen.getTitle()"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "Gets the name of the specific screen"
          ],
          "returns": {
            "type": "String",
            "desc": "the screen name, if you are in the creative menu it will return the name of the tab you are on"
          },
          "examples": [
            "screen.getName()"
          ]
        }
      ],
      "static_methods": []
    },
    "FakeScreen": {
      "name": "FakeScreen",
      "desc": [
        "This class extends Screen and so inherits all of their methods too,",
        "this class is used to create client side inventory screens."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "Creates a FakeScreen instance with given name and given amount of rows"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name of the screen"
            },
            {
              "name": "rows",
              "type": "Number",
              "desc": "the number of rows between 1 - 6"
            }
          ],
          "examples": [
            "new FakeScreen('MyScreen', 6);"
          ]
        }
      ],
      "methods": [
        {
          "name": "getStackForSlot",
          "is_arbitrary": false,
          "desc": [
            "Gets the stack for the given slot, if the slot is out of bounds it returns null"
          ],
          "params": [
            {
              "name": "slotNum",
              "type": "Number",
              "desc": "the slot number"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the stack for the given slot"
          },
          "examples": [
            "fakeScreen.getStackForSlot(0);"
          ]
        },
        {
          "name": "onClick",
          "is_arbitrary": false,
          "desc": [
            "This sets the callback for when a slot is clicked in the inventory"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the callback function which must have 3 parameters, which will be passed in when it is called, item, slotNum, action, being ItemStack, Number, and String respectively"
            }
          ],
          "examples": [
            "fakeScreen.onClick(fun(item, slotNum, action) {\n    // action can be any of the following:\n    // 'PICKUP', 'QUICK_MOVE', 'SWAP', 'CLONE', 'THROW', 'QUICK_CRAFT', or 'PICKUP_ALL'\n    print(action);\n});\n"
          ]
        },
        {
          "name": "setStackForSlot",
          "is_arbitrary": false,
          "desc": [
            "Sets the stack for the given slot, if the slot is out of bounds it won't be set"
          ],
          "params": [
            {
              "name": "slotNum",
              "type": "Number",
              "desc": "the slot number"
            },
            {
              "name": "stack",
              "type": "ItemStack",
              "desc": "the stack to set"
            }
          ],
          "examples": [
            "fakeScreen.setStackForSlot(0, Material.DIAMOND_BLOCK.asItemStack());"
          ]
        }
      ],
      "static_methods": []
    },
    "MerchantScreen": {
      "name": "MerchantScreen",
      "desc": [
        "This class extends Screen and so inherits all of their methods too,",
        "this class is used to add functionality to trading screens."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "clearTrade",
          "is_arbitrary": false,
          "desc": [
            "This clears the currently selected trade"
          ],
          "throws": [
            "Not in merchant gui"
          ],
          "examples": [
            "screen.clearTrade();"
          ]
        },
        {
          "name": "isTradeSelected",
          "is_arbitrary": false,
          "desc": [
            "This returns true if a trade is selected"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if a trade is selected"
          },
          "examples": [
            "screen.isTradeSelected();"
          ]
        },
        {
          "name": "isTradeDisabled",
          "is_arbitrary": false,
          "desc": [
            "This returns true if a trade is disabled at an index"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if a trade is disabled"
          },
          "examples": [
            "screen.isTradeDisabled(1);"
          ]
        },
        {
          "name": "getVillagerProfession",
          "is_arbitrary": false,
          "desc": [
            "This gets the profession of the villager"
          ],
          "returns": {
            "type": "String",
            "desc": "the profession of the villager, for example: 'armorer', 'mason', 'weaponsmith'"
          },
          "throws": [
            "Merchant isn't a villager"
          ],
          "examples": [
            "screen.getVillagerProfession();"
          ]
        },
        {
          "name": "getTradeList",
          "is_arbitrary": false,
          "desc": [
            "This gets a list of all the merchant's trades"
          ],
          "returns": {
            "type": "List",
            "desc": "the list of all the Trades"
          },
          "examples": [
            "screen.getTradeList();"
          ]
        },
        {
          "name": "tradeSelectedAndThrow",
          "is_arbitrary": false,
          "desc": [
            "This trades the currently selected trade and throws the items that were traded"
          ],
          "throws": [
            "Not in merchant gui"
          ],
          "examples": [
            "screen.tradeSelectedAndThrow();"
          ]
        },
        {
          "name": "getTradeItemForIndex",
          "is_arbitrary": false,
          "desc": [
            "This gets the item stack of a trade at a certain index"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item stack of the trade"
          },
          "throws": [
            "Not in merchant gui",
            "That trade is out of bounds"
          ],
          "examples": [
            "screen.getTradeItemForIndex(0);"
          ]
        },
        {
          "name": "tradeSelected",
          "is_arbitrary": false,
          "desc": [
            "This trades the currently selected trade"
          ],
          "throws": [
            "Not in merchant gui"
          ],
          "examples": [
            "screen.tradeSelected();"
          ]
        },
        {
          "name": "getTradeListSize",
          "is_arbitrary": false,
          "desc": [
            "This gets the size of all the trades available"
          ],
          "returns": {
            "type": "Number",
            "desc": "the size of the trade list"
          },
          "examples": [
            "screen.getTradeListSize();"
          ]
        },
        {
          "name": "selectTrade",
          "is_arbitrary": false,
          "desc": [
            "This selects the currently selected trade, as if you were to click it"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "throws": [
            "Not in merchant gui"
          ],
          "examples": [
            "screen.selectTrade(0);"
          ]
        },
        {
          "name": "getPriceForIndex",
          "is_arbitrary": false,
          "desc": [
            "This gets the price of a trade at a certain index"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the price of the trade"
          },
          "throws": [
            "Not in merchant gui",
            "That trade is out of bounds"
          ],
          "examples": [
            "screen.getPriceForIndex(0);"
          ]
        },
        {
          "name": "getVillagerLevel",
          "is_arbitrary": false,
          "desc": [
            "This gets the level of the villager"
          ],
          "returns": {
            "type": "Number",
            "desc": "the level of the villager"
          },
          "throws": [
            "Merchant isn't a villager"
          ],
          "examples": [
            "screen.getVillagerLevel();"
          ]
        },
        {
          "name": "getIndexOfTradeItem",
          "is_arbitrary": false,
          "desc": [
            "This gets the index of a trade for a certain item"
          ],
          "params": [
            {
              "name": "materialLike",
              "type": "MaterialLike",
              "desc": "the item to get the index of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the index of the trade"
          },
          "throws": [
            "Not in merchant gui"
          ],
          "examples": [
            "screen.getIndexOfTradeItem(Material.DIAMOND_PICKAXE.asItemStack());"
          ]
        },
        {
          "name": "doesVillagerHaveTrade",
          "is_arbitrary": false,
          "desc": [
            "This checks if the villager has a trade for a certain item"
          ],
          "params": [
            {
              "name": "materialLike",
              "type": "MaterialLike",
              "desc": "the item or material to check for"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the villager has a trade for the item, false otherwise"
          },
          "throws": [
            "Not in merchant gui",
            "That trade is out of bounds"
          ],
          "examples": [
            "screen.doesVillagerHaveTrade(Material.DIAMOND_PICKAXE.asItemStack());"
          ]
        },
        {
          "name": "tradeIndex",
          "is_arbitrary": false,
          "desc": [
            "This makes your player trade with the merchant at a certain index"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the trade"
            }
          ],
          "throws": [
            "Not in merchant gui"
          ],
          "examples": [
            "screen.tradeIndex(0);"
          ]
        }
      ],
      "static_methods": []
    },
    "Text": {
      "name": "Text",
      "desc": [
        "This class is used to create formatted strings used inside Minecraft."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "format",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add a formatting to a text instance",
            "A list of formatting names can be found [here](https://minecraft.fandom.com/wiki/Formatting_codes)"
          ],
          "params": [
            {
              "name": "formatting",
              "type": "String",
              "desc": "the name of the formatting"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance with the formatting added"
          },
          "throws": [
            "Invalid formatting: ..."
          ],
          "examples": [
            "text.format('DARK_RED').format('BOLD');"
          ]
        },
        {
          "name": "withHoverEvent",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add a hover event to a text instance",
            "The possible events are: 'show_text', 'show_item', 'show_entity'"
          ],
          "params": [
            {
              "name": "event",
              "type": "String",
              "desc": "the name of the event"
            },
            {
              "name": "value",
              "type": "Value",
              "desc": "the value associated with the event"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance with the hover event"
          },
          "throws": [
            "Invalid action: ..."
          ],
          "examples": [
            "text = Text.of(\"Hello World!\");\n\n// Examples of hover events\ntext.withHoverEvent(\"show_text\", Text.of(\"Hello world!\"));\ntext.withHoverEvent(\"show_item\", Material.DIAMOND_SWORD.asItemStack());\ntext.withHoverEvent(\"show_entity\", Player.get());\n"
          ]
        },
        {
          "name": "withClickEvent",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add a click event to a text instance",
            "The possible events are: 'open_url', 'open_file', 'run_command', 'suggest_command', 'copy_to_clipboard', 'run_function'"
          ],
          "params": [
            {
              "name": "event",
              "type": "String",
              "desc": "the name of the event"
            },
            {
              "name": "value",
              "type": "String",
              "desc": "the value associated with the event"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance with the click event"
          },
          "throws": [
            "Invalid action: ..."
          ],
          "examples": [
            "text = Text.of(\"Hello World!\");\n\n// Examples of click events\ntext.withClickEvent(\"open_url\", \"https://youtu.be/dQw4w9WgXcQ\");\ntext.withClickEvent(\"open_file\", \"C:/Users/user/Desktop/thing.txt\");\ntext.withClickEvent(\"run_command\", \"/gamemode creative\");\ntext.withClickEvent(\"suggest_command\", \"/gamemode survival\");\ntext.withClickEvent(\"copy_to_clipboard\", \"Ooops!\");\ntext.withClickEvent(\"run_function\", fun() {\n\tprint(\"Text was clicked!\");\n});\n"
          ]
        },
        {
          "name": "append",
          "is_arbitrary": false,
          "desc": [
            "This allows you to append a text instance to another text instance"
          ],
          "params": [
            {
              "name": "otherText",
              "type": "Text",
              "desc": "the text instance to append to"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance with the appended text"
          },
          "examples": [
            "Text.of('Hello').append(Text.of(' world!'));"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This converts a string into a text instance"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "The string to convert into a text instance"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance from the string"
          },
          "examples": [
            "Text.of('Hello World!');"
          ]
        },
        {
          "name": "parse",
          "is_arbitrary": false,
          "desc": [
            "This converts a text json into a text instance"
          ],
          "params": [
            {
              "name": "textJson",
              "type": "String",
              "desc": "The string in json format, or a Json value itself"
            }
          ],
          "returns": {
            "type": "Text",
            "desc": "the text instance from the json"
          },
          "examples": [
            "Text.parse('{\"text\":\"Hello World!\",\"color\":\"white\",\"italic\":\"true\"}');"
          ]
        }
      ]
    },
    "Material": {
      "name": "Material",
      "desc": [
        "This class represents all possible item and block types",
        "and allows you to convert them into instances of ItemStacks and Blocks"
      ],
      "import_path": "Minecraft",
      "static_members": [
        {
          "name": "ALL",
          "assignable": false,
          "desc": [
            "This is a list of all materials in the game, including items and blocks, each material also has it's own member"
          ],
          "type": "Material",
          "examples": [
            "Material.ALL;"
          ]
        },
        {
          "name": "ACACIA_BOAT"
        },
        {
          "name": "ACACIA_BUTTON"
        },
        {
          "name": "ACACIA_DOOR"
        },
        {
          "name": "ACACIA_FENCE"
        },
        {
          "name": "ACACIA_FENCE_GATE"
        },
        {
          "name": "ACACIA_LEAVES"
        },
        {
          "name": "ACACIA_LOG"
        },
        {
          "name": "ACACIA_PLANKS"
        },
        {
          "name": "ACACIA_PRESSURE_PLATE"
        },
        {
          "name": "ACACIA_SAPLING"
        },
        {
          "name": "ACACIA_SIGN"
        },
        {
          "name": "ACACIA_SLAB"
        },
        {
          "name": "ACACIA_STAIRS"
        },
        {
          "name": "ACACIA_TRAPDOOR"
        },
        {
          "name": "ACACIA_WALL_SIGN"
        },
        {
          "name": "ACACIA_WOOD"
        },
        {
          "name": "ACTIVATOR_RAIL"
        },
        {
          "name": "AIR"
        },
        {
          "name": "ALLIUM"
        },
        {
          "name": "AMETHYST_BLOCK"
        },
        {
          "name": "AMETHYST_CLUSTER"
        },
        {
          "name": "AMETHYST_SHARD"
        },
        {
          "name": "ANCIENT_DEBRIS"
        },
        {
          "name": "ANDESITE"
        },
        {
          "name": "ANDESITE_SLAB"
        },
        {
          "name": "ANDESITE_STAIRS"
        },
        {
          "name": "ANDESITE_WALL"
        },
        {
          "name": "ANVIL"
        },
        {
          "name": "APPLE"
        },
        {
          "name": "ARMOR_STAND"
        },
        {
          "name": "ARROW"
        },
        {
          "name": "ATTACHED_MELON_STEM"
        },
        {
          "name": "ATTACHED_PUMPKIN_STEM"
        },
        {
          "name": "AXOLOTL_BUCKET"
        },
        {
          "name": "AXOLOTL_SPAWN_EGG"
        },
        {
          "name": "AZALEA"
        },
        {
          "name": "AZALEA_LEAVES"
        },
        {
          "name": "AZURE_BLUET"
        },
        {
          "name": "BAKED_POTATO"
        },
        {
          "name": "BAMBOO"
        },
        {
          "name": "BAMBOO_SAPLING"
        },
        {
          "name": "BARREL"
        },
        {
          "name": "BARRIER"
        },
        {
          "name": "BASALT"
        },
        {
          "name": "BAT_SPAWN_EGG"
        },
        {
          "name": "BEACON"
        },
        {
          "name": "BEDROCK"
        },
        {
          "name": "BEEF"
        },
        {
          "name": "BEEHIVE"
        },
        {
          "name": "BEETROOT"
        },
        {
          "name": "BEETROOTS"
        },
        {
          "name": "BEETROOT_SEEDS"
        },
        {
          "name": "BEETROOT_SOUP"
        },
        {
          "name": "BEE_NEST"
        },
        {
          "name": "BEE_SPAWN_EGG"
        },
        {
          "name": "BELL"
        },
        {
          "name": "BIG_DRIPLEAF"
        },
        {
          "name": "BIG_DRIPLEAF_STEM"
        },
        {
          "name": "BIRCH_BOAT"
        },
        {
          "name": "BIRCH_BUTTON"
        },
        {
          "name": "BIRCH_DOOR"
        },
        {
          "name": "BIRCH_FENCE"
        },
        {
          "name": "BIRCH_FENCE_GATE"
        },
        {
          "name": "BIRCH_LEAVES"
        },
        {
          "name": "BIRCH_LOG"
        },
        {
          "name": "BIRCH_PLANKS"
        },
        {
          "name": "BIRCH_PRESSURE_PLATE"
        },
        {
          "name": "BIRCH_SAPLING"
        },
        {
          "name": "BIRCH_SIGN"
        },
        {
          "name": "BIRCH_SLAB"
        },
        {
          "name": "BIRCH_STAIRS"
        },
        {
          "name": "BIRCH_TRAPDOOR"
        },
        {
          "name": "BIRCH_WALL_SIGN"
        },
        {
          "name": "BIRCH_WOOD"
        },
        {
          "name": "BLACKSTONE"
        },
        {
          "name": "BLACKSTONE_SLAB"
        },
        {
          "name": "BLACKSTONE_STAIRS"
        },
        {
          "name": "BLACKSTONE_WALL"
        },
        {
          "name": "BLACK_BANNER"
        },
        {
          "name": "BLACK_BED"
        },
        {
          "name": "BLACK_CANDLE"
        },
        {
          "name": "BLACK_CANDLE_CAKE"
        },
        {
          "name": "BLACK_CARPET"
        },
        {
          "name": "BLACK_CONCRETE"
        },
        {
          "name": "BLACK_CONCRETE_POWDER"
        },
        {
          "name": "BLACK_DYE"
        },
        {
          "name": "BLACK_GLAZED_TERRACOTTA"
        },
        {
          "name": "BLACK_SHULKER_BOX"
        },
        {
          "name": "BLACK_STAINED_GLASS"
        },
        {
          "name": "BLACK_STAINED_GLASS_PANE"
        },
        {
          "name": "BLACK_TERRACOTTA"
        },
        {
          "name": "BLACK_WALL_BANNER"
        },
        {
          "name": "BLACK_WOOL"
        },
        {
          "name": "BLAST_FURNACE"
        },
        {
          "name": "BLAZE_POWDER"
        },
        {
          "name": "BLAZE_ROD"
        },
        {
          "name": "BLAZE_SPAWN_EGG"
        },
        {
          "name": "BLUE_BANNER"
        },
        {
          "name": "BLUE_BED"
        },
        {
          "name": "BLUE_CANDLE"
        },
        {
          "name": "BLUE_CANDLE_CAKE"
        },
        {
          "name": "BLUE_CARPET"
        },
        {
          "name": "BLUE_CONCRETE"
        },
        {
          "name": "BLUE_CONCRETE_POWDER"
        },
        {
          "name": "BLUE_DYE"
        },
        {
          "name": "BLUE_GLAZED_TERRACOTTA"
        },
        {
          "name": "BLUE_ICE"
        },
        {
          "name": "BLUE_ORCHID"
        },
        {
          "name": "BLUE_SHULKER_BOX"
        },
        {
          "name": "BLUE_STAINED_GLASS"
        },
        {
          "name": "BLUE_STAINED_GLASS_PANE"
        },
        {
          "name": "BLUE_TERRACOTTA"
        },
        {
          "name": "BLUE_WALL_BANNER"
        },
        {
          "name": "BLUE_WOOL"
        },
        {
          "name": "BONE"
        },
        {
          "name": "BONE_BLOCK"
        },
        {
          "name": "BONE_MEAL"
        },
        {
          "name": "BOOK"
        },
        {
          "name": "BOOKSHELF"
        },
        {
          "name": "BOW"
        },
        {
          "name": "BOWL"
        },
        {
          "name": "BRAIN_CORAL"
        },
        {
          "name": "BRAIN_CORAL_BLOCK"
        },
        {
          "name": "BRAIN_CORAL_FAN"
        },
        {
          "name": "BRAIN_CORAL_WALL_FAN"
        },
        {
          "name": "BREAD"
        },
        {
          "name": "BREWING_STAND"
        },
        {
          "name": "BRICK"
        },
        {
          "name": "BRICKS"
        },
        {
          "name": "BRICK_SLAB"
        },
        {
          "name": "BRICK_STAIRS"
        },
        {
          "name": "BRICK_WALL"
        },
        {
          "name": "BROWN_BANNER"
        },
        {
          "name": "BROWN_BED"
        },
        {
          "name": "BROWN_CANDLE"
        },
        {
          "name": "BROWN_CANDLE_CAKE"
        },
        {
          "name": "BROWN_CARPET"
        },
        {
          "name": "BROWN_CONCRETE"
        },
        {
          "name": "BROWN_CONCRETE_POWDER"
        },
        {
          "name": "BROWN_DYE"
        },
        {
          "name": "BROWN_GLAZED_TERRACOTTA"
        },
        {
          "name": "BROWN_MUSHROOM"
        },
        {
          "name": "BROWN_MUSHROOM_BLOCK"
        },
        {
          "name": "BROWN_SHULKER_BOX"
        },
        {
          "name": "BROWN_STAINED_GLASS"
        },
        {
          "name": "BROWN_STAINED_GLASS_PANE"
        },
        {
          "name": "BROWN_TERRACOTTA"
        },
        {
          "name": "BROWN_WALL_BANNER"
        },
        {
          "name": "BROWN_WOOL"
        },
        {
          "name": "BUBBLE_COLUMN"
        },
        {
          "name": "BUBBLE_CORAL"
        },
        {
          "name": "BUBBLE_CORAL_BLOCK"
        },
        {
          "name": "BUBBLE_CORAL_FAN"
        },
        {
          "name": "BUBBLE_CORAL_WALL_FAN"
        },
        {
          "name": "BUCKET"
        },
        {
          "name": "BUDDING_AMETHYST"
        },
        {
          "name": "BUNDLE"
        },
        {
          "name": "CACTUS"
        },
        {
          "name": "CAKE"
        },
        {
          "name": "CALCITE"
        },
        {
          "name": "CAMPFIRE"
        },
        {
          "name": "CANDLE"
        },
        {
          "name": "CANDLE_CAKE"
        },
        {
          "name": "CARROT"
        },
        {
          "name": "CARROTS"
        },
        {
          "name": "CARROT_ON_A_STICK"
        },
        {
          "name": "CARTOGRAPHY_TABLE"
        },
        {
          "name": "CARVED_PUMPKIN"
        },
        {
          "name": "CAT_SPAWN_EGG"
        },
        {
          "name": "CAULDRON"
        },
        {
          "name": "CAVE_AIR"
        },
        {
          "name": "CAVE_SPIDER_SPAWN_EGG"
        },
        {
          "name": "CAVE_VINES"
        },
        {
          "name": "CAVE_VINES_PLANT"
        },
        {
          "name": "CHAIN"
        },
        {
          "name": "CHAINMAIL_BOOTS"
        },
        {
          "name": "CHAINMAIL_CHESTPLATE"
        },
        {
          "name": "CHAINMAIL_HELMET"
        },
        {
          "name": "CHAINMAIL_LEGGINGS"
        },
        {
          "name": "CHAIN_COMMAND_BLOCK"
        },
        {
          "name": "CHARCOAL"
        },
        {
          "name": "CHEST"
        },
        {
          "name": "CHEST_MINECART"
        },
        {
          "name": "CHICKEN"
        },
        {
          "name": "CHICKEN_SPAWN_EGG"
        },
        {
          "name": "CHIPPED_ANVIL"
        },
        {
          "name": "CHISELED_DEEPSLATE"
        },
        {
          "name": "CHISELED_NETHER_BRICKS"
        },
        {
          "name": "CHISELED_POLISHED_BLACKSTONE"
        },
        {
          "name": "CHISELED_QUARTZ_BLOCK"
        },
        {
          "name": "CHISELED_RED_SANDSTONE"
        },
        {
          "name": "CHISELED_SANDSTONE"
        },
        {
          "name": "CHISELED_STONE_BRICKS"
        },
        {
          "name": "CHORUS_FLOWER"
        },
        {
          "name": "CHORUS_FRUIT"
        },
        {
          "name": "CHORUS_PLANT"
        },
        {
          "name": "CLAY"
        },
        {
          "name": "CLAY_BALL"
        },
        {
          "name": "CLOCK"
        },
        {
          "name": "COAL"
        },
        {
          "name": "COAL_BLOCK"
        },
        {
          "name": "COAL_ORE"
        },
        {
          "name": "COARSE_DIRT"
        },
        {
          "name": "COBBLED_DEEPSLATE"
        },
        {
          "name": "COBBLED_DEEPSLATE_SLAB"
        },
        {
          "name": "COBBLED_DEEPSLATE_STAIRS"
        },
        {
          "name": "COBBLED_DEEPSLATE_WALL"
        },
        {
          "name": "COBBLESTONE"
        },
        {
          "name": "COBBLESTONE_SLAB"
        },
        {
          "name": "COBBLESTONE_STAIRS"
        },
        {
          "name": "COBBLESTONE_WALL"
        },
        {
          "name": "COBWEB"
        },
        {
          "name": "COCOA"
        },
        {
          "name": "COCOA_BEANS"
        },
        {
          "name": "COD"
        },
        {
          "name": "COD_BUCKET"
        },
        {
          "name": "COD_SPAWN_EGG"
        },
        {
          "name": "COMMAND_BLOCK"
        },
        {
          "name": "COMMAND_BLOCK_MINECART"
        },
        {
          "name": "COMPARATOR"
        },
        {
          "name": "COMPASS"
        },
        {
          "name": "COMPOSTER"
        },
        {
          "name": "CONDUIT"
        },
        {
          "name": "COOKED_BEEF"
        },
        {
          "name": "COOKED_CHICKEN"
        },
        {
          "name": "COOKED_COD"
        },
        {
          "name": "COOKED_MUTTON"
        },
        {
          "name": "COOKED_PORKCHOP"
        },
        {
          "name": "COOKED_RABBIT"
        },
        {
          "name": "COOKED_SALMON"
        },
        {
          "name": "COOKIE"
        },
        {
          "name": "COPPER_BLOCK"
        },
        {
          "name": "COPPER_INGOT"
        },
        {
          "name": "COPPER_ORE"
        },
        {
          "name": "CORNFLOWER"
        },
        {
          "name": "COW_SPAWN_EGG"
        },
        {
          "name": "CRACKED_DEEPSLATE_BRICKS"
        },
        {
          "name": "CRACKED_DEEPSLATE_TILES"
        },
        {
          "name": "CRACKED_NETHER_BRICKS"
        },
        {
          "name": "CRACKED_POLISHED_BLACKSTONE_BRICKS"
        },
        {
          "name": "CRACKED_STONE_BRICKS"
        },
        {
          "name": "CRAFTING_TABLE"
        },
        {
          "name": "CREEPER_BANNER_PATTERN"
        },
        {
          "name": "CREEPER_HEAD"
        },
        {
          "name": "CREEPER_SPAWN_EGG"
        },
        {
          "name": "CREEPER_WALL_HEAD"
        },
        {
          "name": "CRIMSON_BUTTON"
        },
        {
          "name": "CRIMSON_DOOR"
        },
        {
          "name": "CRIMSON_FENCE"
        },
        {
          "name": "CRIMSON_FENCE_GATE"
        },
        {
          "name": "CRIMSON_FUNGUS"
        },
        {
          "name": "CRIMSON_HYPHAE"
        },
        {
          "name": "CRIMSON_NYLIUM"
        },
        {
          "name": "CRIMSON_PLANKS"
        },
        {
          "name": "CRIMSON_PRESSURE_PLATE"
        },
        {
          "name": "CRIMSON_ROOTS"
        },
        {
          "name": "CRIMSON_SIGN"
        },
        {
          "name": "CRIMSON_SLAB"
        },
        {
          "name": "CRIMSON_STAIRS"
        },
        {
          "name": "CRIMSON_STEM"
        },
        {
          "name": "CRIMSON_TRAPDOOR"
        },
        {
          "name": "CRIMSON_WALL_SIGN"
        },
        {
          "name": "CROSSBOW"
        },
        {
          "name": "CRYING_OBSIDIAN"
        },
        {
          "name": "CUT_COPPER"
        },
        {
          "name": "CUT_COPPER_SLAB"
        },
        {
          "name": "CUT_COPPER_STAIRS"
        },
        {
          "name": "CUT_RED_SANDSTONE"
        },
        {
          "name": "CUT_RED_SANDSTONE_SLAB"
        },
        {
          "name": "CUT_SANDSTONE"
        },
        {
          "name": "CUT_SANDSTONE_SLAB"
        },
        {
          "name": "CYAN_BANNER"
        },
        {
          "name": "CYAN_BED"
        },
        {
          "name": "CYAN_CANDLE"
        },
        {
          "name": "CYAN_CANDLE_CAKE"
        },
        {
          "name": "CYAN_CARPET"
        },
        {
          "name": "CYAN_CONCRETE"
        },
        {
          "name": "CYAN_CONCRETE_POWDER"
        },
        {
          "name": "CYAN_DYE"
        },
        {
          "name": "CYAN_GLAZED_TERRACOTTA"
        },
        {
          "name": "CYAN_SHULKER_BOX"
        },
        {
          "name": "CYAN_STAINED_GLASS"
        },
        {
          "name": "CYAN_STAINED_GLASS_PANE"
        },
        {
          "name": "CYAN_TERRACOTTA"
        },
        {
          "name": "CYAN_WALL_BANNER"
        },
        {
          "name": "CYAN_WOOL"
        },
        {
          "name": "DAMAGED_ANVIL"
        },
        {
          "name": "DANDELION"
        },
        {
          "name": "DARK_OAK_BOAT"
        },
        {
          "name": "DARK_OAK_BUTTON"
        },
        {
          "name": "DARK_OAK_DOOR"
        },
        {
          "name": "DARK_OAK_FENCE"
        },
        {
          "name": "DARK_OAK_FENCE_GATE"
        },
        {
          "name": "DARK_OAK_LEAVES"
        },
        {
          "name": "DARK_OAK_LOG"
        },
        {
          "name": "DARK_OAK_PLANKS"
        },
        {
          "name": "DARK_OAK_PRESSURE_PLATE"
        },
        {
          "name": "DARK_OAK_SAPLING"
        },
        {
          "name": "DARK_OAK_SIGN"
        },
        {
          "name": "DARK_OAK_SLAB"
        },
        {
          "name": "DARK_OAK_STAIRS"
        },
        {
          "name": "DARK_OAK_TRAPDOOR"
        },
        {
          "name": "DARK_OAK_WALL_SIGN"
        },
        {
          "name": "DARK_OAK_WOOD"
        },
        {
          "name": "DARK_PRISMARINE"
        },
        {
          "name": "DARK_PRISMARINE_SLAB"
        },
        {
          "name": "DARK_PRISMARINE_STAIRS"
        },
        {
          "name": "DAYLIGHT_DETECTOR"
        },
        {
          "name": "DEAD_BRAIN_CORAL"
        },
        {
          "name": "DEAD_BRAIN_CORAL_BLOCK"
        },
        {
          "name": "DEAD_BRAIN_CORAL_FAN"
        },
        {
          "name": "DEAD_BRAIN_CORAL_WALL_FAN"
        },
        {
          "name": "DEAD_BUBBLE_CORAL"
        },
        {
          "name": "DEAD_BUBBLE_CORAL_BLOCK"
        },
        {
          "name": "DEAD_BUBBLE_CORAL_FAN"
        },
        {
          "name": "DEAD_BUBBLE_CORAL_WALL_FAN"
        },
        {
          "name": "DEAD_BUSH"
        },
        {
          "name": "DEAD_FIRE_CORAL"
        },
        {
          "name": "DEAD_FIRE_CORAL_BLOCK"
        },
        {
          "name": "DEAD_FIRE_CORAL_FAN"
        },
        {
          "name": "DEAD_FIRE_CORAL_WALL_FAN"
        },
        {
          "name": "DEAD_HORN_CORAL"
        },
        {
          "name": "DEAD_HORN_CORAL_BLOCK"
        },
        {
          "name": "DEAD_HORN_CORAL_FAN"
        },
        {
          "name": "DEAD_HORN_CORAL_WALL_FAN"
        },
        {
          "name": "DEAD_TUBE_CORAL"
        },
        {
          "name": "DEAD_TUBE_CORAL_BLOCK"
        },
        {
          "name": "DEAD_TUBE_CORAL_FAN"
        },
        {
          "name": "DEAD_TUBE_CORAL_WALL_FAN"
        },
        {
          "name": "DEBUG_STICK"
        },
        {
          "name": "DEEPSLATE"
        },
        {
          "name": "DEEPSLATE_BRICKS"
        },
        {
          "name": "DEEPSLATE_BRICK_SLAB"
        },
        {
          "name": "DEEPSLATE_BRICK_STAIRS"
        },
        {
          "name": "DEEPSLATE_BRICK_WALL"
        },
        {
          "name": "DEEPSLATE_COAL_ORE"
        },
        {
          "name": "DEEPSLATE_COPPER_ORE"
        },
        {
          "name": "DEEPSLATE_DIAMOND_ORE"
        },
        {
          "name": "DEEPSLATE_EMERALD_ORE"
        },
        {
          "name": "DEEPSLATE_GOLD_ORE"
        },
        {
          "name": "DEEPSLATE_IRON_ORE"
        },
        {
          "name": "DEEPSLATE_LAPIS_ORE"
        },
        {
          "name": "DEEPSLATE_REDSTONE_ORE"
        },
        {
          "name": "DEEPSLATE_TILES"
        },
        {
          "name": "DEEPSLATE_TILE_SLAB"
        },
        {
          "name": "DEEPSLATE_TILE_STAIRS"
        },
        {
          "name": "DEEPSLATE_TILE_WALL"
        },
        {
          "name": "DETECTOR_RAIL"
        },
        {
          "name": "DIAMOND"
        },
        {
          "name": "DIAMOND_AXE"
        },
        {
          "name": "DIAMOND_BLOCK"
        },
        {
          "name": "DIAMOND_BOOTS"
        },
        {
          "name": "DIAMOND_CHESTPLATE"
        },
        {
          "name": "DIAMOND_HELMET"
        },
        {
          "name": "DIAMOND_HOE"
        },
        {
          "name": "DIAMOND_HORSE_ARMOR"
        },
        {
          "name": "DIAMOND_LEGGINGS"
        },
        {
          "name": "DIAMOND_ORE"
        },
        {
          "name": "DIAMOND_PICKAXE"
        },
        {
          "name": "DIAMOND_SHOVEL"
        },
        {
          "name": "DIAMOND_SWORD"
        },
        {
          "name": "DIORITE"
        },
        {
          "name": "DIORITE_SLAB"
        },
        {
          "name": "DIORITE_STAIRS"
        },
        {
          "name": "DIORITE_WALL"
        },
        {
          "name": "DIRT"
        },
        {
          "name": "DIRT_PATH"
        },
        {
          "name": "DISPENSER"
        },
        {
          "name": "DOLPHIN_SPAWN_EGG"
        },
        {
          "name": "DONKEY_SPAWN_EGG"
        },
        {
          "name": "DRAGON_BREATH"
        },
        {
          "name": "DRAGON_EGG"
        },
        {
          "name": "DRAGON_HEAD"
        },
        {
          "name": "DRAGON_WALL_HEAD"
        },
        {
          "name": "DRIED_KELP"
        },
        {
          "name": "DRIED_KELP_BLOCK"
        },
        {
          "name": "DRIPSTONE_BLOCK"
        },
        {
          "name": "DROPPER"
        },
        {
          "name": "DROWNED_SPAWN_EGG"
        },
        {
          "name": "EGG"
        },
        {
          "name": "ELDER_GUARDIAN_SPAWN_EGG"
        },
        {
          "name": "ELYTRA"
        },
        {
          "name": "EMERALD"
        },
        {
          "name": "EMERALD_BLOCK"
        },
        {
          "name": "EMERALD_ORE"
        },
        {
          "name": "ENCHANTED_BOOK"
        },
        {
          "name": "ENCHANTED_GOLDEN_APPLE"
        },
        {
          "name": "ENCHANTING_TABLE"
        },
        {
          "name": "ENDERMAN_SPAWN_EGG"
        },
        {
          "name": "ENDERMITE_SPAWN_EGG"
        },
        {
          "name": "ENDER_CHEST"
        },
        {
          "name": "ENDER_EYE"
        },
        {
          "name": "ENDER_PEARL"
        },
        {
          "name": "END_CRYSTAL"
        },
        {
          "name": "END_GATEWAY"
        },
        {
          "name": "END_PORTAL"
        },
        {
          "name": "END_PORTAL_FRAME"
        },
        {
          "name": "END_ROD"
        },
        {
          "name": "END_STONE"
        },
        {
          "name": "END_STONE_BRICKS"
        },
        {
          "name": "END_STONE_BRICK_SLAB"
        },
        {
          "name": "END_STONE_BRICK_STAIRS"
        },
        {
          "name": "END_STONE_BRICK_WALL"
        },
        {
          "name": "EVOKER_SPAWN_EGG"
        },
        {
          "name": "EXPERIENCE_BOTTLE"
        },
        {
          "name": "EXPOSED_COPPER"
        },
        {
          "name": "EXPOSED_CUT_COPPER"
        },
        {
          "name": "EXPOSED_CUT_COPPER_SLAB"
        },
        {
          "name": "EXPOSED_CUT_COPPER_STAIRS"
        },
        {
          "name": "FARMLAND"
        },
        {
          "name": "FEATHER"
        },
        {
          "name": "FERMENTED_SPIDER_EYE"
        },
        {
          "name": "FERN"
        },
        {
          "name": "FILLED_MAP"
        },
        {
          "name": "FIRE"
        },
        {
          "name": "FIREWORK_ROCKET"
        },
        {
          "name": "FIREWORK_STAR"
        },
        {
          "name": "FIRE_CHARGE"
        },
        {
          "name": "FIRE_CORAL"
        },
        {
          "name": "FIRE_CORAL_BLOCK"
        },
        {
          "name": "FIRE_CORAL_FAN"
        },
        {
          "name": "FIRE_CORAL_WALL_FAN"
        },
        {
          "name": "FISHING_ROD"
        },
        {
          "name": "FLETCHING_TABLE"
        },
        {
          "name": "FLINT"
        },
        {
          "name": "FLINT_AND_STEEL"
        },
        {
          "name": "FLOWERING_AZALEA"
        },
        {
          "name": "FLOWERING_AZALEA_LEAVES"
        },
        {
          "name": "FLOWER_BANNER_PATTERN"
        },
        {
          "name": "FLOWER_POT"
        },
        {
          "name": "FOX_SPAWN_EGG"
        },
        {
          "name": "FROSTED_ICE"
        },
        {
          "name": "FURNACE"
        },
        {
          "name": "FURNACE_MINECART"
        },
        {
          "name": "GHAST_SPAWN_EGG"
        },
        {
          "name": "GHAST_TEAR"
        },
        {
          "name": "GILDED_BLACKSTONE"
        },
        {
          "name": "GLASS"
        },
        {
          "name": "GLASS_BOTTLE"
        },
        {
          "name": "GLASS_PANE"
        },
        {
          "name": "GLISTERING_MELON_SLICE"
        },
        {
          "name": "GLOBE_BANNER_PATTERN"
        },
        {
          "name": "GLOWSTONE"
        },
        {
          "name": "GLOWSTONE_DUST"
        },
        {
          "name": "GLOW_BERRIES"
        },
        {
          "name": "GLOW_INK_SAC"
        },
        {
          "name": "GLOW_ITEM_FRAME"
        },
        {
          "name": "GLOW_LICHEN"
        },
        {
          "name": "GLOW_SQUID_SPAWN_EGG"
        },
        {
          "name": "GOAT_SPAWN_EGG"
        },
        {
          "name": "GOLDEN_APPLE"
        },
        {
          "name": "GOLDEN_AXE"
        },
        {
          "name": "GOLDEN_BOOTS"
        },
        {
          "name": "GOLDEN_CARROT"
        },
        {
          "name": "GOLDEN_CHESTPLATE"
        },
        {
          "name": "GOLDEN_HELMET"
        },
        {
          "name": "GOLDEN_HOE"
        },
        {
          "name": "GOLDEN_HORSE_ARMOR"
        },
        {
          "name": "GOLDEN_LEGGINGS"
        },
        {
          "name": "GOLDEN_PICKAXE"
        },
        {
          "name": "GOLDEN_SHOVEL"
        },
        {
          "name": "GOLDEN_SWORD"
        },
        {
          "name": "GOLD_BLOCK"
        },
        {
          "name": "GOLD_INGOT"
        },
        {
          "name": "GOLD_NUGGET"
        },
        {
          "name": "GOLD_ORE"
        },
        {
          "name": "GRANITE"
        },
        {
          "name": "GRANITE_SLAB"
        },
        {
          "name": "GRANITE_STAIRS"
        },
        {
          "name": "GRANITE_WALL"
        },
        {
          "name": "GRASS"
        },
        {
          "name": "GRASS_BLOCK"
        },
        {
          "name": "GRAVEL"
        },
        {
          "name": "GRAY_BANNER"
        },
        {
          "name": "GRAY_BED"
        },
        {
          "name": "GRAY_CANDLE"
        },
        {
          "name": "GRAY_CANDLE_CAKE"
        },
        {
          "name": "GRAY_CARPET"
        },
        {
          "name": "GRAY_CONCRETE"
        },
        {
          "name": "GRAY_CONCRETE_POWDER"
        },
        {
          "name": "GRAY_DYE"
        },
        {
          "name": "GRAY_GLAZED_TERRACOTTA"
        },
        {
          "name": "GRAY_SHULKER_BOX"
        },
        {
          "name": "GRAY_STAINED_GLASS"
        },
        {
          "name": "GRAY_STAINED_GLASS_PANE"
        },
        {
          "name": "GRAY_TERRACOTTA"
        },
        {
          "name": "GRAY_WALL_BANNER"
        },
        {
          "name": "GRAY_WOOL"
        },
        {
          "name": "GREEN_BANNER"
        },
        {
          "name": "GREEN_BED"
        },
        {
          "name": "GREEN_CANDLE"
        },
        {
          "name": "GREEN_CANDLE_CAKE"
        },
        {
          "name": "GREEN_CARPET"
        },
        {
          "name": "GREEN_CONCRETE"
        },
        {
          "name": "GREEN_CONCRETE_POWDER"
        },
        {
          "name": "GREEN_DYE"
        },
        {
          "name": "GREEN_GLAZED_TERRACOTTA"
        },
        {
          "name": "GREEN_SHULKER_BOX"
        },
        {
          "name": "GREEN_STAINED_GLASS"
        },
        {
          "name": "GREEN_STAINED_GLASS_PANE"
        },
        {
          "name": "GREEN_TERRACOTTA"
        },
        {
          "name": "GREEN_WALL_BANNER"
        },
        {
          "name": "GREEN_WOOL"
        },
        {
          "name": "GRINDSTONE"
        },
        {
          "name": "GUARDIAN_SPAWN_EGG"
        },
        {
          "name": "GUNPOWDER"
        },
        {
          "name": "HANGING_ROOTS"
        },
        {
          "name": "HAY_BLOCK"
        },
        {
          "name": "HEART_OF_THE_SEA"
        },
        {
          "name": "HEAVY_WEIGHTED_PRESSURE_PLATE"
        },
        {
          "name": "HOGLIN_SPAWN_EGG"
        },
        {
          "name": "HONEYCOMB"
        },
        {
          "name": "HONEYCOMB_BLOCK"
        },
        {
          "name": "HONEY_BLOCK"
        },
        {
          "name": "HONEY_BOTTLE"
        },
        {
          "name": "HOPPER"
        },
        {
          "name": "HOPPER_MINECART"
        },
        {
          "name": "HORN_CORAL"
        },
        {
          "name": "HORN_CORAL_BLOCK"
        },
        {
          "name": "HORN_CORAL_FAN"
        },
        {
          "name": "HORN_CORAL_WALL_FAN"
        },
        {
          "name": "HORSE_SPAWN_EGG"
        },
        {
          "name": "HUSK_SPAWN_EGG"
        },
        {
          "name": "ICE"
        },
        {
          "name": "INFESTED_CHISELED_STONE_BRICKS"
        },
        {
          "name": "INFESTED_COBBLESTONE"
        },
        {
          "name": "INFESTED_CRACKED_STONE_BRICKS"
        },
        {
          "name": "INFESTED_DEEPSLATE"
        },
        {
          "name": "INFESTED_MOSSY_STONE_BRICKS"
        },
        {
          "name": "INFESTED_STONE"
        },
        {
          "name": "INFESTED_STONE_BRICKS"
        },
        {
          "name": "INK_SAC"
        },
        {
          "name": "IRON_AXE"
        },
        {
          "name": "IRON_BARS"
        },
        {
          "name": "IRON_BLOCK"
        },
        {
          "name": "IRON_BOOTS"
        },
        {
          "name": "IRON_CHESTPLATE"
        },
        {
          "name": "IRON_DOOR"
        },
        {
          "name": "IRON_HELMET"
        },
        {
          "name": "IRON_HOE"
        },
        {
          "name": "IRON_HORSE_ARMOR"
        },
        {
          "name": "IRON_INGOT"
        },
        {
          "name": "IRON_LEGGINGS"
        },
        {
          "name": "IRON_NUGGET"
        },
        {
          "name": "IRON_ORE"
        },
        {
          "name": "IRON_PICKAXE"
        },
        {
          "name": "IRON_SHOVEL"
        },
        {
          "name": "IRON_SWORD"
        },
        {
          "name": "IRON_TRAPDOOR"
        },
        {
          "name": "ITEM_FRAME"
        },
        {
          "name": "JACK_O_LANTERN"
        },
        {
          "name": "JIGSAW"
        },
        {
          "name": "JUKEBOX"
        },
        {
          "name": "JUNGLE_BOAT"
        },
        {
          "name": "JUNGLE_BUTTON"
        },
        {
          "name": "JUNGLE_DOOR"
        },
        {
          "name": "JUNGLE_FENCE"
        },
        {
          "name": "JUNGLE_FENCE_GATE"
        },
        {
          "name": "JUNGLE_LEAVES"
        },
        {
          "name": "JUNGLE_LOG"
        },
        {
          "name": "JUNGLE_PLANKS"
        },
        {
          "name": "JUNGLE_PRESSURE_PLATE"
        },
        {
          "name": "JUNGLE_SAPLING"
        },
        {
          "name": "JUNGLE_SIGN"
        },
        {
          "name": "JUNGLE_SLAB"
        },
        {
          "name": "JUNGLE_STAIRS"
        },
        {
          "name": "JUNGLE_TRAPDOOR"
        },
        {
          "name": "JUNGLE_WALL_SIGN"
        },
        {
          "name": "JUNGLE_WOOD"
        },
        {
          "name": "KELP"
        },
        {
          "name": "KELP_PLANT"
        },
        {
          "name": "KNOWLEDGE_BOOK"
        },
        {
          "name": "LADDER"
        },
        {
          "name": "LANTERN"
        },
        {
          "name": "LAPIS_BLOCK"
        },
        {
          "name": "LAPIS_LAZULI"
        },
        {
          "name": "LAPIS_ORE"
        },
        {
          "name": "LARGE_AMETHYST_BUD"
        },
        {
          "name": "LARGE_FERN"
        },
        {
          "name": "LAVA"
        },
        {
          "name": "LAVA_BUCKET"
        },
        {
          "name": "LAVA_CAULDRON"
        },
        {
          "name": "LEAD"
        },
        {
          "name": "LEATHER"
        },
        {
          "name": "LEATHER_BOOTS"
        },
        {
          "name": "LEATHER_CHESTPLATE"
        },
        {
          "name": "LEATHER_HELMET"
        },
        {
          "name": "LEATHER_HORSE_ARMOR"
        },
        {
          "name": "LEATHER_LEGGINGS"
        },
        {
          "name": "LECTERN"
        },
        {
          "name": "LEVER"
        },
        {
          "name": "LIGHT"
        },
        {
          "name": "LIGHTNING_ROD"
        },
        {
          "name": "LIGHT_BLUE_BANNER"
        },
        {
          "name": "LIGHT_BLUE_BED"
        },
        {
          "name": "LIGHT_BLUE_CANDLE"
        },
        {
          "name": "LIGHT_BLUE_CANDLE_CAKE"
        },
        {
          "name": "LIGHT_BLUE_CARPET"
        },
        {
          "name": "LIGHT_BLUE_CONCRETE"
        },
        {
          "name": "LIGHT_BLUE_CONCRETE_POWDER"
        },
        {
          "name": "LIGHT_BLUE_DYE"
        },
        {
          "name": "LIGHT_BLUE_GLAZED_TERRACOTTA"
        },
        {
          "name": "LIGHT_BLUE_SHULKER_BOX"
        },
        {
          "name": "LIGHT_BLUE_STAINED_GLASS"
        },
        {
          "name": "LIGHT_BLUE_STAINED_GLASS_PANE"
        },
        {
          "name": "LIGHT_BLUE_TERRACOTTA"
        },
        {
          "name": "LIGHT_BLUE_WALL_BANNER"
        },
        {
          "name": "LIGHT_BLUE_WOOL"
        },
        {
          "name": "LIGHT_GRAY_BANNER"
        },
        {
          "name": "LIGHT_GRAY_BED"
        },
        {
          "name": "LIGHT_GRAY_CANDLE"
        },
        {
          "name": "LIGHT_GRAY_CANDLE_CAKE"
        },
        {
          "name": "LIGHT_GRAY_CARPET"
        },
        {
          "name": "LIGHT_GRAY_CONCRETE"
        },
        {
          "name": "LIGHT_GRAY_CONCRETE_POWDER"
        },
        {
          "name": "LIGHT_GRAY_DYE"
        },
        {
          "name": "LIGHT_GRAY_GLAZED_TERRACOTTA"
        },
        {
          "name": "LIGHT_GRAY_SHULKER_BOX"
        },
        {
          "name": "LIGHT_GRAY_STAINED_GLASS"
        },
        {
          "name": "LIGHT_GRAY_STAINED_GLASS_PANE"
        },
        {
          "name": "LIGHT_GRAY_TERRACOTTA"
        },
        {
          "name": "LIGHT_GRAY_WALL_BANNER"
        },
        {
          "name": "LIGHT_GRAY_WOOL"
        },
        {
          "name": "LIGHT_WEIGHTED_PRESSURE_PLATE"
        },
        {
          "name": "LILAC"
        },
        {
          "name": "LILY_OF_THE_VALLEY"
        },
        {
          "name": "LILY_PAD"
        },
        {
          "name": "LIME_BANNER"
        },
        {
          "name": "LIME_BED"
        },
        {
          "name": "LIME_CANDLE"
        },
        {
          "name": "LIME_CANDLE_CAKE"
        },
        {
          "name": "LIME_CARPET"
        },
        {
          "name": "LIME_CONCRETE"
        },
        {
          "name": "LIME_CONCRETE_POWDER"
        },
        {
          "name": "LIME_DYE"
        },
        {
          "name": "LIME_GLAZED_TERRACOTTA"
        },
        {
          "name": "LIME_SHULKER_BOX"
        },
        {
          "name": "LIME_STAINED_GLASS"
        },
        {
          "name": "LIME_STAINED_GLASS_PANE"
        },
        {
          "name": "LIME_TERRACOTTA"
        },
        {
          "name": "LIME_WALL_BANNER"
        },
        {
          "name": "LIME_WOOL"
        },
        {
          "name": "LINGERING_POTION"
        },
        {
          "name": "LLAMA_SPAWN_EGG"
        },
        {
          "name": "LODESTONE"
        },
        {
          "name": "LOOM"
        },
        {
          "name": "MAGENTA_BANNER"
        },
        {
          "name": "MAGENTA_BED"
        },
        {
          "name": "MAGENTA_CANDLE"
        },
        {
          "name": "MAGENTA_CANDLE_CAKE"
        },
        {
          "name": "MAGENTA_CARPET"
        },
        {
          "name": "MAGENTA_CONCRETE"
        },
        {
          "name": "MAGENTA_CONCRETE_POWDER"
        },
        {
          "name": "MAGENTA_DYE"
        },
        {
          "name": "MAGENTA_GLAZED_TERRACOTTA"
        },
        {
          "name": "MAGENTA_SHULKER_BOX"
        },
        {
          "name": "MAGENTA_STAINED_GLASS"
        },
        {
          "name": "MAGENTA_STAINED_GLASS_PANE"
        },
        {
          "name": "MAGENTA_TERRACOTTA"
        },
        {
          "name": "MAGENTA_WALL_BANNER"
        },
        {
          "name": "MAGENTA_WOOL"
        },
        {
          "name": "MAGMA_BLOCK"
        },
        {
          "name": "MAGMA_CREAM"
        },
        {
          "name": "MAGMA_CUBE_SPAWN_EGG"
        },
        {
          "name": "MAP"
        },
        {
          "name": "MEDIUM_AMETHYST_BUD"
        },
        {
          "name": "MELON"
        },
        {
          "name": "MELON_SEEDS"
        },
        {
          "name": "MELON_SLICE"
        },
        {
          "name": "MELON_STEM"
        },
        {
          "name": "MILK_BUCKET"
        },
        {
          "name": "MINECART"
        },
        {
          "name": "MOJANG_BANNER_PATTERN"
        },
        {
          "name": "MOOSHROOM_SPAWN_EGG"
        },
        {
          "name": "MOSSY_COBBLESTONE"
        },
        {
          "name": "MOSSY_COBBLESTONE_SLAB"
        },
        {
          "name": "MOSSY_COBBLESTONE_STAIRS"
        },
        {
          "name": "MOSSY_COBBLESTONE_WALL"
        },
        {
          "name": "MOSSY_STONE_BRICKS"
        },
        {
          "name": "MOSSY_STONE_BRICK_SLAB"
        },
        {
          "name": "MOSSY_STONE_BRICK_STAIRS"
        },
        {
          "name": "MOSSY_STONE_BRICK_WALL"
        },
        {
          "name": "MOSS_BLOCK"
        },
        {
          "name": "MOSS_CARPET"
        },
        {
          "name": "MOVING_PISTON"
        },
        {
          "name": "MULE_SPAWN_EGG"
        },
        {
          "name": "MUSHROOM_STEM"
        },
        {
          "name": "MUSHROOM_STEW"
        },
        {
          "name": "MUSIC_DISC_11"
        },
        {
          "name": "MUSIC_DISC_13"
        },
        {
          "name": "MUSIC_DISC_BLOCKS"
        },
        {
          "name": "MUSIC_DISC_CAT"
        },
        {
          "name": "MUSIC_DISC_CHIRP"
        },
        {
          "name": "MUSIC_DISC_FAR"
        },
        {
          "name": "MUSIC_DISC_MALL"
        },
        {
          "name": "MUSIC_DISC_MELLOHI"
        },
        {
          "name": "MUSIC_DISC_PIGSTEP"
        },
        {
          "name": "MUSIC_DISC_STAL"
        },
        {
          "name": "MUSIC_DISC_STRAD"
        },
        {
          "name": "MUSIC_DISC_WAIT"
        },
        {
          "name": "MUSIC_DISC_WARD"
        },
        {
          "name": "MUTTON"
        },
        {
          "name": "MYCELIUM"
        },
        {
          "name": "NAME_TAG"
        },
        {
          "name": "NAUTILUS_SHELL"
        },
        {
          "name": "NETHERITE_AXE"
        },
        {
          "name": "NETHERITE_BLOCK"
        },
        {
          "name": "NETHERITE_BOOTS"
        },
        {
          "name": "NETHERITE_CHESTPLATE"
        },
        {
          "name": "NETHERITE_HELMET"
        },
        {
          "name": "NETHERITE_HOE"
        },
        {
          "name": "NETHERITE_INGOT"
        },
        {
          "name": "NETHERITE_LEGGINGS"
        },
        {
          "name": "NETHERITE_PICKAXE"
        },
        {
          "name": "NETHERITE_SCRAP"
        },
        {
          "name": "NETHERITE_SHOVEL"
        },
        {
          "name": "NETHERITE_SWORD"
        },
        {
          "name": "NETHERRACK"
        },
        {
          "name": "NETHER_BRICK"
        },
        {
          "name": "NETHER_BRICKS"
        },
        {
          "name": "NETHER_BRICK_FENCE"
        },
        {
          "name": "NETHER_BRICK_SLAB"
        },
        {
          "name": "NETHER_BRICK_STAIRS"
        },
        {
          "name": "NETHER_BRICK_WALL"
        },
        {
          "name": "NETHER_GOLD_ORE"
        },
        {
          "name": "NETHER_PORTAL"
        },
        {
          "name": "NETHER_QUARTZ_ORE"
        },
        {
          "name": "NETHER_SPROUTS"
        },
        {
          "name": "NETHER_STAR"
        },
        {
          "name": "NETHER_WART"
        },
        {
          "name": "NETHER_WART_BLOCK"
        },
        {
          "name": "NOTE_BLOCK"
        },
        {
          "name": "OAK_BOAT"
        },
        {
          "name": "OAK_BUTTON"
        },
        {
          "name": "OAK_DOOR"
        },
        {
          "name": "OAK_FENCE"
        },
        {
          "name": "OAK_FENCE_GATE"
        },
        {
          "name": "OAK_LEAVES"
        },
        {
          "name": "OAK_LOG"
        },
        {
          "name": "OAK_PLANKS"
        },
        {
          "name": "OAK_PRESSURE_PLATE"
        },
        {
          "name": "OAK_SAPLING"
        },
        {
          "name": "OAK_SIGN"
        },
        {
          "name": "OAK_SLAB"
        },
        {
          "name": "OAK_STAIRS"
        },
        {
          "name": "OAK_TRAPDOOR"
        },
        {
          "name": "OAK_WALL_SIGN"
        },
        {
          "name": "OAK_WOOD"
        },
        {
          "name": "OBSERVER"
        },
        {
          "name": "OBSIDIAN"
        },
        {
          "name": "OCELOT_SPAWN_EGG"
        },
        {
          "name": "ORANGE_BANNER"
        },
        {
          "name": "ORANGE_BED"
        },
        {
          "name": "ORANGE_CANDLE"
        },
        {
          "name": "ORANGE_CANDLE_CAKE"
        },
        {
          "name": "ORANGE_CARPET"
        },
        {
          "name": "ORANGE_CONCRETE"
        },
        {
          "name": "ORANGE_CONCRETE_POWDER"
        },
        {
          "name": "ORANGE_DYE"
        },
        {
          "name": "ORANGE_GLAZED_TERRACOTTA"
        },
        {
          "name": "ORANGE_SHULKER_BOX"
        },
        {
          "name": "ORANGE_STAINED_GLASS"
        },
        {
          "name": "ORANGE_STAINED_GLASS_PANE"
        },
        {
          "name": "ORANGE_TERRACOTTA"
        },
        {
          "name": "ORANGE_TULIP"
        },
        {
          "name": "ORANGE_WALL_BANNER"
        },
        {
          "name": "ORANGE_WOOL"
        },
        {
          "name": "OXEYE_DAISY"
        },
        {
          "name": "OXIDIZED_COPPER"
        },
        {
          "name": "OXIDIZED_CUT_COPPER"
        },
        {
          "name": "OXIDIZED_CUT_COPPER_SLAB"
        },
        {
          "name": "OXIDIZED_CUT_COPPER_STAIRS"
        },
        {
          "name": "PACKED_ICE"
        },
        {
          "name": "PAINTING"
        },
        {
          "name": "PANDA_SPAWN_EGG"
        },
        {
          "name": "PAPER"
        },
        {
          "name": "PARROT_SPAWN_EGG"
        },
        {
          "name": "PEONY"
        },
        {
          "name": "PETRIFIED_OAK_SLAB"
        },
        {
          "name": "PHANTOM_MEMBRANE"
        },
        {
          "name": "PHANTOM_SPAWN_EGG"
        },
        {
          "name": "PIGLIN_BANNER_PATTERN"
        },
        {
          "name": "PIGLIN_BRUTE_SPAWN_EGG"
        },
        {
          "name": "PIGLIN_SPAWN_EGG"
        },
        {
          "name": "PIG_SPAWN_EGG"
        },
        {
          "name": "PILLAGER_SPAWN_EGG"
        },
        {
          "name": "PINK_BANNER"
        },
        {
          "name": "PINK_BED"
        },
        {
          "name": "PINK_CANDLE"
        },
        {
          "name": "PINK_CANDLE_CAKE"
        },
        {
          "name": "PINK_CARPET"
        },
        {
          "name": "PINK_CONCRETE"
        },
        {
          "name": "PINK_CONCRETE_POWDER"
        },
        {
          "name": "PINK_DYE"
        },
        {
          "name": "PINK_GLAZED_TERRACOTTA"
        },
        {
          "name": "PINK_SHULKER_BOX"
        },
        {
          "name": "PINK_STAINED_GLASS"
        },
        {
          "name": "PINK_STAINED_GLASS_PANE"
        },
        {
          "name": "PINK_TERRACOTTA"
        },
        {
          "name": "PINK_TULIP"
        },
        {
          "name": "PINK_WALL_BANNER"
        },
        {
          "name": "PINK_WOOL"
        },
        {
          "name": "PISTON"
        },
        {
          "name": "PISTON_HEAD"
        },
        {
          "name": "PLAYER_HEAD"
        },
        {
          "name": "PLAYER_WALL_HEAD"
        },
        {
          "name": "PODZOL"
        },
        {
          "name": "POINTED_DRIPSTONE"
        },
        {
          "name": "POISONOUS_POTATO"
        },
        {
          "name": "POLAR_BEAR_SPAWN_EGG"
        },
        {
          "name": "POLISHED_ANDESITE"
        },
        {
          "name": "POLISHED_ANDESITE_SLAB"
        },
        {
          "name": "POLISHED_ANDESITE_STAIRS"
        },
        {
          "name": "POLISHED_BASALT"
        },
        {
          "name": "POLISHED_BLACKSTONE"
        },
        {
          "name": "POLISHED_BLACKSTONE_BRICKS"
        },
        {
          "name": "POLISHED_BLACKSTONE_BRICK_SLAB"
        },
        {
          "name": "POLISHED_BLACKSTONE_BRICK_STAIRS"
        },
        {
          "name": "POLISHED_BLACKSTONE_BRICK_WALL"
        },
        {
          "name": "POLISHED_BLACKSTONE_BUTTON"
        },
        {
          "name": "POLISHED_BLACKSTONE_PRESSURE_PLATE"
        },
        {
          "name": "POLISHED_BLACKSTONE_SLAB"
        },
        {
          "name": "POLISHED_BLACKSTONE_STAIRS"
        },
        {
          "name": "POLISHED_BLACKSTONE_WALL"
        },
        {
          "name": "POLISHED_DEEPSLATE"
        },
        {
          "name": "POLISHED_DEEPSLATE_SLAB"
        },
        {
          "name": "POLISHED_DEEPSLATE_STAIRS"
        },
        {
          "name": "POLISHED_DEEPSLATE_WALL"
        },
        {
          "name": "POLISHED_DIORITE"
        },
        {
          "name": "POLISHED_DIORITE_SLAB"
        },
        {
          "name": "POLISHED_DIORITE_STAIRS"
        },
        {
          "name": "POLISHED_GRANITE"
        },
        {
          "name": "POLISHED_GRANITE_SLAB"
        },
        {
          "name": "POLISHED_GRANITE_STAIRS"
        },
        {
          "name": "POPPED_CHORUS_FRUIT"
        },
        {
          "name": "POPPY"
        },
        {
          "name": "PORKCHOP"
        },
        {
          "name": "POTATO"
        },
        {
          "name": "POTATOES"
        },
        {
          "name": "POTION"
        },
        {
          "name": "POTTED_ACACIA_SAPLING"
        },
        {
          "name": "POTTED_ALLIUM"
        },
        {
          "name": "POTTED_AZALEA_BUSH"
        },
        {
          "name": "POTTED_AZURE_BLUET"
        },
        {
          "name": "POTTED_BAMBOO"
        },
        {
          "name": "POTTED_BIRCH_SAPLING"
        },
        {
          "name": "POTTED_BLUE_ORCHID"
        },
        {
          "name": "POTTED_BROWN_MUSHROOM"
        },
        {
          "name": "POTTED_CACTUS"
        },
        {
          "name": "POTTED_CORNFLOWER"
        },
        {
          "name": "POTTED_CRIMSON_FUNGUS"
        },
        {
          "name": "POTTED_CRIMSON_ROOTS"
        },
        {
          "name": "POTTED_DANDELION"
        },
        {
          "name": "POTTED_DARK_OAK_SAPLING"
        },
        {
          "name": "POTTED_DEAD_BUSH"
        },
        {
          "name": "POTTED_FERN"
        },
        {
          "name": "POTTED_FLOWERING_AZALEA_BUSH"
        },
        {
          "name": "POTTED_JUNGLE_SAPLING"
        },
        {
          "name": "POTTED_LILY_OF_THE_VALLEY"
        },
        {
          "name": "POTTED_OAK_SAPLING"
        },
        {
          "name": "POTTED_ORANGE_TULIP"
        },
        {
          "name": "POTTED_OXEYE_DAISY"
        },
        {
          "name": "POTTED_PINK_TULIP"
        },
        {
          "name": "POTTED_POPPY"
        },
        {
          "name": "POTTED_RED_MUSHROOM"
        },
        {
          "name": "POTTED_RED_TULIP"
        },
        {
          "name": "POTTED_SPRUCE_SAPLING"
        },
        {
          "name": "POTTED_WARPED_FUNGUS"
        },
        {
          "name": "POTTED_WARPED_ROOTS"
        },
        {
          "name": "POTTED_WHITE_TULIP"
        },
        {
          "name": "POTTED_WITHER_ROSE"
        },
        {
          "name": "POWDER_SNOW"
        },
        {
          "name": "POWDER_SNOW_BUCKET"
        },
        {
          "name": "POWDER_SNOW_CAULDRON"
        },
        {
          "name": "POWERED_RAIL"
        },
        {
          "name": "PRISMARINE"
        },
        {
          "name": "PRISMARINE_BRICKS"
        },
        {
          "name": "PRISMARINE_BRICK_SLAB"
        },
        {
          "name": "PRISMARINE_BRICK_STAIRS"
        },
        {
          "name": "PRISMARINE_CRYSTALS"
        },
        {
          "name": "PRISMARINE_SHARD"
        },
        {
          "name": "PRISMARINE_SLAB"
        },
        {
          "name": "PRISMARINE_STAIRS"
        },
        {
          "name": "PRISMARINE_WALL"
        },
        {
          "name": "PUFFERFISH"
        },
        {
          "name": "PUFFERFISH_BUCKET"
        },
        {
          "name": "PUFFERFISH_SPAWN_EGG"
        },
        {
          "name": "PUMPKIN"
        },
        {
          "name": "PUMPKIN_PIE"
        },
        {
          "name": "PUMPKIN_SEEDS"
        },
        {
          "name": "PUMPKIN_STEM"
        },
        {
          "name": "PURPLE_BANNER"
        },
        {
          "name": "PURPLE_BED"
        },
        {
          "name": "PURPLE_CANDLE"
        },
        {
          "name": "PURPLE_CANDLE_CAKE"
        },
        {
          "name": "PURPLE_CARPET"
        },
        {
          "name": "PURPLE_CONCRETE"
        },
        {
          "name": "PURPLE_CONCRETE_POWDER"
        },
        {
          "name": "PURPLE_DYE"
        },
        {
          "name": "PURPLE_GLAZED_TERRACOTTA"
        },
        {
          "name": "PURPLE_SHULKER_BOX"
        },
        {
          "name": "PURPLE_STAINED_GLASS"
        },
        {
          "name": "PURPLE_STAINED_GLASS_PANE"
        },
        {
          "name": "PURPLE_TERRACOTTA"
        },
        {
          "name": "PURPLE_WALL_BANNER"
        },
        {
          "name": "PURPLE_WOOL"
        },
        {
          "name": "PURPUR_BLOCK"
        },
        {
          "name": "PURPUR_PILLAR"
        },
        {
          "name": "PURPUR_SLAB"
        },
        {
          "name": "PURPUR_STAIRS"
        },
        {
          "name": "QUARTZ"
        },
        {
          "name": "QUARTZ_BLOCK"
        },
        {
          "name": "QUARTZ_BRICKS"
        },
        {
          "name": "QUARTZ_PILLAR"
        },
        {
          "name": "QUARTZ_SLAB"
        },
        {
          "name": "QUARTZ_STAIRS"
        },
        {
          "name": "RABBIT"
        },
        {
          "name": "RABBIT_FOOT"
        },
        {
          "name": "RABBIT_HIDE"
        },
        {
          "name": "RABBIT_SPAWN_EGG"
        },
        {
          "name": "RABBIT_STEW"
        },
        {
          "name": "RAIL"
        },
        {
          "name": "RAVAGER_SPAWN_EGG"
        },
        {
          "name": "RAW_COPPER"
        },
        {
          "name": "RAW_COPPER_BLOCK"
        },
        {
          "name": "RAW_GOLD"
        },
        {
          "name": "RAW_GOLD_BLOCK"
        },
        {
          "name": "RAW_IRON"
        },
        {
          "name": "RAW_IRON_BLOCK"
        },
        {
          "name": "REDSTONE"
        },
        {
          "name": "REDSTONE_BLOCK"
        },
        {
          "name": "REDSTONE_LAMP"
        },
        {
          "name": "REDSTONE_ORE"
        },
        {
          "name": "REDSTONE_TORCH"
        },
        {
          "name": "REDSTONE_WALL_TORCH"
        },
        {
          "name": "REDSTONE_WIRE"
        },
        {
          "name": "RED_BANNER"
        },
        {
          "name": "RED_BED"
        },
        {
          "name": "RED_CANDLE"
        },
        {
          "name": "RED_CANDLE_CAKE"
        },
        {
          "name": "RED_CARPET"
        },
        {
          "name": "RED_CONCRETE"
        },
        {
          "name": "RED_CONCRETE_POWDER"
        },
        {
          "name": "RED_DYE"
        },
        {
          "name": "RED_GLAZED_TERRACOTTA"
        },
        {
          "name": "RED_MUSHROOM"
        },
        {
          "name": "RED_MUSHROOM_BLOCK"
        },
        {
          "name": "RED_NETHER_BRICKS"
        },
        {
          "name": "RED_NETHER_BRICK_SLAB"
        },
        {
          "name": "RED_NETHER_BRICK_STAIRS"
        },
        {
          "name": "RED_NETHER_BRICK_WALL"
        },
        {
          "name": "RED_SAND"
        },
        {
          "name": "RED_SANDSTONE"
        },
        {
          "name": "RED_SANDSTONE_SLAB"
        },
        {
          "name": "RED_SANDSTONE_STAIRS"
        },
        {
          "name": "RED_SANDSTONE_WALL"
        },
        {
          "name": "RED_SHULKER_BOX"
        },
        {
          "name": "RED_STAINED_GLASS"
        },
        {
          "name": "RED_STAINED_GLASS_PANE"
        },
        {
          "name": "RED_TERRACOTTA"
        },
        {
          "name": "RED_TULIP"
        },
        {
          "name": "RED_WALL_BANNER"
        },
        {
          "name": "RED_WOOL"
        },
        {
          "name": "REPEATER"
        },
        {
          "name": "REPEATING_COMMAND_BLOCK"
        },
        {
          "name": "RESPAWN_ANCHOR"
        },
        {
          "name": "ROOTED_DIRT"
        },
        {
          "name": "ROSE_BUSH"
        },
        {
          "name": "ROTTEN_FLESH"
        },
        {
          "name": "SADDLE"
        },
        {
          "name": "SALMON"
        },
        {
          "name": "SALMON_BUCKET"
        },
        {
          "name": "SALMON_SPAWN_EGG"
        },
        {
          "name": "SAND"
        },
        {
          "name": "SANDSTONE"
        },
        {
          "name": "SANDSTONE_SLAB"
        },
        {
          "name": "SANDSTONE_STAIRS"
        },
        {
          "name": "SANDSTONE_WALL"
        },
        {
          "name": "SCAFFOLDING"
        },
        {
          "name": "SCULK_SENSOR"
        },
        {
          "name": "SCUTE"
        },
        {
          "name": "SEAGRASS"
        },
        {
          "name": "SEA_LANTERN"
        },
        {
          "name": "SEA_PICKLE"
        },
        {
          "name": "SHEARS"
        },
        {
          "name": "SHEEP_SPAWN_EGG"
        },
        {
          "name": "SHIELD"
        },
        {
          "name": "SHROOMLIGHT"
        },
        {
          "name": "SHULKER_BOX"
        },
        {
          "name": "SHULKER_SHELL"
        },
        {
          "name": "SHULKER_SPAWN_EGG"
        },
        {
          "name": "SILVERFISH_SPAWN_EGG"
        },
        {
          "name": "SKELETON_HORSE_SPAWN_EGG"
        },
        {
          "name": "SKELETON_SKULL"
        },
        {
          "name": "SKELETON_SPAWN_EGG"
        },
        {
          "name": "SKELETON_WALL_SKULL"
        },
        {
          "name": "SKULL_BANNER_PATTERN"
        },
        {
          "name": "SLIME_BALL"
        },
        {
          "name": "SLIME_BLOCK"
        },
        {
          "name": "SLIME_SPAWN_EGG"
        },
        {
          "name": "SMALL_AMETHYST_BUD"
        },
        {
          "name": "SMALL_DRIPLEAF"
        },
        {
          "name": "SMITHING_TABLE"
        },
        {
          "name": "SMOKER"
        },
        {
          "name": "SMOOTH_BASALT"
        },
        {
          "name": "SMOOTH_QUARTZ"
        },
        {
          "name": "SMOOTH_QUARTZ_SLAB"
        },
        {
          "name": "SMOOTH_QUARTZ_STAIRS"
        },
        {
          "name": "SMOOTH_RED_SANDSTONE"
        },
        {
          "name": "SMOOTH_RED_SANDSTONE_SLAB"
        },
        {
          "name": "SMOOTH_RED_SANDSTONE_STAIRS"
        },
        {
          "name": "SMOOTH_SANDSTONE"
        },
        {
          "name": "SMOOTH_SANDSTONE_SLAB"
        },
        {
          "name": "SMOOTH_SANDSTONE_STAIRS"
        },
        {
          "name": "SMOOTH_STONE"
        },
        {
          "name": "SMOOTH_STONE_SLAB"
        },
        {
          "name": "SNOW"
        },
        {
          "name": "SNOWBALL"
        },
        {
          "name": "SNOW_BLOCK"
        },
        {
          "name": "SOUL_CAMPFIRE"
        },
        {
          "name": "SOUL_FIRE"
        },
        {
          "name": "SOUL_LANTERN"
        },
        {
          "name": "SOUL_SAND"
        },
        {
          "name": "SOUL_SOIL"
        },
        {
          "name": "SOUL_TORCH"
        },
        {
          "name": "SOUL_WALL_TORCH"
        },
        {
          "name": "SPAWNER"
        },
        {
          "name": "SPECTRAL_ARROW"
        },
        {
          "name": "SPIDER_EYE"
        },
        {
          "name": "SPIDER_SPAWN_EGG"
        },
        {
          "name": "SPLASH_POTION"
        },
        {
          "name": "SPONGE"
        },
        {
          "name": "SPORE_BLOSSOM"
        },
        {
          "name": "SPRUCE_BOAT"
        },
        {
          "name": "SPRUCE_BUTTON"
        },
        {
          "name": "SPRUCE_DOOR"
        },
        {
          "name": "SPRUCE_FENCE"
        },
        {
          "name": "SPRUCE_FENCE_GATE"
        },
        {
          "name": "SPRUCE_LEAVES"
        },
        {
          "name": "SPRUCE_LOG"
        },
        {
          "name": "SPRUCE_PLANKS"
        },
        {
          "name": "SPRUCE_PRESSURE_PLATE"
        },
        {
          "name": "SPRUCE_SAPLING"
        },
        {
          "name": "SPRUCE_SIGN"
        },
        {
          "name": "SPRUCE_SLAB"
        },
        {
          "name": "SPRUCE_STAIRS"
        },
        {
          "name": "SPRUCE_TRAPDOOR"
        },
        {
          "name": "SPRUCE_WALL_SIGN"
        },
        {
          "name": "SPRUCE_WOOD"
        },
        {
          "name": "SPYGLASS"
        },
        {
          "name": "SQUID_SPAWN_EGG"
        },
        {
          "name": "STICK"
        },
        {
          "name": "STICKY_PISTON"
        },
        {
          "name": "STONE"
        },
        {
          "name": "STONECUTTER"
        },
        {
          "name": "STONE_AXE"
        },
        {
          "name": "STONE_BRICKS"
        },
        {
          "name": "STONE_BRICK_SLAB"
        },
        {
          "name": "STONE_BRICK_STAIRS"
        },
        {
          "name": "STONE_BRICK_WALL"
        },
        {
          "name": "STONE_BUTTON"
        },
        {
          "name": "STONE_HOE"
        },
        {
          "name": "STONE_PICKAXE"
        },
        {
          "name": "STONE_PRESSURE_PLATE"
        },
        {
          "name": "STONE_SHOVEL"
        },
        {
          "name": "STONE_SLAB"
        },
        {
          "name": "STONE_STAIRS"
        },
        {
          "name": "STONE_SWORD"
        },
        {
          "name": "STRAY_SPAWN_EGG"
        },
        {
          "name": "STRIDER_SPAWN_EGG"
        },
        {
          "name": "STRING"
        },
        {
          "name": "STRIPPED_ACACIA_LOG"
        },
        {
          "name": "STRIPPED_ACACIA_WOOD"
        },
        {
          "name": "STRIPPED_BIRCH_LOG"
        },
        {
          "name": "STRIPPED_BIRCH_WOOD"
        },
        {
          "name": "STRIPPED_CRIMSON_HYPHAE"
        },
        {
          "name": "STRIPPED_CRIMSON_STEM"
        },
        {
          "name": "STRIPPED_DARK_OAK_LOG"
        },
        {
          "name": "STRIPPED_DARK_OAK_WOOD"
        },
        {
          "name": "STRIPPED_JUNGLE_LOG"
        },
        {
          "name": "STRIPPED_JUNGLE_WOOD"
        },
        {
          "name": "STRIPPED_OAK_LOG"
        },
        {
          "name": "STRIPPED_OAK_WOOD"
        },
        {
          "name": "STRIPPED_SPRUCE_LOG"
        },
        {
          "name": "STRIPPED_SPRUCE_WOOD"
        },
        {
          "name": "STRIPPED_WARPED_HYPHAE"
        },
        {
          "name": "STRIPPED_WARPED_STEM"
        },
        {
          "name": "STRUCTURE_BLOCK"
        },
        {
          "name": "STRUCTURE_VOID"
        },
        {
          "name": "SUGAR"
        },
        {
          "name": "SUGAR_CANE"
        },
        {
          "name": "SUNFLOWER"
        },
        {
          "name": "SUSPICIOUS_STEW"
        },
        {
          "name": "SWEET_BERRIES"
        },
        {
          "name": "SWEET_BERRY_BUSH"
        },
        {
          "name": "TALL_GRASS"
        },
        {
          "name": "TALL_SEAGRASS"
        },
        {
          "name": "TARGET"
        },
        {
          "name": "TERRACOTTA"
        },
        {
          "name": "TINTED_GLASS"
        },
        {
          "name": "TIPPED_ARROW"
        },
        {
          "name": "TNT"
        },
        {
          "name": "TNT_MINECART"
        },
        {
          "name": "TORCH"
        },
        {
          "name": "TOTEM_OF_UNDYING"
        },
        {
          "name": "TRADER_LLAMA_SPAWN_EGG"
        },
        {
          "name": "TRAPPED_CHEST"
        },
        {
          "name": "TRIDENT"
        },
        {
          "name": "TRIPWIRE"
        },
        {
          "name": "TRIPWIRE_HOOK"
        },
        {
          "name": "TROPICAL_FISH"
        },
        {
          "name": "TROPICAL_FISH_BUCKET"
        },
        {
          "name": "TROPICAL_FISH_SPAWN_EGG"
        },
        {
          "name": "TUBE_CORAL"
        },
        {
          "name": "TUBE_CORAL_BLOCK"
        },
        {
          "name": "TUBE_CORAL_FAN"
        },
        {
          "name": "TUBE_CORAL_WALL_FAN"
        },
        {
          "name": "TUFF"
        },
        {
          "name": "TURTLE_EGG"
        },
        {
          "name": "TURTLE_HELMET"
        },
        {
          "name": "TURTLE_SPAWN_EGG"
        },
        {
          "name": "TWISTING_VINES"
        },
        {
          "name": "TWISTING_VINES_PLANT"
        },
        {
          "name": "VEX_SPAWN_EGG"
        },
        {
          "name": "VILLAGER_SPAWN_EGG"
        },
        {
          "name": "VINDICATOR_SPAWN_EGG"
        },
        {
          "name": "VINE"
        },
        {
          "name": "VOID_AIR"
        },
        {
          "name": "WALL_TORCH"
        },
        {
          "name": "WANDERING_TRADER_SPAWN_EGG"
        },
        {
          "name": "WARPED_BUTTON"
        },
        {
          "name": "WARPED_DOOR"
        },
        {
          "name": "WARPED_FENCE"
        },
        {
          "name": "WARPED_FENCE_GATE"
        },
        {
          "name": "WARPED_FUNGUS"
        },
        {
          "name": "WARPED_FUNGUS_ON_A_STICK"
        },
        {
          "name": "WARPED_HYPHAE"
        },
        {
          "name": "WARPED_NYLIUM"
        },
        {
          "name": "WARPED_PLANKS"
        },
        {
          "name": "WARPED_PRESSURE_PLATE"
        },
        {
          "name": "WARPED_ROOTS"
        },
        {
          "name": "WARPED_SIGN"
        },
        {
          "name": "WARPED_SLAB"
        },
        {
          "name": "WARPED_STAIRS"
        },
        {
          "name": "WARPED_STEM"
        },
        {
          "name": "WARPED_TRAPDOOR"
        },
        {
          "name": "WARPED_WALL_SIGN"
        },
        {
          "name": "WARPED_WART_BLOCK"
        },
        {
          "name": "WATER"
        },
        {
          "name": "WATER_BUCKET"
        },
        {
          "name": "WATER_CAULDRON"
        },
        {
          "name": "WAXED_COPPER_BLOCK"
        },
        {
          "name": "WAXED_CUT_COPPER"
        },
        {
          "name": "WAXED_CUT_COPPER_SLAB"
        },
        {
          "name": "WAXED_CUT_COPPER_STAIRS"
        },
        {
          "name": "WAXED_EXPOSED_COPPER"
        },
        {
          "name": "WAXED_EXPOSED_CUT_COPPER"
        },
        {
          "name": "WAXED_EXPOSED_CUT_COPPER_SLAB"
        },
        {
          "name": "WAXED_EXPOSED_CUT_COPPER_STAIRS"
        },
        {
          "name": "WAXED_OXIDIZED_COPPER"
        },
        {
          "name": "WAXED_OXIDIZED_CUT_COPPER"
        },
        {
          "name": "WAXED_OXIDIZED_CUT_COPPER_SLAB"
        },
        {
          "name": "WAXED_OXIDIZED_CUT_COPPER_STAIRS"
        },
        {
          "name": "WAXED_WEATHERED_COPPER"
        },
        {
          "name": "WAXED_WEATHERED_CUT_COPPER"
        },
        {
          "name": "WAXED_WEATHERED_CUT_COPPER_SLAB"
        },
        {
          "name": "WAXED_WEATHERED_CUT_COPPER_STAIRS"
        },
        {
          "name": "WEATHERED_COPPER"
        },
        {
          "name": "WEATHERED_CUT_COPPER"
        },
        {
          "name": "WEATHERED_CUT_COPPER_SLAB"
        },
        {
          "name": "WEATHERED_CUT_COPPER_STAIRS"
        },
        {
          "name": "WEEPING_VINES"
        },
        {
          "name": "WEEPING_VINES_PLANT"
        },
        {
          "name": "WET_SPONGE"
        },
        {
          "name": "WHEAT"
        },
        {
          "name": "WHEAT_SEEDS"
        },
        {
          "name": "WHITE_BANNER"
        },
        {
          "name": "WHITE_BED"
        },
        {
          "name": "WHITE_CANDLE"
        },
        {
          "name": "WHITE_CANDLE_CAKE"
        },
        {
          "name": "WHITE_CARPET"
        },
        {
          "name": "WHITE_CONCRETE"
        },
        {
          "name": "WHITE_CONCRETE_POWDER"
        },
        {
          "name": "WHITE_DYE"
        },
        {
          "name": "WHITE_GLAZED_TERRACOTTA"
        },
        {
          "name": "WHITE_SHULKER_BOX"
        },
        {
          "name": "WHITE_STAINED_GLASS"
        },
        {
          "name": "WHITE_STAINED_GLASS_PANE"
        },
        {
          "name": "WHITE_TERRACOTTA"
        },
        {
          "name": "WHITE_TULIP"
        },
        {
          "name": "WHITE_WALL_BANNER"
        },
        {
          "name": "WHITE_WOOL"
        },
        {
          "name": "WITCH_SPAWN_EGG"
        },
        {
          "name": "WITHER_ROSE"
        },
        {
          "name": "WITHER_SKELETON_SKULL"
        },
        {
          "name": "WITHER_SKELETON_SPAWN_EGG"
        },
        {
          "name": "WITHER_SKELETON_WALL_SKULL"
        },
        {
          "name": "WOLF_SPAWN_EGG"
        },
        {
          "name": "WOODEN_AXE"
        },
        {
          "name": "WOODEN_HOE"
        },
        {
          "name": "WOODEN_PICKAXE"
        },
        {
          "name": "WOODEN_SHOVEL"
        },
        {
          "name": "WOODEN_SWORD"
        },
        {
          "name": "WRITABLE_BOOK"
        },
        {
          "name": "WRITTEN_BOOK"
        },
        {
          "name": "YELLOW_BANNER"
        },
        {
          "name": "YELLOW_BED"
        },
        {
          "name": "YELLOW_CANDLE"
        },
        {
          "name": "YELLOW_CANDLE_CAKE"
        },
        {
          "name": "YELLOW_CARPET"
        },
        {
          "name": "YELLOW_CONCRETE"
        },
        {
          "name": "YELLOW_CONCRETE_POWDER"
        },
        {
          "name": "YELLOW_DYE"
        },
        {
          "name": "YELLOW_GLAZED_TERRACOTTA"
        },
        {
          "name": "YELLOW_SHULKER_BOX"
        },
        {
          "name": "YELLOW_STAINED_GLASS"
        },
        {
          "name": "YELLOW_STAINED_GLASS_PANE"
        },
        {
          "name": "YELLOW_TERRACOTTA"
        },
        {
          "name": "YELLOW_WALL_BANNER"
        },
        {
          "name": "YELLOW_WOOL"
        },
        {
          "name": "ZOGLIN_SPAWN_EGG"
        },
        {
          "name": "ZOMBIE_HEAD"
        },
        {
          "name": "ZOMBIE_HORSE_SPAWN_EGG"
        },
        {
          "name": "ZOMBIE_SPAWN_EGG"
        },
        {
          "name": "ZOMBIE_VILLAGER_SPAWN_EGG"
        },
        {
          "name": "ZOMBIE_WALL_HEAD"
        },
        {
          "name": "ZOMBIFIED_PIGLIN_SPAWN_EGG"
        }
      ],
      "constructors": [],
      "methods": [
        {
          "name": "getTranslatedName",
          "is_arbitrary": false,
          "desc": [
            "This gets the translated name of the ItemStack, for example: ",
            "Material.DIAMOND_SWORD would return 'Diamond Sword' if your language is English"
          ],
          "returns": {
            "type": "String",
            "desc": "the translated name of the Material"
          },
          "examples": [
            "material.getTranslatedName();"
          ]
        },
        {
          "name": "asBlock",
          "is_arbitrary": false,
          "desc": [
            "This converts the material into a Block"
          ],
          "returns": {
            "type": "Block",
            "desc": "the Block representation of the material"
          },
          "throws": [
            "Material cannot be converted to a block"
          ],
          "examples": [
            "material.asBlock();"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This returns the full id of the material, for example: 'minecraft:diamond'"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id representation of the material"
          },
          "examples": [
            "material.getFullId();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This returns the id of the material, for example: 'diamond'"
          ],
          "returns": {
            "type": "String",
            "desc": "the id representation of the material"
          },
          "examples": [
            "material.getId();"
          ]
        },
        {
          "name": "asItemStack",
          "is_arbitrary": false,
          "desc": [
            "This converts the material into an ItemStack"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the ItemStack representation of the material"
          },
          "throws": [
            "Material cannot be converted to an item stack"
          ],
          "examples": [
            "material.asItemStack();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This converts a block or item id into a Material"
          ],
          "params": [
            {
              "name": "id",
              "type": "String",
              "desc": "the id of the block or item"
            }
          ],
          "returns": {
            "type": "Material",
            "desc": "the material instance from the id"
          },
          "throws": [
            "... is not a valid Material"
          ],
          "examples": [
            "Material.of('diamond');"
          ]
        }
      ]
    },
    "Pos": {
      "name": "Pos",
      "desc": [
        "This class is a wrapper for 3 coordinate points in Minecraft"
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new Pos with the given x, y, and z"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "the x position"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "the y position"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "the z position"
            }
          ],
          "examples": [
            "new Pos(100, 0, 96);"
          ]
        }
      ],
      "methods": [
        {
          "name": "getX",
          "is_arbitrary": false,
          "desc": [
            "This returns the x position of the Pos"
          ],
          "returns": {
            "type": "Number",
            "desc": "the x position"
          },
          "examples": [
            "pos.getX();"
          ]
        },
        {
          "name": "getY",
          "is_arbitrary": false,
          "desc": [
            "This returns the y position of the Pos"
          ],
          "returns": {
            "type": "Number",
            "desc": "the y position"
          },
          "examples": [
            "pos.getY();"
          ]
        },
        {
          "name": "getZ",
          "is_arbitrary": false,
          "desc": [
            "This returns the z position of the Pos"
          ],
          "returns": {
            "type": "Number",
            "desc": "the z position"
          },
          "examples": [
            "pos.getZ();"
          ]
        },
        {
          "name": "toList",
          "is_arbitrary": false,
          "desc": [
            "This returns the Pos as a List containing the x, y, and z positions in order"
          ],
          "returns": {
            "type": "List",
            "desc": "the Pos as a List"
          },
          "examples": [
            "x, y, z = pos.toList();"
          ]
        }
      ],
      "static_methods": []
    },
    "Recipe": {
      "name": "Recipe",
      "desc": [
        "This class represents recipes in Minecraft."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getCraftingType",
          "is_arbitrary": false,
          "desc": [
            "This returns the crafting type of the recipe"
          ],
          "returns": {
            "type": "String",
            "desc": "the crafting type of the recipe, for example: 'crafting', 'smelting', 'blasting'"
          },
          "examples": [
            "recipe.getCraftingType()"
          ]
        },
        {
          "name": "getFullId",
          "is_arbitrary": false,
          "desc": [
            "This returns the full id of the recipe"
          ],
          "returns": {
            "type": "String",
            "desc": "the full id of the recipe"
          },
          "examples": [
            "recipe.getFullId()"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This returns the id of the recipe"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the recipe"
          },
          "examples": [
            "recipe.getId()"
          ]
        },
        {
          "name": "getIngredients",
          "is_arbitrary": false,
          "desc": [
            "This returns all the possible ingredients of the recipe"
          ],
          "returns": {
            "type": "List",
            "desc": "list of lists, each inner lists contains possible recipe items"
          },
          "examples": [
            "recipe.getIngredients()"
          ]
        },
        {
          "name": "getOutput",
          "is_arbitrary": false,
          "desc": [
            "This returns the output of the recipe"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the output of the recipe"
          },
          "examples": [
            "recipe.getOutput()"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This converts a recipe id into a Recipe if it's valid"
          ],
          "params": [
            {
              "name": "recipeId",
              "type": "String",
              "desc": "the id of the recipe to convert to a Recipe"
            }
          ],
          "returns": {
            "type": "Recipe",
            "desc": "the recipe instance from the id"
          },
          "throws": [
            "Recipe with id ... doesn't exist"
          ],
          "examples": [
            "Recipe.of('redstone_block')"
          ]
        }
      ]
    },
    "Trade": {
      "name": "Trade",
      "desc": [
        "This class represents a trade offer, and allows you to get information about it."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getUses",
          "is_arbitrary": false,
          "desc": [
            "Gets the number of times the trade has been used"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number of uses"
          },
          "examples": [
            "trade.getUses();"
          ]
        },
        {
          "name": "getMaxUses",
          "is_arbitrary": false,
          "desc": [
            "Gets the maximum number of times the trade can be used"
          ],
          "returns": {
            "type": "Number",
            "desc": "the maximum number of uses"
          },
          "examples": [
            "trade.getMaxUses();"
          ]
        },
        {
          "name": "getSpecialPrice",
          "is_arbitrary": false,
          "desc": [
            "This gets the special price which is used to adjust the price of the first buy item"
          ],
          "returns": {
            "type": "Number",
            "desc": "the special price"
          },
          "examples": [
            "trade.getSpecialPrice();"
          ]
        },
        {
          "name": "getSecondBuyItem",
          "is_arbitrary": false,
          "desc": [
            "Gets the second item that the merchant will buy"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the second item to buy"
          },
          "examples": [
            "trade.getSecondBuyItem();"
          ]
        },
        {
          "name": "getPriceMultiplier",
          "is_arbitrary": false,
          "desc": [
            "Gets the price multiplier which is used to adjust the price of the first buy item"
          ],
          "returns": {
            "type": "Number",
            "desc": "the price multiplier"
          },
          "examples": [
            "trade.getPriceMultiplier();"
          ]
        },
        {
          "name": "getAdjustedFirstBuyItem",
          "is_arbitrary": false,
          "desc": [
            "Gets the first item that the merchant will buy, adjusted by the price multiplier"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the first item to buy"
          },
          "examples": [
            "trade.getAdjustedFirstBuyItem();"
          ]
        },
        {
          "name": "getSellItem",
          "is_arbitrary": false,
          "desc": [
            "Gets the item that is being sold by the merchant"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the item for sale"
          },
          "examples": [
            "trade.getSellItem();"
          ]
        },
        {
          "name": "getFirstBuyItem",
          "is_arbitrary": false,
          "desc": [
            "Gets the first item that the merchant will buy"
          ],
          "returns": {
            "type": "ItemStack",
            "desc": "the first item to buy"
          },
          "examples": [
            "trade.getFirstBuyItem();"
          ]
        }
      ],
      "static_methods": []
    },
    "Config": {
      "name": "Config",
      "desc": [
        "This class allows you to create configs for your scripts"
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "resetToDefault",
          "is_arbitrary": false,
          "desc": [
            "Resets the config to the default value"
          ],
          "examples": [
            "config.resetToDefault();"
          ]
        },
        {
          "name": "getValue",
          "is_arbitrary": false,
          "desc": [
            "Gets the value of the config"
          ],
          "returns": {
            "type": "Value",
            "desc": "The value of the config"
          },
          "examples": [
            "config.getValue();"
          ]
        },
        {
          "name": "toJson",
          "is_arbitrary": false,
          "desc": [
            "Converts the config into a json value, this will not keep the listeners"
          ],
          "returns": {
            "type": "Json",
            "desc": "The config as a json value"
          },
          "examples": [
            "config.toJson();"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "Gets the name of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The name of the config"
          },
          "examples": [
            "config.getName();"
          ]
        },
        {
          "name": "getType",
          "is_arbitrary": false,
          "desc": [
            "Gets the type of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The type of the config"
          },
          "examples": [
            "config.getType();"
          ]
        },
        {
          "name": "setValue",
          "is_arbitrary": false,
          "desc": [
            "Sets the value of the config, if the value is invalid it will not be changed"
          ],
          "params": [
            {
              "name": "value",
              "type": "Value",
              "desc": "The new value of the config"
            }
          ],
          "examples": [
            "config.setValue(10);"
          ]
        },
        {
          "name": "getDescription",
          "is_arbitrary": false,
          "desc": [
            "Gets the description of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The description of the config"
          },
          "examples": [
            "config.getDescription();"
          ]
        },
        {
          "name": "addListener",
          "is_arbitrary": false,
          "desc": [
            "Adds a listener to the config, the listener will be called when the config is changed",
            "The listener must have one parameter, this is the rule that was changed"
          ],
          "params": [
            {
              "name": "listener",
              "type": "Function",
              "desc": "The listener to add"
            }
          ],
          "examples": [
            "config.addListener(function(newValue) {\n    print(newValue);\n});\n"
          ]
        },
        {
          "name": "getDefaultValue",
          "is_arbitrary": false,
          "desc": [
            "Gets the default value of the config"
          ],
          "returns": {
            "type": "Value",
            "desc": "The default value of the config"
          },
          "examples": [
            "config.getDefaultValue();"
          ]
        },
        {
          "name": "getOptionalInfo",
          "is_arbitrary": false,
          "desc": [
            "Gets the optional info of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The optional info of the config"
          },
          "examples": [
            "config.getOptionalInfo();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "fromMap",
          "is_arbitrary": false,
          "desc": [
            "Creates a config from a map",
            "The map must contain the following keys:",
            "'type' which is the type of the config which can be 'boolean', 'cycle', 'double', 'double_slider', 'integer', 'integer_slider', or 'string'",
            "'name' which is the name of the config",
            "And can optionally contain the following keys:",
            "'description' which is a description of the config",
            "'optional_info' which is an optional info for the config",
            "'default_value' which is the default value of the config",
            "'value' which is the current value of the config",
            "'listener' which is a function that will be called when the config changes, this must have 1 parameter which is the rule that was changed",
            "And 'cycle' types must contain the following keys:",
            "'cycle_values' which is a list of values that the config can cycle through",
            "And slider types must contain the following keys:",
            "'min' which is the minimum value of the slider",
            "'max' which is the maximum value of the slider"
          ],
          "params": [
            {
              "name": "map",
              "type": "Map",
              "desc": "The map to create the config from"
            }
          ],
          "returns": {
            "type": "Config",
            "desc": "The config created from the map"
          },
          "throws": [
            "Config map must contain a type that is a string",
            "Config map must contain a name that is a string",
            "'cycle' type must have 'cycle_values' as a list",
            "... type must have 'min' as a number",
            "... type must have 'max' as a number",
            "Invalid config type ..."
          ],
          "examples": [
            "configMap = {\n\t\"type\": \"boolean\",\n\t\"name\": \"My Config\",\n\t\"description\": \"This is my config\",\n\t\"optional_info\": \"This is an optional info\",\n\t\"default_value\": true,\n\t\"value\": false,\n\t\"listener\": fun(newValue) { }\n};\nconfig = Config.fromMap(configMap);\n"
          ]
        },
        {
          "name": "fromListOfMap",
          "is_arbitrary": false,
          "desc": [
            "Creates a config from a list of config maps"
          ],
          "params": [
            {
              "name": "list",
              "type": "List",
              "desc": "The list of config maps"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "A list of configs created from the list of config maps"
          },
          "examples": [
            "configs = [\n    {\n        \"type\": \"boolean\",\n        \"name\": \"My Config\",\n        \"description\": \"This is my config\"\n    },\n    {\n        \"type\": \"cycle\",\n        \"name\": \"My Cycle Config\",\n        \"description\": \"This is my cycle config\",\n        \"cycle_values\": [\"one\", \"two\", \"three\"],\n        \"default_value\": \"two\"\n    }\n];\nconfigs = Config.fromListOfMap(configs);\n"
          ]
        }
      ]
    },
    "Json": {
      "name": "Json",
      "desc": [
        "This class allows you to create and manipulate JSON objects."
      ],
      "import_path": "util.Json",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "writeToFile",
          "is_arbitrary": false,
          "desc": [
            "This writes the Json to a file"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file that you want to write to"
            }
          ],
          "throws": [
            "There was an error writing the file: ..."
          ],
          "examples": [
            "json.writeToFile(new File('D:/cool/realDirectory'));"
          ]
        },
        {
          "name": "getValue",
          "is_arbitrary": false,
          "desc": [
            "This converts the Json back into a Value"
          ],
          "returns": {
            "type": "Value",
            "desc": "the Value parsed from the Json"
          },
          "examples": [
            "json.getValue();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "fromMap",
          "is_arbitrary": false,
          "desc": [
            "This converts a map into a Json, an important thing to note is that",
            "any values that are not Numbers, Booleans, Lists, Maps, or Null will use their",
            "toString() member to convert them to a string"
          ],
          "params": [
            {
              "name": "map",
              "type": "Map",
              "desc": "the map that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the map"
          },
          "examples": [
            "Json.fromMap({'key': ['value1', 'value2']});"
          ]
        },
        {
          "name": "fromList",
          "is_arbitrary": false,
          "desc": [
            "This converts a list into a Json, an important thing to note is that",
            "any values that are not Numbers, Booleans, Lists, Maps, or Null will use their",
            "toString() member to convert them to a string"
          ],
          "params": [
            {
              "name": "list",
              "type": "List",
              "desc": "the list that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the list"
          },
          "examples": [
            "Json.fromList(['value', 1, true]);"
          ]
        },
        {
          "name": "fromString",
          "is_arbitrary": false,
          "desc": [
            "This converts a string into a Json provided it is formatted correctly"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the string"
          },
          "throws": [
            "Json could not be parsed"
          ],
          "examples": [
            "Json.fromString('{\"key\":\"value\"}');"
          ]
        }
      ]
    },
    "DiscordAttachment": {
      "name": "DiscordAttachment",
      "desc": [
        "This class lets you download and manipulate discord attachments."
      ],
      "import_path": null,
      "static_members": [],
      "members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getUrl",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the url of the attachment"
          ],
          "returns": {
            "type": "String",
            "desc": "the url of the attachment"
          },
          "examples": [
            "attachment.getUrl()"
          ]
        },
        {
          "name": "isImage",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the attachment is an image"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the attachment is an image, false otherwise"
          },
          "examples": [
            "attachment.isImage()"
          ]
        },
        {
          "name": "getSize",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the size of the attachment"
          ],
          "returns": {
            "type": "Number",
            "desc": "the size of the attachment in bytes"
          },
          "examples": [
            "attachment.getSize()"
          ]
        },
        {
          "name": "saveToFile",
          "is_arbitrary": false,
          "desc": [
            "This allows you to save an attachment to a file"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file you want to save the attachment to"
            }
          ],
          "examples": [
            "attachment.saveToFile(new File('/home/user/Attachment.jpeg'))"
          ]
        },
        {
          "name": "getFileExtension",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the file extension of the attachment"
          ],
          "returns": {
            "type": "String",
            "desc": "the file extension of the attachment"
          },
          "examples": [
            "attachment.getFileExtension()"
          ]
        },
        {
          "name": "isVideo",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the attachment is a video"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the attachment is a video, false otherwise"
          },
          "examples": [
            "attachment.isVideo()"
          ]
        },
        {
          "name": "getFileName",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the file name of the attachment"
          ],
          "returns": {
            "type": "String",
            "desc": "the file name of the attachment"
          },
          "examples": [
            "attachment.getFileName()"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordBot": {
      "name": "DiscordBot",
      "desc": [
        "This class lets you create a Discord bot and interact with it."
      ],
      "import_path": null,
      "static_members": [],
      "members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new DiscordBot instance"
          ],
          "params": [
            {
              "name": "token",
              "type": "String",
              "desc": "The token of the bot"
            }
          ],
          "examples": [
            "new DiscordBot('token')"
          ]
        }
      ],
      "methods": [
        {
          "name": "removeCommand",
          "is_arbitrary": false,
          "desc": [
            "This removes a slash command from the bot"
          ],
          "params": [
            {
              "name": "commandName",
              "type": "String",
              "desc": "the name of the command"
            }
          ],
          "examples": [
            "bot.removeCommand('command')"
          ]
        },
        {
          "name": "getServer",
          "is_arbitrary": false,
          "desc": [
            "This gets a server by its id"
          ],
          "params": [
            {
              "name": "serverId",
              "type": "String",
              "desc": "the id of the server"
            }
          ],
          "returns": {
            "type": "DiscordServer",
            "desc": "the server"
          },
          "throws": [
            "Server with id ... couldn't be found"
          ],
          "examples": [
            "bot.getServer('12345678901234567890123456789012')"
          ]
        },
        {
          "name": "getActivity",
          "is_arbitrary": false,
          "desc": [
            "This gets the activity of the bot"
          ],
          "returns": {
            "type": "String",
            "desc": "The activity of the bot, null if no activity"
          },
          "examples": [
            "bot.getActivity()"
          ]
        },
        {
          "name": "stop",
          "is_arbitrary": false,
          "desc": [
            "This stops the bot"
          ],
          "examples": [
            "bot.stop()"
          ]
        },
        {
          "name": "getChannel",
          "is_arbitrary": false,
          "desc": [
            "This gets a channel by its id"
          ],
          "params": [
            {
              "name": "channelId",
              "type": "String",
              "desc": "the id of the channel"
            }
          ],
          "returns": {
            "type": "DiscordChannel",
            "desc": "the channel"
          },
          "throws": [
            "Channel with id ... couldn't be found"
          ],
          "examples": [
            "bot.getChannel('12345678901234567890123456789012')"
          ]
        },
        {
          "name": "addCommand",
          "is_arbitrary": false,
          "desc": [
            "This adds a slash command to the bot",
            "Each command must have a name and description, it can have a command, define the next subcommand with 'next'",
            "and subcommands must have the argument type, and can have whether it is required or not",
            "types: 'string', 'integer', 'number', 'boolean', 'user', 'channel', and 'attachment'"
          ],
          "params": [
            {
              "name": "commandMap",
              "type": "Map",
              "desc": "the command map"
            }
          ],
          "throws": [
            "Command must have name and a description",
            "Slash command went too deep",
            "Command must include option type",
            "Invalid option"
          ],
          "examples": [
            "bot.addCommand({\n    \"name\": \"command\",\n    \"description\": \"Does something\",\n    \"command\": fun(event) {\n        // passes in the event\n        // do stuff\n    }\n    \"next: {\n        \"name\": \"subcommand\",\n        \"description\": \"Does something else\",\n        \"required\": true,\n        \"type\": \"String\",\n        \"command\": fun(event, string) {\n            // passes in the event and the string argument\n            // do stuff\n        }\n    }\n});\n"
          ]
        },
        {
          "name": "getStatus",
          "is_arbitrary": false,
          "desc": [
            "This gets the status of the bot"
          ],
          "returns": {
            "type": "String",
            "desc": "The status of the bot"
          },
          "examples": [
            "bot.getStatus()"
          ]
        },
        {
          "name": "registerEvent",
          "is_arbitrary": false,
          "desc": [
            "This registers a function to be called when an event is triggered"
          ],
          "params": [
            {
              "name": "eventName",
              "type": "String",
              "desc": "the name of the event"
            },
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be called"
            }
          ],
          "examples": [
            "bot.registerEvent('MessageReceivedEvent', function(event) { })"
          ]
        },
        {
          "name": "getUserId",
          "is_arbitrary": false,
          "desc": [
            "This gets the user id of the bot"
          ],
          "returns": {
            "type": "String",
            "desc": "The user id of the bot"
          },
          "examples": [
            "bot.getUserId()"
          ]
        },
        {
          "name": "setStatus",
          "is_arbitrary": false,
          "desc": [
            "This sets the status of the bot"
          ],
          "params": [
            {
              "name": "status",
              "type": "String",
              "desc": "The status you want the bot to have"
            }
          ],
          "throws": [
            "... is an invalid status"
          ],
          "examples": [
            "bot.setStatus('ONLINE')"
          ]
        },
        {
          "name": "setActivity",
          "is_arbitrary": false,
          "desc": [
            "This sets the activity of the bot"
          ],
          "params": [
            {
              "name": "activity",
              "type": "String",
              "desc": "The activity you want the bot to have"
            },
            {
              "name": "message",
              "type": "String",
              "desc": "The message you want to display"
            }
          ],
          "throws": [
            "... is an invalid activity"
          ],
          "examples": [
            "bot.setActivity('PLAYING', 'Arucas')"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordChannel": {
      "name": "DiscordChannel",
      "desc": [
        "This class allows you to get and send messages in the channel"
      ],
      "import_path": null,
      "static_members": [],
      "members": [],
      "constructors": [],
      "methods": [
        {
          "name": "sendFile",
          "is_arbitrary": false,
          "desc": [
            "This sends a file to this channel"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file you want to send"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "channel.sendFile(new File('a/b/totally_real_file.txt'));"
          ]
        },
        {
          "name": "getMessageFromId",
          "is_arbitrary": false,
          "desc": [
            "This gets a message by its id"
          ],
          "params": [
            {
              "name": "messageId",
              "type": "String",
              "desc": "the id of the message"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message"
          },
          "throws": [
            "Message with id ... couldn't be found"
          ],
          "examples": [
            "channel.getMessageFromId('12345678901234567890123456789012');"
          ]
        },
        {
          "name": "getHistory",
          "is_arbitrary": false,
          "desc": [
            "This gets the last X messages"
          ],
          "params": [
            {
              "name": "amount",
              "type": "Number",
              "desc": "the amount of messages to get"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the messages"
          },
          "examples": [
            "channel.getMessages(10);"
          ]
        },
        {
          "name": "sendEmbed",
          "is_arbitrary": false,
          "desc": [
            "This sends an embed to this channel.",
            "In the embed map, you can use the following keys:",
            "'title' as String, ''description' as String or List of String, 'colour'/'color' as Number,",
            "'fields' as Map with keys: ('name' as String, 'value' as String, 'inline' as Boolean),",
            "and 'image' as String that is an url"
          ],
          "params": [
            {
              "name": "embedMap",
              "type": "Map",
              "desc": "the embed map"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "channel.sendEmbed({\n    'title': 'EMBED!',\n    'description': ['Wow', 'Nice'],\n    'colour': 0xFFFFFF\n});\n"
          ]
        },
        {
          "name": "sendMessage",
          "is_arbitrary": false,
          "desc": [
            "This sends a message to this channel"
          ],
          "params": [
            {
              "name": "message",
              "type": "String",
              "desc": "the message"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "channel.sendMessage('Hello World!');"
          ]
        },
        {
          "name": "markTyping",
          "is_arbitrary": false,
          "desc": [
            "This marks the bot as typing in this channel, it lasts 10 seconds or until the message is sent"
          ],
          "examples": [
            "channel.markTyping();"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordEvent": {
      "name": "DiscordEvent",
      "desc": [
        "This class is an event wrapper that you can use to access event parameters."
      ],
      "import_path": null,
      "static_members": [],
      "members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getServer",
          "is_arbitrary": false,
          "desc": [
            "This gets the server that is related to the event"
          ],
          "returns": {
            "type": "DiscordServer",
            "desc": "the server"
          },
          "throws": [
            "... has no server"
          ],
          "examples": [
            "event.getServer();"
          ]
        },
        {
          "name": "getChannel",
          "is_arbitrary": false,
          "desc": [
            "This gets the channel that is related to the event"
          ],
          "returns": {
            "type": "DiscordChannel",
            "desc": "the channel"
          },
          "throws": [
            "... has no channel"
          ],
          "examples": [
            "event.getChannel();"
          ]
        },
        {
          "name": "getEventName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the event"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the event"
          },
          "examples": [
            "event.getEventName();"
          ]
        },
        {
          "name": "getUser",
          "is_arbitrary": false,
          "desc": [
            "This gets the user that is related to the event"
          ],
          "returns": {
            "type": "DiscordUser",
            "desc": "the user"
          },
          "throws": [
            "... has no user"
          ],
          "examples": [
            "event.getUser();"
          ]
        },
        {
          "name": "getMessage",
          "is_arbitrary": false,
          "desc": [
            "This gets the message that is related to the event"
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message"
          },
          "throws": [
            "... has no message"
          ],
          "examples": [
            "event.getMessage();"
          ]
        },
        {
          "name": "reply"
        },
        {
          "name": "replyWithFile",
          "is_arbitrary": false,
          "desc": [
            "This replies to the event with the given file"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file"
            }
          ],
          "examples": [
            "event.replyWithFile(new File('/path/to/file.txt'));"
          ]
        },
        {
          "name": "replyWithEmbed",
          "is_arbitrary": false,
          "desc": [
            "This replies to the event with the given embed map",
            "In the embed map, you can use the following keys:",
            "'title' as String, ''description' as String or List of String, 'colour'/'color' as Number",
            "'fields' as Map with keys: ('name' as String, 'value' as String, 'inline' as Boolean)",
            "and 'image' as String that is an url"
          ],
          "params": [
            {
              "name": "embedMap",
              "type": "Map",
              "desc": "the embed map"
            }
          ],
          "examples": [
            "event.replyWithEmbed({\n    'title': 'EMBED!',\n    'description': ['Wow', 'Nice'],\n    'colour': 0xFFFFFF\n});\n"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordMessage": {
      "name": "DiscordMessage",
      "desc": [
        "This class allows you to interact with Discord messages."
      ],
      "import_path": null,
      "static_members": [],
      "members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getServer",
          "is_arbitrary": false,
          "desc": [
            "This gets the server the message was sent in"
          ],
          "returns": {
            "type": "DiscordServer",
            "desc": "The server the message was sent in"
          },
          "examples": [
            "message.getServer();"
          ]
        },
        {
          "name": "isPinned",
          "is_arbitrary": false,
          "desc": [
            "This checks if the message is pinned"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the message is pinned, false if not"
          },
          "examples": [
            "message.isPinned();"
          ]
        },
        {
          "name": "getAuthor",
          "is_arbitrary": false,
          "desc": [
            "This gets the author of the message"
          ],
          "returns": {
            "type": "DiscordUser",
            "desc": "The author of the message"
          },
          "examples": [
            "message.getAuthor();"
          ]
        },
        {
          "name": "isEdited",
          "is_arbitrary": false,
          "desc": [
            "This checks if the message is edited"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the message is edited, false if not"
          },
          "examples": [
            "message.isEdited();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the message"
          ],
          "returns": {
            "type": "String",
            "desc": "The id of the message"
          },
          "examples": [
            "message.getId();"
          ]
        },
        {
          "name": "delete",
          "is_arbitrary": false,
          "desc": [
            "This deletes the message"
          ],
          "examples": [
            "message.delete();"
          ]
        },
        {
          "name": "replyWithEmbed",
          "is_arbitrary": false,
          "desc": [
            "This replies to the message with the given embed map",
            "In the embed map, you can use the following keys:",
            "'title' as String, ''description' as String or List of String, 'colour'/'color' as Number",
            "'fields' as Map with keys: ('name' as String, 'value' as String, 'inline' as Boolean)",
            "and 'image' as String that is an url"
          ],
          "params": [
            {
              "name": "embedMap",
              "type": "Map",
              "desc": "the embed map"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "message.replyWithEmbed({\n    'title': 'EMBED!',\n    'description': ['Wow', 'Nice'],\n    'colour': 0xFFFFFF\n});\n"
          ]
        },
        {
          "name": "getAttachments",
          "is_arbitrary": false,
          "desc": [
            "This gets the attachments of the message"
          ],
          "returns": {
            "type": "List",
            "desc": "List with the attachments of the message"
          },
          "examples": [
            "message.getAttachments();"
          ]
        },
        {
          "name": "addReaction",
          "is_arbitrary": false,
          "desc": [
            "This adds a reaction to the message with a specific emoji id"
          ],
          "params": [
            {
              "name": "emojiId",
              "type": "String",
              "desc": "the emoji id"
            }
          ],
          "throws": [
            "... is not a valid emote id"
          ],
          "examples": [
            "message.addReaction('012789012930198');"
          ]
        },
        {
          "name": "addReactionUnicode",
          "is_arbitrary": false,
          "desc": [
            "This adds a reaction to the message with a specific unicode"
          ],
          "params": [
            {
              "name": "unicode",
              "type": "String",
              "desc": "the unicode character"
            }
          ],
          "examples": [
            "message.addReactionUnicode('\\uD83D\\uDE00');"
          ]
        },
        {
          "name": "pin",
          "is_arbitrary": false,
          "desc": [
            "This pins the message if true, and removes if false"
          ],
          "params": [
            {
              "name": "bool",
              "type": "Boolean",
              "desc": "true to pin, false to unpin"
            }
          ],
          "examples": [
            "message.pin(true);"
          ]
        },
        {
          "name": "getChannel",
          "is_arbitrary": false,
          "desc": [
            "This gets the channel the message was sent in"
          ],
          "returns": {
            "type": "DiscordChannel",
            "desc": "The channel the message was sent in"
          },
          "examples": [
            "message.getChannel();"
          ]
        },
        {
          "name": "removeAllReactions",
          "is_arbitrary": false,
          "desc": [
            "This removes all reactions from the message"
          ],
          "examples": [
            "message.removeAllReactions();"
          ]
        },
        {
          "name": "getRaw",
          "is_arbitrary": false,
          "desc": [
            "This gets the raw message content"
          ],
          "returns": {
            "type": "String",
            "desc": "The raw message content"
          },
          "examples": [
            "message.getRaw();"
          ]
        },
        {
          "name": "toString",
          "is_arbitrary": false,
          "desc": [
            "This gets the raw message content"
          ],
          "returns": {
            "type": "String",
            "desc": "The raw message content"
          },
          "examples": [
            "message.toString();"
          ]
        },
        {
          "name": "reply",
          "is_arbitrary": false,
          "desc": [
            "This replies to the message with the given message"
          ],
          "params": [
            {
              "name": "message",
              "type": "String",
              "desc": "the message"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "message.reply('Replied!');"
          ]
        },
        {
          "name": "replyWithFile",
          "is_arbitrary": false,
          "desc": [
            "This replies to the message with the given file"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "message.replyWithFile(new File('path/to/file'));"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordServer": {
      "name": "DiscordServer",
      "desc": [
        "This class allows you to interact with Discord servers."
      ],
      "import_path": null,
      "static_members": [],
      "members": [],
      "constructors": [],
      "methods": [
        {
          "name": "unban",
          "is_arbitrary": false,
          "desc": [
            "This unbans a user from the server"
          ],
          "params": [
            {
              "name": "user",
              "type": "DiscordUser",
              "desc": "the user to unban"
            }
          ],
          "examples": [
            "server.unban(user);"
          ]
        },
        {
          "name": "kick",
          "is_arbitrary": false,
          "desc": [
            "This kicks a user from the server"
          ],
          "params": [
            {
              "name": "user",
              "type": "DiscordUser",
              "desc": "the user to kick"
            }
          ],
          "throws": [
            "Member was null"
          ],
          "examples": [
            "server.kick(user);"
          ]
        },
        {
          "name": "getOwnerId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the owner of the server"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the owner"
          },
          "examples": [
            "server.getOwnerId();"
          ]
        },
        {
          "name": "getMemberCount",
          "is_arbitrary": false,
          "desc": [
            "This gets the amount of members in the server"
          ],
          "returns": {
            "type": "Number",
            "desc": "the amount of members"
          },
          "examples": [
            "server.getMemberCount();"
          ]
        },
        {
          "name": "createRole",
          "is_arbitrary": false,
          "desc": [
            "This creates a role in the server",
            "In the role map you can have the following keys:",
            "'name' as String, 'colour'/'color' as Number, 'hoisted' as Boolean, 'mentionable as Boolean'",
            "and 'permissions' as a List of Strings, for example ['Manage Channels', 'Manage Server'], see Discord for more"
          ],
          "params": [
            {
              "name": "roleMap",
              "type": "Map",
              "desc": "the map of the role"
            }
          ],
          "examples": [
            "server.createRole({\n\t\"name\": \"new role\",\n\t\"colour\": 0xFFFFFF,\n\t\"permissions\": [\"Manage Permissions\", \"Ban Members\", \"Administrator\"],\n\t\"hoisted\": true,\n\t\"mentionable\": true\n});\n"
          ]
        },
        {
          "name": "getUserFromId",
          "is_arbitrary": false,
          "desc": [
            "This gets a user from the server by their id"
          ],
          "params": [
            {
              "name": "userId",
              "type": "String",
              "desc": "the id of the user"
            }
          ],
          "returns": {
            "type": "DiscordUser",
            "desc": "the user, if the user cannot be found returns null"
          },
          "examples": [
            "server.getUserFromId('12345678901234567890123456789012');"
          ]
        },
        {
          "name": "ban",
          "is_arbitrary": false,
          "desc": [
            "This bans a user from the server"
          ],
          "params": [
            {
              "name": "user",
              "type": "DiscordUser",
              "desc": "the user to ban"
            }
          ],
          "examples": [
            "server.ban(user);"
          ]
        },
        {
          "name": "ban",
          "is_arbitrary": false,
          "desc": [
            "This bans a user from the server, with a reason"
          ],
          "params": [
            {
              "name": "user",
              "type": "DiscordUser",
              "desc": "the user to ban"
            },
            {
              "name": "reason",
              "type": "String",
              "desc": "the reason for the ban"
            }
          ],
          "examples": [
            "server.ban(user, 'The ban hammer has struck!');"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordUser": {
      "name": "DiscordUser",
      "desc": [
        "This class is used to interact with Discord users."
      ],
      "import_path": null,
      "static_members": [],
      "members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the user"
          ],
          "returns": {
            "type": "String",
            "desc": "The name of the user"
          },
          "examples": [
            "user.getName();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the user"
          ],
          "returns": {
            "type": "String",
            "desc": "The id of the user"
          },
          "examples": [
            "user.getId();"
          ]
        },
        {
          "name": "getTag",
          "is_arbitrary": false,
          "desc": [
            "This gets the tag of the user, the numbers after the #"
          ],
          "returns": {
            "type": "String",
            "desc": "The tag of the user"
          },
          "examples": [
            "user.getTag();"
          ]
        },
        {
          "name": "getNameAndTag",
          "is_arbitrary": false,
          "desc": [
            "This gets the name and tag of the user"
          ],
          "returns": {
            "type": "String",
            "desc": "The name and tag of the user"
          },
          "examples": [
            "user.getNameAndTag();"
          ]
        }
      ],
      "static_methods": []
    },
    "GameEvent": {
      "name": "GameEvent",
      "desc": [
        "This class allows you to register listeners for game events in Minecraft."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new GameEvent, that is not cancellable"
          ],
          "params": [
            {
              "name": "eventName",
              "type": "String",
              "desc": "The name of the event, you can find these on the GameEvents page"
            },
            {
              "name": "onEvent",
              "type": "Function",
              "desc": "The function to run when the event is called, some events may have parameters"
            }
          ],
          "examples": [
            "new GameEvent('onClientTick', fun() { });"
          ]
        },
        {
          "desc": [
            "This creates a new GameEvent"
          ],
          "params": [
            {
              "name": "eventName",
              "type": "String",
              "desc": "The name of the event, you can find these on the GameEvents page"
            },
            {
              "name": "onEvent",
              "type": "Function",
              "desc": "The function to run when the event is called, some events may have parameters"
            },
            {
              "name": "cancellable",
              "type": "Boolean",
              "desc": "Whether or not the event is cancellable, if it is then it will run on the main thread"
            }
          ],
          "examples": [
            "new GameEvent('onClientTick', fun() { }, true);"
          ]
        }
      ],
      "methods": [
        {
          "name": "unregister",
          "is_arbitrary": false,
          "desc": [
            "This unregisters the event"
          ],
          "examples": [
            "gameEvent.unregister();"
          ]
        },
        {
          "name": "isRegistered",
          "is_arbitrary": false,
          "desc": [
            "This returns whether or not the event is registered"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "Whether or not the event is registered"
          },
          "examples": [
            "gameEvent.isRegistered();"
          ]
        },
        {
          "name": "register",
          "is_arbitrary": false,
          "desc": [
            "This registers the event"
          ],
          "examples": [
            "gameEvent.register();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "cancel",
          "is_arbitrary": false,
          "desc": [
            "If called on a cancellable event, this will stop execution and cancel the event,",
            "if called on a non-cancellable event, or not on an event, this will throw an error"
          ],
          "examples": [
            "GameEvent.cancel();"
          ]
        },
        {
          "name": "unregisterAll",
          "is_arbitrary": false,
          "desc": [
            "This unregisters all events registered by this script"
          ],
          "examples": [
            "GameEvent.unregisterAll();"
          ]
        }
      ]
    },
    "BoxShape": {
      "name": "BoxShape",
      "desc": [
        "This class allows you to create box shapes that can be rendered in the world."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "members": [
        {
          "name": "pos1",
          "assignable": false,
          "desc": [
            "The first position of the shape"
          ],
          "type": "Pos",
          "examples": [
            "shape.pos1;"
          ]
        },
        {
          "name": "pos2",
          "assignable": false,
          "desc": [
            "The second position of the shape"
          ],
          "type": "Pos",
          "examples": [
            "shape.pos2;"
          ]
        }
      ],
      "constructors": [
        {
          "desc": [
            "Creates a new box shape, this is used to render boxes"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The position which will be used for the first and second corner of the box"
            }
          ],
          "examples": [
            "new BoxShape(new Pos(0, 0, 0));"
          ]
        },
        {
          "desc": [
            "Creates a new box shape, this is used to render boxes"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "The position of the first corner of the box"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "The position of the second corner of the box"
            }
          ],
          "examples": [
            "new BoxShape(new Pos(0, 0, 0), new Pos(10, 10, 10));"
          ]
        },
        {
          "desc": [
            "Creates a new box shape, this is used to render boxes"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "The x position which will be used for the first and second corner of the box"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "The y position which will be used for the first and second corner of the box"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "The z position which will be used for the first and second corner of the box"
            }
          ],
          "examples": [
            "new BoxShape(0, 0, 0);"
          ]
        },
        {
          "desc": [
            "Creates a new box shape, this is used to render boxes"
          ],
          "params": [
            {
              "name": "x1",
              "type": "Number",
              "desc": "The x position of the first corner of the box"
            },
            {
              "name": "y1",
              "type": "Number",
              "desc": "The y position of the first corner of the box"
            },
            {
              "name": "z1",
              "type": "Number",
              "desc": "The z position of the first corner of the box"
            },
            {
              "name": "x2",
              "type": "Number",
              "desc": "The x position of the second corner of the box"
            },
            {
              "name": "y2",
              "type": "Number",
              "desc": "The y position of the second corner of the box"
            },
            {
              "name": "z2",
              "type": "Number",
              "desc": "The z position of the second corner of the box"
            }
          ],
          "examples": [
            "new BoxShape(0, 0, 0, 10, 10, 10);"
          ]
        }
      ],
      "methods": [
        {
          "name": "setColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using a single value, this",
            "function also has a sibling named `setColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setColour(0xFF0000);"
          ]
        },
        {
          "name": "setColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using three values this function",
            "also has a sibling named `setColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setColour(34, 55, 0);"
          ]
        },
        {
          "name": "setRenderThroughBlocks",
          "is_arbitrary": false,
          "desc": [
            "This sets whether the shape should render through blocks"
          ],
          "params": [
            {
              "name": "boolean",
              "type": "Boolean",
              "desc": "whether the shape should render through blocks"
            }
          ],
          "examples": [
            "shape.setRenderThroughBlocks(true);"
          ]
        },
        {
          "name": "setZScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the z scale of the shape"
          ],
          "params": [
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setZScale(3.5);"
          ]
        },
        {
          "name": "setOutlineGreen",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline green value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineGreen(34);"
          ]
        },
        {
          "name": "setRed",
          "is_arbitrary": false,
          "desc": [
            "This sets the red value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red between 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setRed(34);"
          ]
        },
        {
          "name": "setGreen",
          "is_arbitrary": false,
          "desc": [
            "This sets the green value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green between 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setGreen(34);"
          ]
        },
        {
          "name": "getYTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the y tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the y tilt"
          },
          "examples": [
            "shape.getYTilt();"
          ]
        },
        {
          "name": "getOpacity",
          "is_arbitrary": false,
          "desc": [
            "This returns the opacity of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the opacity of the shape"
          },
          "examples": [
            "shape.getOpacity();"
          ]
        },
        {
          "name": "setPos1",
          "is_arbitrary": false,
          "desc": [
            "This sets the first position of the shape"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "the first position of the shape"
            }
          ],
          "examples": [
            "shape.setPos1(new Pos(1, 0, 100));"
          ]
        },
        {
          "name": "centerPositions",
          "is_arbitrary": false,
          "desc": [
            "This centers the positions of the shape"
          ],
          "examples": [
            "shape.centerPositions();"
          ]
        },
        {
          "name": "getRed",
          "is_arbitrary": false,
          "desc": [
            "This returns the red value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the red value of the shape"
          },
          "examples": [
            "shape.getRed();"
          ]
        },
        {
          "name": "getRGBList",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGB value of the shape as a list"
          ],
          "returns": {
            "type": "List",
            "desc": "the RGB value of the shape as a list in the form [red, green, blue]"
          },
          "examples": [
            "r, g, b = shape.getRGBList();"
          ]
        },
        {
          "name": "setBlue",
          "is_arbitrary": false,
          "desc": [
            "This sets the blue value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue between 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setBlue(34);"
          ]
        },
        {
          "name": "stopRendering",
          "is_arbitrary": false,
          "desc": [
            "This stops the shape from rendering"
          ],
          "examples": [
            "shape.stopRendering();"
          ]
        },
        {
          "name": "setOutlinePixelWidth",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline pixel width of the shape, using a single value"
          ],
          "params": [
            {
              "name": "width",
              "type": "Number",
              "desc": "the width of the outline in pixels"
            }
          ],
          "examples": [
            "shape.setOutlinePixelWidth(5);"
          ]
        },
        {
          "name": "setYScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the y scale of the shape"
          ],
          "params": [
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            }
          ],
          "examples": [
            "shape.setYScale(2.5);"
          ]
        },
        {
          "name": "getYScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the y scale of the shape"
          ],
          "examples": [
            "shape.getYScale();"
          ]
        },
        {
          "name": "getRGBAList",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGBA value of the shape as a list"
          ],
          "returns": {
            "type": "List",
            "desc": "the RGBA value of the shape as a list in the form [red, green, blue, opacity]"
          },
          "examples": [
            "r, g, b, a = shape.getRGBAList();"
          ]
        },
        {
          "name": "getZTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the z tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the z tilt"
          },
          "examples": [
            "shape.getZTilt();"
          ]
        },
        {
          "name": "render",
          "is_arbitrary": false,
          "desc": [
            "This sets the shape to be rendered indefinitely, the shape will only stop rendering when the script ends or when you call the stopRendering() method"
          ],
          "examples": [
            "shape.render();"
          ]
        },
        {
          "name": "setZTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the z tilt of the shape"
          ],
          "params": [
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setZTilt(100);"
          ]
        },
        {
          "name": "getRGB",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGB value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the RGB value of the shape as a single number in the form 0xRRGGBB"
          },
          "examples": [
            "shape.getRGB();"
          ]
        },
        {
          "name": "getZScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the z scale of the shape"
          ],
          "examples": [
            "shape.getZScale();"
          ]
        },
        {
          "name": "setXScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the x scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            }
          ],
          "examples": [
            "shape.setXScale(1.5);"
          ]
        },
        {
          "name": "setScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            },
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            },
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setScale(1.5, 2.5, 3.5);"
          ]
        },
        {
          "name": "setOutlineRed",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline red value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineRed(34);"
          ]
        },
        {
          "name": "setYTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the y tilt of the shape"
          ],
          "params": [
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            }
          ],
          "examples": [
            "shape.setYTilt(100);"
          ]
        },
        {
          "name": "shouldRenderThroughBlocks",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the shape should render through blocks"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the shape should render through blocks"
          },
          "examples": [
            "shape.shouldRenderThroughBlocks();"
          ]
        },
        {
          "name": "getBlue",
          "is_arbitrary": false,
          "desc": [
            "This returns the blue value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the blue value of the shape"
          },
          "examples": [
            "shape.getBlue();"
          ]
        },
        {
          "name": "setPos2",
          "is_arbitrary": false,
          "desc": [
            "This sets the second position of the shape"
          ],
          "params": [
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "the second position of the shape"
            }
          ],
          "examples": [
            "shape.setPos2(new Pos(100, 0, 200));"
          ]
        },
        {
          "name": "setTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            },
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            },
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setTilt(100, 0, 80);"
          ]
        },
        {
          "name": "setOutlineBlue",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline blue value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineBlue(34);"
          ]
        },
        {
          "name": "setOutlineColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the width of the shape, using a single value, this function",
            "also has a sibling named `setOutlineColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setOutlineColour(0xFF00FF);"
          ]
        },
        {
          "name": "setOutlineColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline colour of the shape, using three values, this function",
            "also has a sibling named `setOutlineColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineColour(255, 0, 255);"
          ]
        },
        {
          "name": "getGreen",
          "is_arbitrary": false,
          "desc": [
            "This returns the green value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the green value of the shape"
          },
          "examples": [
            "shape.getGreen();"
          ]
        },
        {
          "name": "setColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using a single value, this"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setColor(0xFF0000);"
          ]
        },
        {
          "name": "setColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using three values this function"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setColor(34, 55, 0);"
          ]
        },
        {
          "name": "getXScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the x scale of the shape"
          ],
          "examples": [
            "shape.getXScale();"
          ]
        },
        {
          "name": "setOutlineColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the width of the shape, using a single value, this function"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setOutlineColor(0xFF00FF);"
          ]
        },
        {
          "name": "setOutlineColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline colour of the shape, using three values, this function"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineColor(255, 0, 255);"
          ]
        },
        {
          "name": "setXTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the x tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            }
          ],
          "examples": [
            "shape.setXTilt(100);"
          ]
        },
        {
          "name": "getXTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the x tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the x tilt"
          },
          "examples": [
            "shape.getXTilt();"
          ]
        },
        {
          "name": "setOpacity",
          "is_arbitrary": false,
          "desc": [
            "This sets the opacity of the shape, using a single value"
          ],
          "params": [
            {
              "name": "alpha",
              "type": "Number",
              "desc": "the opacity, where 255 is solid colour and 0 is no colour"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setOpacity(34);"
          ]
        }
      ],
      "static_methods": []
    },
    "SphereShape": {
      "name": "SphereShape",
      "desc": [
        "This class is used to create a sphere shape which can be rendered in the world."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "members": [
        {
          "name": "pos",
          "assignable": false,
          "desc": [
            "This is the position of the shape"
          ],
          "type": "Pos",
          "examples": [
            "shape.pos;"
          ]
        }
      ],
      "constructors": [
        {
          "desc": [
            "This creates a new sphere shape"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The position of the sphere"
            }
          ],
          "examples": [
            "new SphereShape(new Pos(0, 10, 0));"
          ]
        },
        {
          "desc": [
            "This creates a new sphere shape"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "The x position of the sphere"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "The y position of the sphere"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "The z position of the sphere"
            }
          ],
          "examples": [
            "new SphereShape(0, 10, 0);"
          ]
        }
      ],
      "methods": [
        {
          "name": "setColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using a single value, this",
            "function also has a sibling named `setColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setColour(0xFF0000);"
          ]
        },
        {
          "name": "setColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using three values this function",
            "also has a sibling named `setColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setColour(34, 55, 0);"
          ]
        },
        {
          "name": "setRenderThroughBlocks",
          "is_arbitrary": false,
          "desc": [
            "This sets whether the shape should render through blocks"
          ],
          "params": [
            {
              "name": "boolean",
              "type": "Boolean",
              "desc": "whether the shape should render through blocks"
            }
          ],
          "examples": [
            "shape.setRenderThroughBlocks(true);"
          ]
        },
        {
          "name": "setZScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the z scale of the shape"
          ],
          "params": [
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setZScale(3.5);"
          ]
        },
        {
          "name": "getWidth",
          "is_arbitrary": false,
          "desc": [
            "This returns the width of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the width of the shape"
          },
          "examples": [
            "shape.getWidth();"
          ]
        },
        {
          "name": "setOutlineGreen",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline green value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineGreen(34);"
          ]
        },
        {
          "name": "setRed",
          "is_arbitrary": false,
          "desc": [
            "This sets the red value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red between 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setRed(34);"
          ]
        },
        {
          "name": "setGreen",
          "is_arbitrary": false,
          "desc": [
            "This sets the green value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green between 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setGreen(34);"
          ]
        },
        {
          "name": "getYTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the y tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the y tilt"
          },
          "examples": [
            "shape.getYTilt();"
          ]
        },
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "This returns the position of the shape"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "the position of the shape"
            }
          ],
          "examples": [
            "shape.setPos(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "getOpacity",
          "is_arbitrary": false,
          "desc": [
            "This returns the opacity of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the opacity of the shape"
          },
          "examples": [
            "shape.getOpacity();"
          ]
        },
        {
          "name": "centerPosition",
          "is_arbitrary": false,
          "desc": [
            "This rounds the position to the nearest block position"
          ],
          "examples": [
            "shape.centerPosition();"
          ]
        },
        {
          "name": "setSteps",
          "is_arbitrary": false,
          "desc": [
            "This sets the number of steps the sphere will take to render"
          ],
          "params": [
            {
              "name": "steps",
              "type": "Number",
              "desc": "The number of steps"
            }
          ],
          "examples": [
            "sphere.setSteps(30);"
          ]
        },
        {
          "name": "getRed",
          "is_arbitrary": false,
          "desc": [
            "This returns the red value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the red value of the shape"
          },
          "examples": [
            "shape.getRed();"
          ]
        },
        {
          "name": "getRGBList",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGB value of the shape as a list"
          ],
          "returns": {
            "type": "List",
            "desc": "the RGB value of the shape as a list in the form [red, green, blue]"
          },
          "examples": [
            "r, g, b = shape.getRGBList();"
          ]
        },
        {
          "name": "setBlue",
          "is_arbitrary": false,
          "desc": [
            "This sets the blue value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue between 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setBlue(34);"
          ]
        },
        {
          "name": "stopRendering",
          "is_arbitrary": false,
          "desc": [
            "This stops the shape from rendering"
          ],
          "examples": [
            "shape.stopRendering();"
          ]
        },
        {
          "name": "setOutlinePixelWidth",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline pixel width of the shape, using a single value"
          ],
          "params": [
            {
              "name": "width",
              "type": "Number",
              "desc": "the width of the outline in pixels"
            }
          ],
          "examples": [
            "shape.setOutlinePixelWidth(5);"
          ]
        },
        {
          "name": "setYScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the y scale of the shape"
          ],
          "params": [
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            }
          ],
          "examples": [
            "shape.setYScale(2.5);"
          ]
        },
        {
          "name": "getYScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the y scale of the shape"
          ],
          "examples": [
            "shape.getYScale();"
          ]
        },
        {
          "name": "getSteps",
          "is_arbitrary": false,
          "desc": [
            "This gets the number of steps the sphere will take to render"
          ],
          "returns": {
            "type": "Number",
            "desc": "The number of steps"
          },
          "examples": [
            "sphere.getSteps();"
          ]
        },
        {
          "name": "getRGBAList",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGBA value of the shape as a list"
          ],
          "returns": {
            "type": "List",
            "desc": "the RGBA value of the shape as a list in the form [red, green, blue, opacity]"
          },
          "examples": [
            "r, g, b, a = shape.getRGBAList();"
          ]
        },
        {
          "name": "getZTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the z tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the z tilt"
          },
          "examples": [
            "shape.getZTilt();"
          ]
        },
        {
          "name": "render",
          "is_arbitrary": false,
          "desc": [
            "This sets the shape to be rendered indefinitely, the shape will only stop rendering when the script ends or when you call the stopRendering() method"
          ],
          "examples": [
            "shape.render();"
          ]
        },
        {
          "name": "setZTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the z tilt of the shape"
          ],
          "params": [
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setZTilt(100);"
          ]
        },
        {
          "name": "getRGB",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGB value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the RGB value of the shape as a single number in the form 0xRRGGBB"
          },
          "examples": [
            "shape.getRGB();"
          ]
        },
        {
          "name": "getZScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the z scale of the shape"
          ],
          "examples": [
            "shape.getZScale();"
          ]
        },
        {
          "name": "setXScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the x scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            }
          ],
          "examples": [
            "shape.setXScale(1.5);"
          ]
        },
        {
          "name": "setScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            },
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            },
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setScale(1.5, 2.5, 3.5);"
          ]
        },
        {
          "name": "setOutlineRed",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline red value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineRed(34);"
          ]
        },
        {
          "name": "setYTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the y tilt of the shape"
          ],
          "params": [
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            }
          ],
          "examples": [
            "shape.setYTilt(100);"
          ]
        },
        {
          "name": "shouldRenderThroughBlocks",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the shape should render through blocks"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the shape should render through blocks"
          },
          "examples": [
            "shape.shouldRenderThroughBlocks();"
          ]
        },
        {
          "name": "setWidth",
          "is_arbitrary": false,
          "desc": [
            "This sets the width of the shape"
          ],
          "params": [
            {
              "name": "width",
              "type": "Number",
              "desc": "the width of the shape"
            }
          ],
          "examples": [
            "shape.setWidth(10.5);"
          ]
        },
        {
          "name": "getBlue",
          "is_arbitrary": false,
          "desc": [
            "This returns the blue value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the blue value of the shape"
          },
          "examples": [
            "shape.getBlue();"
          ]
        },
        {
          "name": "setTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            },
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            },
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setTilt(100, 0, 80);"
          ]
        },
        {
          "name": "setOutlineBlue",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline blue value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineBlue(34);"
          ]
        },
        {
          "name": "setOutlineColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the width of the shape, using a single value, this function",
            "also has a sibling named `setOutlineColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setOutlineColour(0xFF00FF);"
          ]
        },
        {
          "name": "setOutlineColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline colour of the shape, using three values, this function",
            "also has a sibling named `setOutlineColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineColour(255, 0, 255);"
          ]
        },
        {
          "name": "getGreen",
          "is_arbitrary": false,
          "desc": [
            "This returns the green value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the green value of the shape"
          },
          "examples": [
            "shape.getGreen();"
          ]
        },
        {
          "name": "setColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using a single value, this"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setColor(0xFF0000);"
          ]
        },
        {
          "name": "setColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using three values this function"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setColor(34, 55, 0);"
          ]
        },
        {
          "name": "getXScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the x scale of the shape"
          ],
          "examples": [
            "shape.getXScale();"
          ]
        },
        {
          "name": "setOutlineColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the width of the shape, using a single value, this function"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setOutlineColor(0xFF00FF);"
          ]
        },
        {
          "name": "setOutlineColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline colour of the shape, using three values, this function"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineColor(255, 0, 255);"
          ]
        },
        {
          "name": "setXTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the x tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            }
          ],
          "examples": [
            "shape.setXTilt(100);"
          ]
        },
        {
          "name": "getXTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the x tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the x tilt"
          },
          "examples": [
            "shape.getXTilt();"
          ]
        },
        {
          "name": "setOpacity",
          "is_arbitrary": false,
          "desc": [
            "This sets the opacity of the shape, using a single value"
          ],
          "params": [
            {
              "name": "alpha",
              "type": "Number",
              "desc": "the opacity, where 255 is solid colour and 0 is no colour"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setOpacity(34);"
          ]
        }
      ],
      "static_methods": []
    },
    "LineShape": {
      "name": "LineShape",
      "desc": [
        "This class allows you to create a line shape which can be used to draw lines in the world."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "members": [
        {
          "name": "pos1",
          "assignable": false,
          "desc": [
            "The first position of the shape"
          ],
          "type": "Pos",
          "examples": [
            "shape.pos1;"
          ]
        },
        {
          "name": "pos2",
          "assignable": false,
          "desc": [
            "The second position of the shape"
          ],
          "type": "Pos",
          "examples": [
            "shape.pos2;"
          ]
        }
      ],
      "constructors": [
        {
          "desc": [
            "Creates a new line shape"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "The starting position of the line"
            },
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "The ending position of the line"
            }
          ],
          "examples": [
            "new LineShape(new Pos(0, 0, 0), new Pos(1, 1, 1));"
          ]
        },
        {
          "desc": [
            "Creates a new line shape"
          ],
          "params": [
            {
              "name": "x1",
              "type": "Number",
              "desc": "The x position of the starting position of the line"
            },
            {
              "name": "y1",
              "type": "Number",
              "desc": "The y position of the starting position of the line"
            },
            {
              "name": "z1",
              "type": "Number",
              "desc": "The z position of the starting position of the line"
            },
            {
              "name": "x2",
              "type": "Number",
              "desc": "The x position of the ending position of the line"
            },
            {
              "name": "y2",
              "type": "Number",
              "desc": "The y position of the ending position of the line"
            },
            {
              "name": "z2",
              "type": "Number",
              "desc": "The z position of the ending position of the line"
            }
          ],
          "examples": [
            "new LineShape(0, 0, 0, 1, 1, 1);"
          ]
        }
      ],
      "methods": [
        {
          "name": "setColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using a single value, this",
            "function also has a sibling named `setColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setColour(0xFF0000);"
          ]
        },
        {
          "name": "setColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using three values this function",
            "also has a sibling named `setColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setColour(34, 55, 0);"
          ]
        },
        {
          "name": "setRenderThroughBlocks",
          "is_arbitrary": false,
          "desc": [
            "This sets whether the shape should render through blocks"
          ],
          "params": [
            {
              "name": "boolean",
              "type": "Boolean",
              "desc": "whether the shape should render through blocks"
            }
          ],
          "examples": [
            "shape.setRenderThroughBlocks(true);"
          ]
        },
        {
          "name": "setZScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the z scale of the shape"
          ],
          "params": [
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setZScale(3.5);"
          ]
        },
        {
          "name": "setOutlineGreen",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline green value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineGreen(34);"
          ]
        },
        {
          "name": "setRed",
          "is_arbitrary": false,
          "desc": [
            "This sets the red value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red between 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setRed(34);"
          ]
        },
        {
          "name": "setGreen",
          "is_arbitrary": false,
          "desc": [
            "This sets the green value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green between 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setGreen(34);"
          ]
        },
        {
          "name": "getYTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the y tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the y tilt"
          },
          "examples": [
            "shape.getYTilt();"
          ]
        },
        {
          "name": "getOpacity",
          "is_arbitrary": false,
          "desc": [
            "This returns the opacity of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the opacity of the shape"
          },
          "examples": [
            "shape.getOpacity();"
          ]
        },
        {
          "name": "setPos1",
          "is_arbitrary": false,
          "desc": [
            "This sets the first position of the shape"
          ],
          "params": [
            {
              "name": "pos1",
              "type": "Pos",
              "desc": "the first position of the shape"
            }
          ],
          "examples": [
            "shape.setPos1(new Pos(1, 0, 100));"
          ]
        },
        {
          "name": "centerPositions",
          "is_arbitrary": false,
          "desc": [
            "This centers the positions of the shape"
          ],
          "examples": [
            "shape.centerPositions();"
          ]
        },
        {
          "name": "getRed",
          "is_arbitrary": false,
          "desc": [
            "This returns the red value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the red value of the shape"
          },
          "examples": [
            "shape.getRed();"
          ]
        },
        {
          "name": "getRGBList",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGB value of the shape as a list"
          ],
          "returns": {
            "type": "List",
            "desc": "the RGB value of the shape as a list in the form [red, green, blue]"
          },
          "examples": [
            "r, g, b = shape.getRGBList();"
          ]
        },
        {
          "name": "setBlue",
          "is_arbitrary": false,
          "desc": [
            "This sets the blue value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue between 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setBlue(34);"
          ]
        },
        {
          "name": "stopRendering",
          "is_arbitrary": false,
          "desc": [
            "This stops the shape from rendering"
          ],
          "examples": [
            "shape.stopRendering();"
          ]
        },
        {
          "name": "setOutlinePixelWidth",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline pixel width of the shape, using a single value"
          ],
          "params": [
            {
              "name": "width",
              "type": "Number",
              "desc": "the width of the outline in pixels"
            }
          ],
          "examples": [
            "shape.setOutlinePixelWidth(5);"
          ]
        },
        {
          "name": "setYScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the y scale of the shape"
          ],
          "params": [
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            }
          ],
          "examples": [
            "shape.setYScale(2.5);"
          ]
        },
        {
          "name": "getYScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the y scale of the shape"
          ],
          "examples": [
            "shape.getYScale();"
          ]
        },
        {
          "name": "getRGBAList",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGBA value of the shape as a list"
          ],
          "returns": {
            "type": "List",
            "desc": "the RGBA value of the shape as a list in the form [red, green, blue, opacity]"
          },
          "examples": [
            "r, g, b, a = shape.getRGBAList();"
          ]
        },
        {
          "name": "getZTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the z tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the z tilt"
          },
          "examples": [
            "shape.getZTilt();"
          ]
        },
        {
          "name": "render",
          "is_arbitrary": false,
          "desc": [
            "This sets the shape to be rendered indefinitely, the shape will only stop rendering when the script ends or when you call the stopRendering() method"
          ],
          "examples": [
            "shape.render();"
          ]
        },
        {
          "name": "setZTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the z tilt of the shape"
          ],
          "params": [
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setZTilt(100);"
          ]
        },
        {
          "name": "getRGB",
          "is_arbitrary": false,
          "desc": [
            "This returns the RGB value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the RGB value of the shape as a single number in the form 0xRRGGBB"
          },
          "examples": [
            "shape.getRGB();"
          ]
        },
        {
          "name": "getZScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the z scale of the shape"
          ],
          "examples": [
            "shape.getZScale();"
          ]
        },
        {
          "name": "setXScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the x scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            }
          ],
          "examples": [
            "shape.setXScale(1.5);"
          ]
        },
        {
          "name": "setScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            },
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            },
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setScale(1.5, 2.5, 3.5);"
          ]
        },
        {
          "name": "setOutlineRed",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline red value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineRed(34);"
          ]
        },
        {
          "name": "setYTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the y tilt of the shape"
          ],
          "params": [
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            }
          ],
          "examples": [
            "shape.setYTilt(100);"
          ]
        },
        {
          "name": "shouldRenderThroughBlocks",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the shape should render through blocks"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the shape should render through blocks"
          },
          "examples": [
            "shape.shouldRenderThroughBlocks();"
          ]
        },
        {
          "name": "getBlue",
          "is_arbitrary": false,
          "desc": [
            "This returns the blue value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the blue value of the shape"
          },
          "examples": [
            "shape.getBlue();"
          ]
        },
        {
          "name": "setPos2",
          "is_arbitrary": false,
          "desc": [
            "This sets the second position of the shape"
          ],
          "params": [
            {
              "name": "pos2",
              "type": "Pos",
              "desc": "the second position of the shape"
            }
          ],
          "examples": [
            "shape.setPos2(new Pos(100, 0, 200));"
          ]
        },
        {
          "name": "setTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            },
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            },
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setTilt(100, 0, 80);"
          ]
        },
        {
          "name": "setOutlineBlue",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline blue value of the shape, using a single value"
          ],
          "params": [
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue between 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineBlue(34);"
          ]
        },
        {
          "name": "setOutlineColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the width of the shape, using a single value, this function",
            "also has a sibling named `setOutlineColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setOutlineColour(0xFF00FF);"
          ]
        },
        {
          "name": "setOutlineColour",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline colour of the shape, using three values, this function",
            "also has a sibling named `setOutlineColor()` that has the same functionality"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineColour(255, 0, 255);"
          ]
        },
        {
          "name": "getGreen",
          "is_arbitrary": false,
          "desc": [
            "This returns the green value of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the green value of the shape"
          },
          "examples": [
            "shape.getGreen();"
          ]
        },
        {
          "name": "setColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using a single value, this"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setColor(0xFF0000);"
          ]
        },
        {
          "name": "setColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the colour of the shape, using three values this function"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setColor(34, 55, 0);"
          ]
        },
        {
          "name": "getXScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the x scale of the shape"
          ],
          "examples": [
            "shape.getXScale();"
          ]
        },
        {
          "name": "setOutlineColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the width of the shape, using a single value, this function"
          ],
          "params": [
            {
              "name": "colour",
              "type": "Number",
              "desc": "the colour, usually you would use hexadecimal, 0xRRGGBB where RR represents red from 00 - FF, GG represents green from 00 - FF, and BB represents blue from 00 - FF"
            }
          ],
          "examples": [
            "shape.setOutlineColor(0xFF00FF);"
          ]
        },
        {
          "name": "setOutlineColor",
          "is_arbitrary": false,
          "desc": [
            "This sets the outline colour of the shape, using three values, this function"
          ],
          "params": [
            {
              "name": "red",
              "type": "Number",
              "desc": "the amount of red 0 - 255"
            },
            {
              "name": "green",
              "type": "Number",
              "desc": "the amount of green 0 - 255"
            },
            {
              "name": "blue",
              "type": "Number",
              "desc": "the amount of blue 0 - 255"
            }
          ],
          "examples": [
            "shape.setOutlineColor(255, 0, 255);"
          ]
        },
        {
          "name": "setXTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the x tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            }
          ],
          "examples": [
            "shape.setXTilt(100);"
          ]
        },
        {
          "name": "getXTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the x tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the x tilt"
          },
          "examples": [
            "shape.getXTilt();"
          ]
        },
        {
          "name": "setOpacity",
          "is_arbitrary": false,
          "desc": [
            "This sets the opacity of the shape, using a single value"
          ],
          "params": [
            {
              "name": "alpha",
              "type": "Number",
              "desc": "the opacity, where 255 is solid colour and 0 is no colour"
            }
          ],
          "throws": [
            "Colour ... is out of bounds, must be between 0 - 255"
          ],
          "examples": [
            "shape.setOpacity(34);"
          ]
        }
      ],
      "static_methods": []
    },
    "FakeEntity": {
      "name": "FakeEntity",
      "desc": [
        "This allows you to create a fake entity which can be rendered in the world."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "members": [
        {
          "name": "world",
          "assignable": false,
          "desc": [
            "The world that the entity is being rendered in"
          ],
          "type": "World",
          "examples": [
            "fakeEntity.world;"
          ]
        },
        {
          "name": "pos",
          "assignable": false,
          "desc": [
            "The position of the entity"
          ],
          "type": "Pos",
          "examples": [
            "fakeEntity.pos;"
          ]
        },
        {
          "name": "bodyYaw",
          "assignable": false,
          "desc": [
            "The yaw of the entity"
          ],
          "type": "Number",
          "examples": [
            "fakeEntity.bodyYaw;"
          ]
        },
        {
          "name": "pitch",
          "assignable": false,
          "desc": [
            "The pitch of the entity"
          ],
          "type": "Number",
          "examples": [
            "fakeEntity.pitch;"
          ]
        },
        {
          "name": "entity",
          "assignable": false,
          "desc": [
            "The entity that is being rendered"
          ],
          "type": "Entity",
          "examples": [
            "fakeEntity.entity;"
          ]
        },
        {
          "name": "yaw",
          "assignable": false,
          "desc": [
            "The yaw of the entity"
          ],
          "type": "Number",
          "examples": [
            "fakeEntity.yaw;"
          ]
        }
      ],
      "constructors": [
        {
          "desc": [
            "Creates a new fake entity"
          ],
          "params": [
            {
              "name": "entity",
              "type": "Entity",
              "desc": "The entity that you want to create into a fake entity"
            },
            {
              "name": "world",
              "type": "World",
              "desc": "The world that the entity is being rendered in"
            }
          ],
          "examples": [
            "fakeEntity = new FakeEntity();"
          ]
        }
      ],
      "methods": [
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "Sets the position of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The new position of the entity"
            }
          ],
          "examples": [
            "fakeEntity.setPos(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "Sets the position of the entity"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The new position of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.setPos(new Pos(0, 0, 0), 0);"
          ]
        },
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "Sets the position of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "The new x position of the entity"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "The new y position of the entity"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "The new z position of the entity"
            }
          ],
          "examples": [
            "fakeEntity.setPos(0, 0, 0);"
          ]
        },
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "Sets the position of the entity"
          ],
          "params": [
            {
              "name": "x",
              "type": "Number",
              "desc": "The new x position of the entity"
            },
            {
              "name": "y",
              "type": "Number",
              "desc": "The new y position of the entity"
            },
            {
              "name": "z",
              "type": "Number",
              "desc": "The new z position of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.setPos(0, 0, 0, 10);"
          ]
        },
        {
          "name": "spawn",
          "is_arbitrary": false,
          "desc": [
            "Spawns the entity (makes it render in the world)"
          ],
          "examples": [
            "fakeEntity.spawn();"
          ]
        },
        {
          "name": "updatePosAndRotation",
          "is_arbitrary": false,
          "desc": [
            "Updates the position and rotation of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The new position of the entity"
            },
            {
              "name": "yaw",
              "type": "Number",
              "desc": "The new yaw of the entity"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "The new pitch of the entity"
            }
          ],
          "examples": [
            "fakeEntity.updatePosAndRotation(new Pos(100, 0, 100), 0, 0);"
          ]
        },
        {
          "name": "updatePosAndRotation",
          "is_arbitrary": false,
          "desc": [
            "Updates the position and rotation of the entity"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The new position of the entity"
            },
            {
              "name": "yaw",
              "type": "Number",
              "desc": "The new yaw of the entity"
            },
            {
              "name": "pitch",
              "type": "Number",
              "desc": "The new pitch of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.updatePosAndRotation(new Pos(100, 0, 100), 0, 0, 10);"
          ]
        },
        {
          "name": "setPitch",
          "is_arbitrary": false,
          "desc": [
            "Sets the pitch of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "pitch",
              "type": "Number",
              "desc": "The new pitch of the entity"
            }
          ],
          "examples": [
            "fakeEntity.setPitch(0);"
          ]
        },
        {
          "name": "setPitch",
          "is_arbitrary": false,
          "desc": [
            "Sets the pitch of the entity"
          ],
          "params": [
            {
              "name": "pitch",
              "type": "Number",
              "desc": "The new pitch of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.setPitch(0, 10);"
          ]
        },
        {
          "name": "despawn",
          "is_arbitrary": false,
          "desc": [
            "Despawns the entity (makes it not render in the world)"
          ],
          "examples": [
            "fakeEntity.despawn();"
          ]
        },
        {
          "name": "setWorld",
          "is_arbitrary": false,
          "desc": [
            "Sets the world that the entity is being rendered in"
          ],
          "params": [
            {
              "name": "world",
              "type": "World",
              "desc": "The world that the entity is being rendered in"
            }
          ],
          "examples": [
            "fakeEntity.setWorld(MinecraftClient.getClient().getWorld());"
          ]
        },
        {
          "name": "setYaw",
          "is_arbitrary": false,
          "desc": [
            "Sets the yaw of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "yaw",
              "type": "Number",
              "desc": "The new yaw of the entity"
            }
          ],
          "examples": [
            "fakeEntity.setYaw(0);"
          ]
        },
        {
          "name": "setYaw",
          "is_arbitrary": false,
          "desc": [
            "Sets the yaw of the entity"
          ],
          "params": [
            {
              "name": "yaw",
              "type": "Number",
              "desc": "The new yaw of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.setYaw(0, 10);"
          ]
        },
        {
          "name": "setBodyYaw",
          "is_arbitrary": false,
          "desc": [
            "Sets the body yaw of the entity with no interpolation"
          ],
          "params": [
            {
              "name": "bodyYaw",
              "type": "Number",
              "desc": "The new body yaw of the entity"
            }
          ],
          "examples": [
            "fakeEntity.setBodyYaw(0);"
          ]
        },
        {
          "name": "setBodyYaw",
          "is_arbitrary": false,
          "desc": [
            "Sets the body yaw of the entity"
          ],
          "params": [
            {
              "name": "bodyYaw",
              "type": "Number",
              "desc": "The new body yaw of the entity"
            },
            {
              "name": "interpolationSteps",
              "type": "Number",
              "desc": "The number of interpolation steps to take"
            }
          ],
          "examples": [
            "fakeEntity.setBodyYaw(0, 10);"
          ]
        }
      ],
      "static_methods": []
    },
    "FakeBlock": {
      "name": "FakeBlock",
      "desc": [
        "This class can be used to create fake blocks which can be rendered in the world."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "members": [],
      "constructors": [
        {
          "desc": [
            "Creates a fake block with the given block and position"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "The block to use"
            },
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The position of the block"
            }
          ],
          "examples": [
            "new FakeBlock(Material.BEDROCK.asBlock(), new Pos(0, 0, 0));"
          ]
        }
      ],
      "methods": [
        {
          "name": "getZScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the z scale of the shape"
          ],
          "examples": [
            "shape.getZScale();"
          ]
        },
        {
          "name": "getBlock",
          "is_arbitrary": false,
          "desc": [
            "Gets the current block type of the fake block"
          ],
          "returns": {
            "type": "Block",
            "desc": "The block type of the fake block"
          },
          "examples": [
            "fakeBlock.getBlock();"
          ]
        },
        {
          "name": "getDirection",
          "is_arbitrary": false,
          "desc": [
            "This gets the direction of the shape"
          ],
          "returns": {
            "type": "String",
            "desc": "the direction of the shape as a string, this can be 'north', 'south', 'east', 'west', 'down', or 'up', null if it has no direction"
          },
          "examples": [
            "shape.getDirection();"
          ]
        },
        {
          "name": "setXScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the x scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            }
          ],
          "examples": [
            "shape.setXScale(1.5);"
          ]
        },
        {
          "name": "setScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the scale of the shape"
          ],
          "params": [
            {
              "name": "xScale",
              "type": "Number",
              "desc": "the x scale of the shape"
            },
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            },
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setScale(1.5, 2.5, 3.5);"
          ]
        },
        {
          "name": "setYTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the y tilt of the shape"
          ],
          "params": [
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            }
          ],
          "examples": [
            "shape.setYTilt(100);"
          ]
        },
        {
          "name": "setBlock",
          "is_arbitrary": false,
          "desc": [
            "Sets the block type to render of the fake block"
          ],
          "params": [
            {
              "name": "block",
              "type": "Block",
              "desc": "The block to render"
            }
          ],
          "examples": [
            "fakeBlock.setBlock(Material.BEDROCK.asBlock());"
          ]
        },
        {
          "name": "setZScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the z scale of the shape"
          ],
          "params": [
            {
              "name": "zScale",
              "type": "Number",
              "desc": "the z scale of the shape"
            }
          ],
          "examples": [
            "shape.setZScale(3.5);"
          ]
        },
        {
          "name": "getYTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the y tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the y tilt"
          },
          "examples": [
            "shape.getYTilt();"
          ]
        },
        {
          "name": "setTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            },
            {
              "name": "yTilt",
              "type": "Number",
              "desc": "the y tilt"
            },
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setTilt(100, 0, 80);"
          ]
        },
        {
          "name": "setPos",
          "is_arbitrary": false,
          "desc": [
            "Sets the position of the fake block"
          ],
          "params": [
            {
              "name": "pos",
              "type": "Pos",
              "desc": "The position of the block"
            }
          ],
          "examples": [
            "fakeBlock.setPos(new Pos(0, 0, 0));"
          ]
        },
        {
          "name": "getXScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the x scale of the shape"
          ],
          "examples": [
            "shape.getXScale();"
          ]
        },
        {
          "name": "stopRendering",
          "is_arbitrary": false,
          "desc": [
            "This stops the shape from rendering"
          ],
          "examples": [
            "shape.stopRendering();"
          ]
        },
        {
          "name": "setYScale",
          "is_arbitrary": false,
          "desc": [
            "This sets the y scale of the shape"
          ],
          "params": [
            {
              "name": "yScale",
              "type": "Number",
              "desc": "the y scale of the shape"
            }
          ],
          "examples": [
            "shape.setYScale(2.5);"
          ]
        },
        {
          "name": "getYScale",
          "is_arbitrary": false,
          "desc": [
            "This gets the y scale of the shape"
          ],
          "examples": [
            "shape.getYScale();"
          ]
        },
        {
          "name": "getPos",
          "is_arbitrary": false,
          "desc": [
            "Gets the current position of the fake block"
          ],
          "returns": {
            "type": "Pos",
            "desc": "The position of the fake block"
          },
          "examples": [
            "fakeBlock.getPos();"
          ]
        },
        {
          "name": "setDirection",
          "is_arbitrary": false,
          "desc": [
            "This sets the direction of the shape"
          ],
          "params": [
            {
              "name": "direction",
              "type": "String",
              "desc": "the direction of the shape as a string, this can be 'north', 'south', 'east', 'west', 'down', or 'up'"
            }
          ],
          "examples": [
            "shape.setDirection('down');"
          ]
        },
        {
          "name": "getZTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the z tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the z tilt"
          },
          "examples": [
            "shape.getZTilt();"
          ]
        },
        {
          "name": "setXTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the x tilt of the shape"
          ],
          "params": [
            {
              "name": "xTilt",
              "type": "Number",
              "desc": "the x tilt"
            }
          ],
          "examples": [
            "shape.setXTilt(100);"
          ]
        },
        {
          "name": "render",
          "is_arbitrary": false,
          "desc": [
            "This sets the shape to be rendered indefinitely, the shape will only stop rendering when the script ends or when you call the stopRendering() method"
          ],
          "examples": [
            "shape.render();"
          ]
        },
        {
          "name": "getXTilt",
          "is_arbitrary": false,
          "desc": [
            "This gets the x tilt of the shape"
          ],
          "returns": {
            "type": "Number",
            "desc": "the x tilt"
          },
          "examples": [
            "shape.getXTilt();"
          ]
        },
        {
          "name": "setZTilt",
          "is_arbitrary": false,
          "desc": [
            "This sets the z tilt of the shape"
          ],
          "params": [
            {
              "name": "zTilt",
              "type": "Number",
              "desc": "the z tilt"
            }
          ],
          "examples": [
            "shape.setZTilt(100);"
          ]
        }
      ],
      "static_methods": []
    },
    "KeyBind": {
      "name": "KeyBind",
      "desc": [
        "This class allows you to create key binds that can be used, everything is",
        "handled for you internally so you just need to regers the key bind and",
        "the function you want to run when it is pressed."
      ],
      "import_path": null,
      "static_members": [],
      "members": [
        {
          "name": "callback",
          "assignable": false,
          "desc": [
            "The callback function that is called when the key bind is pressed"
          ],
          "type": "Function",
          "examples": [
            "keyBind.callback;"
          ]
        }
      ],
      "constructors": [
        {
          "desc": [
            "Creates a new key bind"
          ],
          "params": [
            {
              "name": "keyName",
              "type": "String",
              "desc": "the name of the key"
            }
          ],
          "examples": [
            "new KeyBind('MyKey');"
          ]
        }
      ],
      "methods": [
        {
          "name": "getKey",
          "is_arbitrary": false,
          "desc": [
            "Gets the key bind's key"
          ],
          "returns": {
            "type": "String",
            "desc": "the key bind's key"
          },
          "examples": [
            "keyBind.getKey();"
          ]
        },
        {
          "name": "setCallback",
          "is_arbitrary": false,
          "desc": [
            "Sets the callback function for the key bind"
          ],
          "params": [
            {
              "name": "callback",
              "type": "Function",
              "desc": "the callback function"
            }
          ],
          "examples": [
            "keyBind.setCallback(fun() { print('My key was pressed'); });"
          ]
        },
        {
          "name": "setKey",
          "is_arbitrary": false,
          "desc": [
            "Sets the key bind to a new key"
          ],
          "params": [
            {
              "name": "keyName",
              "type": "String",
              "desc": "the name of the key"
            }
          ],
          "examples": [
            "keyBind.setKey('f');"
          ]
        }
      ],
      "static_methods": []
    },
    "ConfigHandler": {
      "name": "ConfigHandler",
      "desc": [
        "This class allows you to easily read and write config files."
      ],
      "import_path": "Minecraft",
      "static_members": [],
      "members": [],
      "constructors": [
        {
          "desc": [
            "Creates a new ConfigHandler, this is used to read and save configs"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "The name of the config, this will also be the name of the config file"
            }
          ],
          "examples": [
            "new ConfigHandler('MyConfig');"
          ]
        },
        {
          "desc": [
            "Creates a new ConfigHandler, this is used to read and save configs"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "The name of the config, this will also be the name of the config file"
            },
            {
              "name": "read",
              "type": "Boolean",
              "desc": "Whether or not to read the config on creation"
            }
          ],
          "examples": [
            "new ConfigHandler('MyConfig', false);"
          ]
        }
      ],
      "methods": [
        {
          "name": "createScreen",
          "is_arbitrary": false,
          "desc": [
            "Creates a new config screen containing all of the configs in the handler, in alphabetical order"
          ],
          "params": [
            {
              "name": "title",
              "type": "Text",
              "desc": "The title of the screen"
            }
          ],
          "returns": {
            "type": "Screen",
            "desc": "The new config screen"
          },
          "examples": [
            "configHandler.createScreen();"
          ]
        },
        {
          "name": "createScreen",
          "is_arbitrary": false,
          "desc": [
            "Creates a new config screen containing all of the configs in the handler"
          ],
          "params": [
            {
              "name": "title",
              "type": "Text",
              "desc": "The title of the screen"
            },
            {
              "name": "alphabetical",
              "type": "Boolean",
              "desc": "Whether or not to sort the configs alphabetically"
            }
          ],
          "returns": {
            "type": "Screen",
            "desc": "The new config screen"
          },
          "examples": [
            "configHandler.createScreen();"
          ]
        },
        {
          "name": "resetAllToDefault",
          "is_arbitrary": false,
          "desc": [
            "Resets all configs to their default values"
          ],
          "examples": [
            "configHandler.resetAllToDefault();"
          ]
        },
        {
          "name": "setSavePath",
          "is_arbitrary": false,
          "desc": [
            "Sets the path to save the configs to, this shouldn't include the file name"
          ],
          "params": [
            {
              "name": "savePath",
              "type": "File",
              "desc": "The path to save the configs to"
            }
          ],
          "examples": [
            "configHandler.setSavePath(new File('/home/user/scripts/'));"
          ]
        },
        {
          "name": "read",
          "is_arbitrary": false,
          "desc": [
            "Reads the all the configs from the file",
            "If configs are already in the handler, only the values",
            "will be overwritten"
          ],
          "examples": [
            "configHandler.read();"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "Gets the name of the config"
          ],
          "returns": {
            "type": "String",
            "desc": "The name of the config"
          },
          "examples": [
            "configHandler.getName();"
          ]
        },
        {
          "name": "willSaveOnClose",
          "is_arbitrary": false,
          "desc": [
            "Gets whether or not the configs will be saved when the script ends"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "Whether or not the configs will be saved when the script ends"
          },
          "examples": [
            "configHandler.willSaveOnClose();"
          ]
        },
        {
          "name": "addConfig",
          "is_arbitrary": false,
          "desc": [
            "Adds a config to the handler"
          ],
          "params": [
            {
              "name": "config",
              "type": "Config",
              "desc": "The config to add"
            }
          ],
          "examples": [
            "config = Config.fromMap({\n    \"type\": \"boolean\",\n    \"name\": \"My Config\",\n    \"description\": \"This is my config\"\n});\nconfigHandler.addConfig(config);\n"
          ]
        },
        {
          "name": "setSaveOnClose",
          "is_arbitrary": false,
          "desc": [
            "Sets whether or not the configs should be saved when the script ends, by default this is true"
          ],
          "params": [
            {
              "name": "saveOnClose",
              "type": "Boolean",
              "desc": "Whether or not the configs should be saved when the script ends"
            }
          ],
          "examples": [
            "configHandler.setSaveOnClose(false);"
          ]
        },
        {
          "name": "save",
          "is_arbitrary": false,
          "desc": [
            "Saves the configs to the file"
          ],
          "examples": [
            "configHandler.save();"
          ]
        },
        {
          "name": "getAllConfigs",
          "is_arbitrary": false,
          "desc": [
            "Gets all the configs in the handler"
          ],
          "returns": {
            "type": "List",
            "desc": "All the configs in the handler"
          },
          "examples": [
            "configHandler.getAllConfigs();"
          ]
        },
        {
          "name": "removeConfig",
          "is_arbitrary": false,
          "desc": [
            "Removes a config from the handler"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "The name of the config to remove"
            }
          ],
          "examples": [
            "configHandler.removeConfig('My Config');"
          ]
        },
        {
          "name": "addConfigs",
          "is_arbitrary": false,
          "desc": [
            "Adds multiple configs to the handler"
          ],
          "params": [
            {
              "name": "configs",
              "type": "List",
              "desc": "The configs to add"
            }
          ],
          "examples": [
            "config = Config.fromMap({\n    \"type\": \"boolean\",\n    \"name\": \"My Config\",\n    \"description\": \"This is my config\"\n});\nconfigHandler.addConfigs([config]);\n"
          ]
        },
        {
          "name": "getConfig",
          "is_arbitrary": false,
          "desc": [
            "Gets a config from the handler"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "The name of the config"
            }
          ],
          "returns": {
            "type": "Config",
            "desc": "The config"
          },
          "examples": [
            "configHandler.getConfig('MyConfig');"
          ]
        }
      ],
      "static_methods": []
    }
  }
}
